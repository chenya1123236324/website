<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈亚的个人主页</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.chenya.site/"/>
  <updated>2019-09-16T01:57:01.508Z</updated>
  <id>http://www.chenya.site/</id>
  
  <author>
    <name>陈亚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的作品</title>
    <link href="http://www.chenya.site/2019/07/19/project/"/>
    <id>http://www.chenya.site/2019/07/19/project/</id>
    <published>2019-07-19T04:04:03.000Z</published>
    <updated>2019-09-16T01:57:01.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目经验整理"><a href="#项目经验整理" class="headerlink" title="项目经验整理"></a>项目经验整理</h1><blockquote><p><strong> 大牛家主站 - 网站端 </strong></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/%E4%BD%9C%E5%93%81/%E5%A4%A7%E7%89%9B%E5%AE%B6%E4%B8%BB%E7%AB%99PC.jpg" alt="大牛家主站 - 网站端" title="大牛家主站">                </div>                <div class="image-caption">大牛家主站</div>            </figure><p style="text-align: center;"><br>  <a href="https://www.daniujia.com/" title="大牛家主站 - 网站端" target="_blank">点击查看</a><br></p><hr><blockquote><p><strong> 大牛家主站 - 移动端 </strong></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/%E4%BD%9C%E5%93%81/%E5%A4%A7%E7%89%9B%E5%AE%B6%E4%B8%BB%E7%AB%99mobile.png" alt="大牛家主站 - 移动端" title="大牛家主站移动端">                </div>                <div class="image-caption">大牛家主站移动端</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/%E4%BD%9C%E5%93%81/%E4%B8%BB%E7%AB%99%E7%A7%BB%E5%8A%A8%E7%AB%AF.png" alt="微信扫一扫查看" title="微信扫一扫查看">                </div>                <div class="image-caption">微信扫一扫查看</div>            </figure><hr><blockquote><p><strong> 大牛家企业账户版 </strong></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/%E4%BD%9C%E5%93%81/%E5%A4%A7%E7%89%9B%E5%AE%B6%E4%BC%81%E4%B8%9A%E8%B4%A6%E6%88%B7%E7%89%88.png" alt="大牛家企业账户版" title="大牛家企业账户版">                </div>                <div class="image-caption">大牛家企业账户版</div>            </figure><p style="text-align: center;"><br>  <a href="https://corp.daniujia.com/login" title="大牛家企业账户版" target="_blank">点击查看</a><br></p><hr><blockquote><p><strong> 大牛家开放平台 </strong></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/%E4%BD%9C%E5%93%81/%E5%A4%A7%E7%89%9B%E5%AE%B6%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0.png" alt="大牛家开放平台" title="大牛家开放平台">                </div>                <div class="image-caption">大牛家开放平台</div>            </figure><p style="text-align: center;"><br>  <a href="https://open.daniujia.com/" title="大牛家开放平台" target="_blank">点击查看</a><br></p><hr><blockquote><p><strong> 大牛家信息中心 </strong></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/%E4%BD%9C%E5%93%81/%E5%A4%A7%E7%89%9B%E5%AE%B6%E4%BF%A1%E6%81%AF%E4%B8%AD%E5%BF%83.png" alt="大牛家信息中心" title="大牛家信息中心">                </div>                <div class="image-caption">大牛家信息中心</div>            </figure><p style="text-align: center;"><br>  <a href="https://staging.daniujia.com/" title="大牛家信息中心" target="_blank">点击查看</a><br></p><hr><blockquote><p><strong> 微信小程序 - 大牛家专家对接服务 </strong></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/%E4%BD%9C%E5%93%81/%E5%A4%A7%E7%89%9B%E5%AE%B6%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F.png" alt="大牛家专家对接服务" title="大牛家专家对接服务">                </div>                <div class="image-caption">大牛家专家对接服务</div>            </figure><hr><blockquote><p><strong> 大牛家管理后台 </strong></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/%E4%BD%9C%E5%93%81/%E5%A4%A7%E7%89%9B%E5%AE%B6%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0.jpg" alt="大牛家管理后台" title="大牛家管理后台">                </div>                <div class="image-caption">大牛家管理后台</div>            </figure><hr><blockquote><p><strong> CRM 4.0 </strong></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/%E4%BD%9C%E5%93%81/CRM4.0.jpg" alt="CRM 4.0" title="CRM">                </div>                <div class="image-caption">CRM</div>            </figure><hr><blockquote><p><strong> 同程旅游 - 海外玩乐 </strong></p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/%E4%BD%9C%E5%93%81/%E6%B5%B7%E5%A4%96%E7%8E%A9%E4%B9%90.png" alt="同程旅游 - 海外玩乐" title="海外玩乐">                </div>                <div class="image-caption">海外玩乐</div>            </figure><p style="text-align: center;"><br>  <a href="https://m.ly.com/global/" title="同程旅游 - 海外玩乐" target="_blank">点击查看</a><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;项目经验整理&quot;&gt;&lt;a href=&quot;#项目经验整理&quot; class=&quot;headerlink&quot; title=&quot;项目经验整理&quot;&gt;&lt;/a&gt;项目经验整理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt; 大牛家主站 - 网站端 &lt;/strong&gt;&lt;/p&gt;
&lt;/bloc
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="项目经验" scheme="http://www.chenya.site/tags/%E9%A1%B9%E7%9B%AE%E7%BB%8F%E9%AA%8C/"/>
    
      <category term="作品展示" scheme="http://www.chenya.site/tags/%E4%BD%9C%E5%93%81%E5%B1%95%E7%A4%BA/"/>
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>前端网站及资源导航</title>
    <link href="http://www.chenya.site/2018/06/18/001.%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/001.%E5%89%8D%E7%AB%AF%E7%BD%91%E7%AB%99%E5%8F%8A%E8%B5%84%E6%BA%90%E5%AF%BC%E8%88%AA%E6%95%B4%E7%90%86/"/>
    <id>http://www.chenya.site/2018/06/18/001.前端资源/001.前端网站及资源导航整理/</id>
    <published>2018-06-18T04:46:25.000Z</published>
    <updated>2019-09-16T01:57:01.486Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端网站及资源导航"><a href="#前端网站及资源导航" class="headerlink" title="前端网站及资源导航"></a>前端网站及资源导航</h1><p>这里收集整理本人喜好的前端相关网站和资源等，不断更新中。有好的资源欢迎推荐（请发邮件至：<a href="mailto:`1123236324@qq.com" target="_blank" rel="noopener">`1123236324@qq.com</a>`或者留言评论）。更详细内容请移步 <a href="http://www.chenya.site/">陈亚的个人主页</a></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><a href="#s1">综合</a></li><li><a href="#s2">社区、博客</a></li><li><a href="#s3">库、框架、资源</a></li><li><a href="#s4">CDN，云服务</a></li><li><a href="#s5">设计、模板</a></li><li><a href="#s6">交互、体验</a></li><li><a href="#s7">教程、书籍</a></li><li><a href="#s8">招聘、面试</a></li><li><a href="#s9">其他</a></li></ul><h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a><a name="s1"></a>综合</h2><table><thead><tr><th>名称</th><th>URL</th><th>简介</th></tr></thead><tbody><tr><td>W3C</td><td><a href="http://www.w3.org/" target="_blank" rel="noopener">www.w3.org</a> <br> <a href="http://www.chinaw3c.org/" target="_blank" rel="noopener">www.chinaw3c.org</a></td><td>万维网联盟官方网站</td></tr><tr><td>MDN</td><td><a href="https://developer.mozilla.org/" target="_blank" rel="noopener">developer.mozilla.org</a></td><td>Mozilla Developer Network，Mozilla 开发者网络</td></tr><tr><td>StackOverflow</td><td><a href="http://stackoverflow.com/" target="_blank" rel="noopener">stackoverflow.com</a></td><td>最大最全的技术问答社区</td></tr><tr><td>SegmentFault</td><td><a href="http://segmentfault.com/" target="_blank" rel="noopener">segmentfault.com</a></td><td>中国开发者社区，国内的SO</td></tr><tr><td>GitHub</td><td><a href="https://github.com/" target="_blank" rel="noopener">github.com</a></td><td>源码托管协作必备</td></tr><tr><td>码市</td><td><a href="https://coding.net/r/Z1XPN4" target="_blank" rel="noopener">coding.net</a></td><td>国内源码托管协作，免费版5个私有仓库</td></tr><tr><td>CanIUse</td><td><a href="http://caniuse.com/" target="_blank" rel="noopener">caniuse.com</a></td><td>兼容性速查</td></tr><tr><td>REPL</td><td><a href="http://jsfiddle.net/" target="_blank" rel="noopener">jsfiddle.net</a> <br> <a href="http://jsbin.com/" target="_blank" rel="noopener">jsbin.com</a> <br> <a href="https://repl.it/" target="_blank" rel="noopener">repl.it</a> <br> <a href="http://ideone.com/" target="_blank" rel="noopener">ideone.com</a> <br> <a href="https://babeljs.io/repl/" target="_blank" rel="noopener">babeljs.io/repl</a></td><td>在线交互式解释器环境</td></tr><tr><td>知乎</td><td><a href="http://www.zhihu.com/" target="_blank" rel="noopener">www.zhihu.com</a></td><td>每日必刷，可以关注<a href="https://www.zhihu.com/topic/19550901/hot" target="_blank" rel="noopener">前端开发</a>等话题</td></tr><tr><td>简书</td><td><a href="https://www.jianshu.com/" target="_blank" rel="noopener">www.jianshu.com</a></td><td>国内最优质的创作社区，可以关注前端相关专题</td></tr><tr><td>InfoQ</td><td><a href="http://www.infoq.com/" target="_blank" rel="noopener">www.infoq.com</a> <br> <a href="http://www.infoq.com/cn/" target="_blank" rel="noopener">www.infoq.com/cn</a></td><td>高质量软件开发领域知识与创新传播网站</td></tr><tr><td>MSDN</td><td><a href="http://msdn.microsoft.com/zh-cn/" target="_blank" rel="noopener">msdn.microsoft.com/zh-cn</a></td><td>微软开发者网络</td></tr><tr><td>开源中国</td><td><a href="http://www.oschina.net/" target="_blank" rel="noopener">www.oschina.net</a></td><td>国内最大的开源技术社区，开源项目速查</td></tr><tr><td>W3School</td><td><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">www.w3school.com.cn</a></td><td>在线教程，略老</td></tr></tbody></table><h2 id="社区、博客"><a href="#社区、博客" class="headerlink" title="社区、博客"></a><a name="s2"></a>社区、博客</h2><p>关闭的、不怎么更新的或者质量变差的不再搜集。</p><h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><table><thead><tr><th>名称</th><th>URL</th><th>简介</th></tr></thead><tbody><tr><td>w3ctech</td><td><a href="http://www.w3ctech.com/" target="_blank" rel="noopener">www.w3ctech.com</a></td><td>中国最大的前端技术社区，信息量多，但良莠不齐</td></tr><tr><td>V2EX</td><td><a href="http://v2ex.com/" target="_blank" rel="noopener">v2ex.com</a></td><td>创意工作者们的社区</td></tr><tr><td>掘金</td><td><a href="https://juejin.im/" target="_blank" rel="noopener">juejin.im</a></td><td>高手分享技术社区</td></tr><tr><td>阮一峰</td><td><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">www.ruanyifeng.com/blog</a></td><td>阮一峰个人博客，更新频繁，推荐</td></tr><tr><td>div.io</td><td><a href="http://div.io/" target="_blank" rel="noopener">div.io</a></td><td>高质量小圈子前端社区</td></tr><tr><td>前端乱炖</td><td><a href="http://www.html-js.com/" target="_blank" rel="noopener">www.html-js.com</a></td><td>也有很多不错的文章</td></tr><tr><td>w3cplus</td><td><a href="http://www.w3cplus.com/" target="_blank" rel="noopener">www.w3cplus.com</a></td><td>大漠主办的技术博客，貌似挂了</td></tr><tr><td>w3cfuns</td><td><a href="http://www.w3cfuns.com/" target="_blank" rel="noopener">www.w3cfuns.com</a></td><td>前端综合网站，内容较杂，闲时可以随便逛逛</td></tr><tr><td>CSS88</td><td><a href="http://www.css88.com/" target="_blank" rel="noopener">www.css88.com</a></td><td>有一些前端库的中文文档 @愚人码头</td></tr><tr><td>CNodeJS</td><td><a href="https://cnodejs.org/" target="_blank" rel="noopener">cnodejs.org</a></td><td>国内 Node.js 开源技术社区</td></tr><tr><td>AlloyTeam</td><td><a href="http://www.alloyteam.com/" target="_blank" rel="noopener">www.alloyteam.com</a></td><td>腾讯全端 AlloyTeam 团队博客</td></tr><tr><td>FEX</td><td><a href="http://fex.baidu.com/" target="_blank" rel="noopener">fex.baidu.com</a></td><td>百度web前端研发部</td></tr><tr><td>去哪儿网UED</td><td><a href="http://ued.qunar.com/" target="_blank" rel="noopener">ued.qunar.com</a></td><td>去哪儿网UED知识库</td></tr><tr><td>奇舞团</td><td><a href="https://75team.com/" target="_blank" rel="noopener">75team.com</a></td><td>360前端团队博客</td></tr><tr><td>百度EFE</td><td><a href="http://efe.baidu.com/" target="_blank" rel="noopener">efe.baidu.com</a></td><td>百度前端技术体系博客</td></tr><tr><td>阿里UED</td><td><a href="http://www.aliued.cn/" target="_blank" rel="noopener">www.aliued.cn</a></td><td>阿里UED团队博客</td></tr><tr><td>携程UED</td><td><a href="http://ued.ctrip.com/" target="_blank" rel="noopener">ued.ctrip.com</a></td><td>携程设计委员会</td></tr><tr><td>百度UED</td><td><a href="http://ued.baidu.com/" target="_blank" rel="noopener">ued.baidu.com</a></td><td>百度UED团队博客</td></tr><tr><td>张鑫旭</td><td><a href="http://www.zhangxinxu.com/wordpress/" target="_blank" rel="noopener">www.zhangxinxu.com/wordpress</a></td><td>ISUX张鑫旭个人博客，很高产</td></tr><tr><td>酷壳</td><td><a href="http://coolshell.cn/" target="_blank" rel="noopener">coolshell.cn</a></td><td>分享技术见闻，知识，趋势的博客</td></tr><tr><td>朴灵</td><td><a href="http://html5ify.com/" target="_blank" rel="noopener">html5ify.com</a></td><td>阿里数据平台数据产品部资深工程师朴灵</td></tr><tr><td>hax</td><td><a href="http://johnhax.net/" target="_blank" rel="noopener">johnhax.net</a></td><td>百姓网贺师俊</td></tr><tr><td>司徒正美</td><td><a href="http://www.cnblogs.com/rubylouvre" target="_blank" rel="noopener">www.cnblogs.com/rubylouvre</a></td><td>去哪儿网前端老大司徒正美</td></tr><tr><td>叶小钗</td><td><a href="http://www.cnblogs.com/yexiaochai" target="_blank" rel="noopener">www.cnblogs.com/yexiaochai</a></td><td>&nbsp;</td></tr><tr><td>Ty</td><td><a href="http://typeof.net/" target="_blank" rel="noopener">typeof.net</a></td><td>USTC的大牛</td></tr><tr><td>CSSForest</td><td><a href="http://blog.cssforest.org/" target="_blank" rel="noopener">blog.cssforest.org</a></td><td>腾讯重构大牛</td></tr><tr><td>99css</td><td><a href="http://www.99css.com/" target="_blank" rel="noopener">www.99css.com</a></td><td>ytzong</td></tr><tr><td>米随随</td><td><a href="http://s5s5.me/" target="_blank" rel="noopener">s5s5.me</a></td><td>刘小超博客</td></tr><tr><td>博客园</td><td><a href="http://www.cnblogs.com/" target="_blank" rel="noopener">www.cnblogs.com</a></td><td>微软系为主博客</td></tr><tr><td>大前端</td><td><a href="http://www.daqianduan.com/" target="_blank" rel="noopener">http://www.daqianduan.com</a></td><td>关注前端开发</td></tr><tr><td>设计达人</td><td><a href="http://www.shejidaren.com/" target="_blank" rel="noopener">http://www.shejidaren.com</a></td><td>更新较频繁，但转载也较多</td></tr><tr><td>Be For Web</td><td><a href="http://beforweb.com/" target="_blank" rel="noopener">http://beforweb.com</a></td><td>为网而生 - 原创译文博客</td></tr><tr><td>前端圈</td><td><a href="https://fequan.com/" target="_blank" rel="noopener">fequan.com</a></td><td>为广州web前端人员量身打造的生态圈，主要是主题演讲，基本停更</td></tr><tr><td>阿里妈妈MUX</td><td><a href="http://mux.alimama.com/" target="_blank" rel="noopener">mux.alimama.com</a></td><td>阿里妈妈MUX团队博客，基本停更</td></tr><tr><td>网易UED</td><td><a href="http://uedc.163.com/" target="_blank" rel="noopener">uedc.163.com</a></td><td>网易UED团队博客，貌似有问题</td></tr><tr><td>新浪UED</td><td><a href="http://ued.sina.com.cn/" target="_blank" rel="noopener">ued.sina.com.cn</a></td><td>新浪UED团队博客，很久不更新了</td></tr><tr><td>TID</td><td><a href="http://tid.tenpay.com/" target="_blank" rel="noopener">tid.tenpay.com</a></td><td>财付通TID团队博客，很久不更新了</td></tr><tr><td>TQ</td><td><a href="http://tqtan.com/" target="_blank" rel="noopener">tqtan.com</a></td><td>腾讯ISUX TQ，很久不更新了</td></tr><tr><td>winter</td><td><a href="http://winter-cn.cnblogs.com/" target="_blank" rel="noopener">winter-cn.cnblogs.com</a></td><td>阿里winter博客，很久不更新了</td></tr><tr><td>qiqiboy</td><td><a href="http://www.qiqiboy.com/" target="_blank" rel="noopener">www.qiqiboy.com</a></td><td>金山网络qiqiboy，很久不更新了</td></tr><tr><td>周爱民</td><td><a href="http://blog.csdn.net/aimingoo/" target="_blank" rel="noopener">blog.csdn.net/aimingoo</a></td><td>大道至简，很久不更新了</td></tr></tbody></table><h3 id="英文"><a href="#英文" class="headerlink" title="英文"></a>英文</h3><table><thead><tr><th>名称</th><th>URL</th><th>简介</th></tr></thead><tbody><tr><td>SmashingMagazine</td><td><a href="http://www.smashingmagazine.com/" target="_blank" rel="noopener">www.smashingmagazine.com</a></td><td>关于coding、design、mobile、ux等综合门户</td></tr><tr><td>CSS-Tricks</td><td><a href="https://css-tricks.com/" target="_blank" rel="noopener">css-tricks.com</a></td><td>CSS技巧集合</td></tr><tr><td>Medium</td><td><a href="https://medium.com/" target="_blank" rel="noopener">medium.com</a></td><td>需翻墙</td></tr><tr><td>DailyJS</td><td><a href="http://dailyjs.com/" target="_blank" rel="noopener">dailyjs.com</a></td><td>js相关技术博客</td></tr><tr><td>Tutorialzine</td><td><a href="http://tutorialzine.com/" target="_blank" rel="noopener">tutorialzine.com</a></td><td>coolest web development tutorials and resources</td></tr><tr><td>Codrops</td><td><a href="http://tympanus.net/codrops/" target="_blank" rel="noopener">tympanus.net/codrops</a></td><td>web设计、开发博客</td></tr><tr><td>NCZOnline</td><td><a href="http://www.nczonline.net/" target="_blank" rel="noopener">www.nczonline.net</a></td><td>Nicholas C. Zakas博客，Yahoo前端leader，牛人不解释</td></tr><tr><td>Addy</td><td><a href="http://addyosmani.com/blog/" target="_blank" rel="noopener">addyosmani.com/blog</a></td><td>Addy Osmani的博客，Chrome team大牛</td></tr><tr><td>Steve Souders</td><td><a href="http://www.stevesouders.com/blog/" target="_blank" rel="noopener">www.stevesouders.com/blog</a></td><td>Steve Souders的博客，web performance专家</td></tr><tr><td>Jake Rutter</td><td><a href="http://www.onerutter.com/" target="_blank" rel="noopener">www.onerutter.com</a></td><td>Jake Rutter的博客</td></tr></tbody></table><!--| Paul Irish | [www.paulirish.com](http://www.paulirish.com/) | Paul Irish的博客，Google Chrome Team 前端开发 |--><h2 id="库、框架、资源、工具"><a href="#库、框架、资源、工具" class="headerlink" title="库、框架、资源、工具"></a><a name="s3"></a>库、框架、资源、工具</h2><ul><li><a href="https://github.com/sorrycc/awesome-javascript" target="_blank" rel="noopener">Awesome JavaScript</a></li><li><a href="https://github.com/davidsonfellipe/awesome-wpo" target="_blank" rel="noopener">Awesome Web Performance Optimization</a></li><li><a href="https://github.com/sotayamashita/awesome-css" target="_blank" rel="noopener">Awesome CSS</a></li><li><a href="https://github.com/enaqx/awesome-react" target="_blank" rel="noopener">Awesome React</a></li><li><a href="https://github.com/AngularClass/awesome-angular" target="_blank" rel="noopener">Awesome Angular</a></li><li><a href="https://github.com/sindresorhus/awesome-nodejs" target="_blank" rel="noopener">Awesome Node.js</a></li><li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">Awesome Vue.js</a></li><li><a href="https://github.com/jondot/awesome-react-native" target="_blank" rel="noopener">Awesome React Native</a></li><li><a href="https://github.com/joggerplus/awesome-weex" target="_blank" rel="noopener">Awesome Weex</a></li><li><a href="https://github.com/websemantics/awesome-ant-design" target="_blank" rel="noopener">Awesome Ant Design</a></li><li><a href="https://github.com/loverajoel/jstips" target="_blank" rel="noopener">JS Tips</a></li></ul><!--- [frontend-dev-bookmarks](https://github.com/dypsilon/frontend-dev-bookmarks)- [github-FE-project](https://github.com/hawx1993/github-FE-project)--><h2 id="CDN、云服务"><a href="#CDN、云服务" class="headerlink" title="CDN、云服务"></a><a name="s4"></a>CDN、云服务</h2><table><thead><tr><th>名称</th><th>URL</th><th>简介</th></tr></thead><tbody><tr><td>百度CDN</td><td><a href="http://cdn.code.baidu.com/" target="_blank" rel="noopener">cdn.code.baidu.com</a></td><td>百度静态资源公共库</td></tr><tr><td>360CDN</td><td><a href="http://libs.useso.com/" target="_blank" rel="noopener">libs.useso.com</a></td><td>360网站卫士常用前端公共库CDN，Google那几个替换很好使</td></tr><tr><td>微信CDN</td><td><a href="http://qydev.weixin.qq.com/cdn/cdnjs.html" target="_blank" rel="noopener">qydev.weixin.qq.com/cdn/cdnjs.html</a></td><td>微信前端库CDN服务</td></tr><tr><td>BootCDN</td><td><a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">www.bootcdn.cn</a></td><td>Bootstrap中文网开源项目CDN库</td></tr><tr><td>淘宝NPM</td><td><a href="http://npm.taobao.org/" target="_blank" rel="noopener">npm.taobao.org</a></td><td>淘宝 NPM 镜像</td></tr><tr><td>阿里云</td><td><a href="https://www.aliyun.com/" target="_blank" rel="noopener">www.aliyun.com</a></td><td>在国内首选</td></tr><tr><td>七牛</td><td><a href="https://www.qiniu.com/" target="_blank" rel="noopener">www.qiniu.com</a></td><td>七牛云，可以存一些文件视频之类</td></tr></tbody></table><h2 id="设计、模板"><a href="#设计、模板" class="headerlink" title="设计、模板"></a><a name="s5"></a>设计、模板</h2><table><thead><tr><th>名称</th><th>URL</th><th>简介</th></tr></thead><tbody><tr><td>Designerslist</td><td><a href="http://www.designerslist.info/" target="_blank" rel="noopener">www.designerslist.info</a></td><td>国外设计网站导航</td></tr><tr><td>NAV80</td><td><a href="http://nav80.com/" target="_blank" rel="noopener">nav80.com</a></td><td>设计师网址导航</td></tr><tr><td>UISDC</td><td><a href="http://hao.uisdc.com/" target="_blank" rel="noopener">hao.uisdc.com</a></td><td>又一个设计师网址导航</td></tr><tr><td>dribbble</td><td><a href="https://dribbble.com/" target="_blank" rel="noopener">dribbble.com</a></td><td>设计师社区</td></tr><tr><td>behance</td><td><a href="https://www.behance.net/" target="_blank" rel="noopener">www.behance.net</a></td><td>Showcase &amp; Discover Creative Work</td></tr><tr><td>UI.PARADE</td><td><a href="http://www.uiparade.com/" target="_blank" rel="noopener">www.uiparade.com</a></td><td>UI设计灵感集合</td></tr><tr><td>站酷</td><td><a href="http://www.zcool.com.cn/" target="_blank" rel="noopener">www.zcool.com.cn</a></td><td>我的最爱</td></tr><tr><td>UI中国</td><td><a href="http://www.ui.cn/" target="_blank" rel="noopener">www.ui.cn</a></td><td>前身为iconfans.com</td></tr><tr><td>dowebok</td><td><a href="http://www.dowebok.com/" target="_blank" rel="noopener">www.dowebok.com</a></td><td>做好网站，一些代码库和素材</td></tr><tr><td>优设</td><td><a href="http://www.uisdc.com/" target="_blank" rel="noopener">www.uisdc.com</a></td><td>优秀网页设计联盟</td></tr><tr><td>UIRSS</td><td><a href="http://www.uirss.com/" target="_blank" rel="noopener">www.uirss.com</a></td><td>UI设计门户网站和垂直型社区</td></tr><tr><td>设计达人</td><td><a href="http://www.shejidaren.com/" target="_blank" rel="noopener">www.shejidaren.com</a></td><td>一些设计相关的文章、素材等</td></tr><tr><td>Color CC</td><td><a href="https://color.adobe.com/zh/" target="_blank" rel="noopener">color.adobe.com/zh</a></td><td>Adobe在线配色，原Kuler</td></tr><tr><td>配色网</td><td><a href="http://www.peise.net/" target="_blank" rel="noopener">www.peise.net</a></td><td>配色方案和颜色搭配</td></tr><tr><td>找字网</td><td><a href="http://www.zhaozi.cn/" target="_blank" rel="noopener">www.zhaozi.cn</a></td><td>字体大全</td></tr><tr><td>Chinaz</td><td><a href="http://font.chinaz.com/" target="_blank" rel="noopener">font.chinaz.com</a></td><td>字体素材</td></tr><tr><td>easyicon</td><td><a href="http://www.easyicon.net/" target="_blank" rel="noopener">www.easyicon.net</a></td><td>ICON资源</td></tr><tr><td>flaticon</td><td><a href="http://www.flaticon.com/" target="_blank" rel="noopener">www.flaticon.com</a></td><td>矢量ICON资源</td></tr><tr><td>ICONFONT</td><td><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">www.iconfont.cn</a></td><td>阿里UX矢量图标库</td></tr><tr><td>iconpng</td><td><a href="http://www.iconpng.com/" target="_blank" rel="noopener">www.iconpng.com</a></td><td>ICON资源</td></tr><tr><td>brands</td><td><a href="http://www.brandsoftheworld.com/" target="_blank" rel="noopener">www.brandsoftheworld.com</a></td><td>世界logo大全</td></tr><tr><td>LOGOpond</td><td><a href="http://logopond.com/" target="_blank" rel="noopener">logopond.com</a></td><td>Logo大全</td></tr><tr><td>Mobile Patterns</td><td><a href="http://www.mobile-patterns.com/" target="_blank" rel="noopener">www.mobile-patterns.com</a></td><td>移动UI设计范例</td></tr></tbody></table><h2 id="交互、体验"><a href="#交互、体验" class="headerlink" title="交互、体验"></a><a name="s6"></a>交互、体验</h2><table><thead><tr><th>名称</th><th>URL</th><th>简介</th></tr></thead><tbody><tr><td>ISUX</td><td><a href="http://isux.tencent.com/" target="_blank" rel="noopener">isux.tencent.com</a></td><td>腾讯社交用户体验设计</td></tr><tr><td>beforweb</td><td><a href="http://beforweb.com/" target="_blank" rel="noopener">beforweb.com</a></td><td>ISUX C7210博客</td></tr><tr><td>JDC</td><td><a href="http://jdc.jd.com/" target="_blank" rel="noopener">jdc.jd.com</a></td><td>京东用户体验设计团队</td></tr><tr><td>IFED</td><td><a href="http://ifed.me/" target="_blank" rel="noopener">ifed.me</a></td><td>蚂蚁金服金融体验设计团队</td></tr><tr><td>腾讯CDC</td><td><a href="http://cdc.tencent.com/" target="_blank" rel="noopener">cdc.tencent.com</a></td><td>腾讯用户研究与体验设计中心</td></tr><tr><td>腾讯MXD</td><td><a href="http://mxd.tencent.com/" target="_blank" rel="noopener">mxd.tencent.com</a></td><td>腾讯移动互联网设计团队</td></tr><tr><td>TGideas</td><td><a href="http://tgideas.qq.com/" target="_blank" rel="noopener">tgideas.qq.com</a></td><td>腾讯游戏专业设计团队</td></tr><tr><td>百度MUX</td><td><a href="http://mux.baidu.com/" target="_blank" rel="noopener">mux.baidu.com</a></td><td>百度MUX团队</td></tr></tbody></table><!--| 微博UDC | [udc.weibo.com](http://udc.weibo.com/) | 新浪微博设计团队 |--><h2 id="教程、书籍"><a href="#教程、书籍" class="headerlink" title="教程、书籍"></a><a name="s7"></a>教程、书籍</h2><table><thead><tr><th>名称</th><th>URL</th><th>简介</th></tr></thead><tbody><tr><td>慕课网</td><td><a href="http://www.imooc.com/" target="_blank" rel="noopener">www.imooc.com</a></td><td>前端技能学习平台，很多好的教程</td></tr><tr><td>freeCodeCamp</td><td><a href="https://www.freecodecamp.com/" target="_blank" rel="noopener">www.freecodecamp.com</a></td><td>在线免费学习前端编码</td></tr><tr><td>百度技术沙龙</td><td><a href="http://www.infoq.com/cn/zones/baidu-salon/" target="_blank" rel="noopener">www.infoq.com/cn/zones/baidu-salon</a></td><td>全栈综合</td></tr><tr><td>腾讯大讲堂</td><td><a href="http://djt.qq.com/" target="_blank" rel="noopener">djt.qq.com</a></td><td>分享产品技术和成功经验</td></tr><tr><td>IBM developerWorks</td><td><a href="http://www.ibm.com/developerworks/cn/" target="_blank" rel="noopener">www.ibm.com/developerworks/cn</a></td><td>同上</td></tr><tr><td>极客学院</td><td><a href="http://www.jikexueyuan.com/" target="_blank" rel="noopener">www.jikexueyuan.com</a></td><td>综合课程</td></tr><tr><td>NODESCHOOL</td><td><a href="http://nodeschool.io/" target="_blank" rel="noopener">nodeschool.io</a></td><td>在线Node.js入门教学</td></tr><tr><td>hackr</td><td><a href="http://hackr.io/" target="_blank" rel="noopener">hackr.io</a></td><td>各种各样的在线编程教程集合</td></tr><tr><td>node123</td><td><a href="https://github.com/youyudehexie/node123" target="_blank" rel="noopener">github.com/youyudehexie/node123</a></td><td>node中文资料导航</td></tr><tr><td>移动开发收藏夹</td><td><a href="https://github.com/hoosin/mobile-web-favorites" target="_blank" rel="noopener">github.com/hoosin/mobile-web-favorites</a></td></tr><tr><td>tuts+</td><td><a href="http://tutsplus.com/tutorials" target="_blank" rel="noopener">tutsplus.com/tutorials</a></td><td>Tutorials, inspiration and videos to help you learn. Updated daily</td></tr><tr><td>免费编程书籍</td><td><a href="https://github.com/vhf/free-programming-books" target="_blank" rel="noopener">github.com/vhf/free-programming-books</a></td><td><a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="noopener">中文</a></td></tr><tr><td>拼吾爱</td><td><a href="http://www.pin5i.com/" target="_blank" rel="noopener">www.pin5i.com</a></td><td>电子书资源，有钱还是要支持正版哦</td></tr><tr><td>Java1234</td><td><a href="http://www.java1234.com/" target="_blank" rel="noopener">www.java1234.com</a></td><td>同样电子书资源</td></tr><tr><td>EBOOKEE</td><td><a href="http://www.ebookee.net/" target="_blank" rel="noopener">www.ebookee.net</a></td><td>英文电子书资源</td></tr><tr><td>IT-BOOKS</td><td><a href="http://it-ebooks.info/" target="_blank" rel="noopener">it-ebooks.info</a></td><td>比较全的英文电子书</td></tr></tbody></table><!--| 阿里技术沙龙 | [club.alibabatech.org](http://club.alibabatech.org/) | 阿里技术嘉年华 |--><h2 id="招聘、面试"><a href="#招聘、面试" class="headerlink" title="招聘、面试"></a><a name="s8"></a>招聘、面试</h2><p>还在51job、智联、58等投简历和找人才么，试试下面这些吧：</p><table><thead><tr><th>名称</th><th>URL</th><th>简介</th></tr></thead><tbody><tr><td>拉勾网</td><td><a href="http://www.lagou.com/" target="_blank" rel="noopener">www.lagou.com</a></td><td>互联网企业招聘</td></tr><tr><td>看准网</td><td><a href="http://www.kanzhun.com/" target="_blank" rel="noopener">www.kanzhun.com</a></td><td>看准网主要是公司点评和面试经验，新推出的Boss直聘效率不错</td></tr><tr><td>Boss直聘</td><td><a href="http://www.zhipin.com/" target="_blank" rel="noopener">www.zhipin.com</a></td><td>和老板聊</td></tr><tr><td>100offer</td><td><a href="http://100offer.com/" target="_blank" rel="noopener">100offer.com</a></td><td>程序员拍卖</td></tr><tr><td>猎聘网</td><td><a href="http://www.liepin.com/" target="_blank" rel="noopener">www.liepin.com</a></td><td>有猎头帮助会快一些</td></tr><tr><td>内推网</td><td><a href="http://www.neitui.me/" target="_blank" rel="noopener">www.neitui.me</a></td><td>互联网行业「内推」「直招」</td></tr><tr><td>LinkedIn</td><td><a href="https://www.linkedin.com" target="_blank" rel="noopener">www.linkedin.com</a></td><td>领英中国，高端管理人才可以碰一碰，不过Coder很少去</td></tr><tr><td>哪上班</td><td><a href="https://www.nashangban.com/" target="_blank" rel="noopener">www.nashangban.com</a></td><td>互联网企业招聘</td></tr><tr><td>大街网</td><td><a href="http://www.dajie.com/" target="_blank" rel="noopener">www.dajie.com</a></td><td>职业社交招聘</td></tr><tr><td>CSDN招聘</td><td><a href="http://job.csdn.net/" target="_blank" rel="noopener">job.csdn.net</a></td><td>程序员招聘</td></tr><tr><td>猎上网</td><td><a href="http://www.hunteron.com/" target="_blank" rel="noopener">www.hunteron.com</a></td><td>比猎聘名气小，可以碰碰</td></tr><tr><td>51猎头</td><td><a href="http://www.51lietou.com/" target="_blank" rel="noopener">www.51lietou.com</a></td><td>同上</td></tr><tr><td>约聘网</td><td><a href="http://www.51yuepin.com/" target="_blank" rel="noopener">www.51yuepin.com</a></td><td>互联网行业约聘模式招聘</td></tr><tr><td>乐职</td><td><a href="http://www.lezhi.com/" target="_blank" rel="noopener">www.lezhi.com</a></td><td>比较新，暂时只针对IT互联网行业技术岗位</td></tr><tr><td>Workspace</td><td><a href="http://nsworkspace.com/" target="_blank" rel="noopener">nsworkspace.com</a></td><td>暂时只在北京地区为iOS、Android、前端、后端四个职位提供招聘服务</td></tr><tr><td>实力拍</td><td><a href="http://www.shilipai.net/" target="_blank" rel="noopener">www.shilipai.net</a></td><td>竞拍，同上</td></tr><tr><td>阿里招聘</td><td><a href="http://www.alijob.com/" target="_blank" rel="noopener">www.alijob.com</a></td><td>专门为电商行业招聘人才</td></tr><tr><td>聘宝</td><td><a href="http://www.pinbot.me/" target="_blank" rel="noopener">www.pinbot.me</a></td><td>依托互联网提供专业优质的招聘服务</td></tr><tr><td>蚂蚁招聘</td><td><a href="http://www.mayizhaopin.com/" target="_blank" rel="noopener">www.mayizhaopin.com</a></td><td>一键发布到各大招聘网站</td></tr><tr><td>猿圈</td><td><a href="http://www.oxcoder.com/" target="_blank" rel="noopener">www.oxcoder.com</a></td><td>企业直接在这上面出笔试题，可完成第一轮筛选，省的让人来回跑</td></tr><tr><td>奔翼</td><td><a href="https://prinbit.com/" target="_blank" rel="noopener">prinbit.com</a></td><td>在线协同编码，帮助判断应聘者的基础知识，沟通能力，以及更重要的编码能力</td></tr><tr><td>其他</td><td>-</td><td>github，博客，微博，社区，Q群，V2EX… 有诚意必成 Good luck</td></tr></tbody></table><h3 id="面试资源"><a href="#面试资源" class="headerlink" title="面试资源"></a>面试资源</h3><ul><li><a href="https://github.com/paddingme/Front-end-Web-Development-Interview-Question" target="_blank" rel="noopener">前端面试笔试题收集</a></li><li><a href="https://github.com/fex-team/interview-questions" target="_blank" rel="noopener">FEX 面试问题</a></li><li><a href="https://github.com/ElemeFE/node-interview" target="_blank" rel="noopener">饿了么 Node.js 面试问题</a></li><li><a href="https://github.com/hawx1993/Front-end-Interview-questions" target="_blank" rel="noopener">前端面试知识点汇总</a></li><li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/Readme.md" target="_blank" rel="noopener">编程之法：面试和算法心得</a></li><li><a href="https://github.com/helloqingfeng/Awsome-Front-End-learning-resource" target="_blank" rel="noopener">前端资源汇总（包括前端学习、开发资源、求职面试等）</a></li><li><a href="https://github.com/qiu-deqing/FE-interview" target="_blank" rel="noopener">收集的前端面试题和答案</a></li><li><a href="https://hit-alibaba.github.io/interview/index.html" target="_blank" rel="noopener">笔试面试知识整理</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><a name="s9"></a>其他</h2><table><thead><tr><th>名称</th><th>URL</th><th>简介</th></tr></thead><tbody><tr><td>IT桔子</td><td><a href="http://itjuzi.com/" target="_blank" rel="noopener">itjuzi.com</a></td><td>IT互联网行业公司信息披露</td></tr><tr><td>Worktile</td><td><a href="https://worktile.com/" target="_blank" rel="noopener">worktile.com</a></td><td>创业企业协作平台</td></tr><tr><td>奇云测</td><td><a href="http://ce.cloud.360.cn/" target="_blank" rel="noopener">ce.cloud.360.cn</a></td><td>网站速度测试</td></tr><tr><td>WebPageTest</td><td><a href="http://www.webpagetest.org/" target="_blank" rel="noopener">www.webpagetest.org</a></td><td>国内访问慢些</td></tr><tr><td>百度应用性能监测中心</td><td><a href="http://developer.baidu.com/apm/" target="_blank" rel="noopener">developer.baidu.com/apm</a></td><td>百度开放服务平台的一个服务，还有很多其他的</td></tr><tr><td>jsperf</td><td><a href="http://jsperf.com/" target="_blank" rel="noopener">jsperf.com</a></td><td>JavaScript performance playground，JS性能对比测试</td></tr><tr><td>ATOOL</td><td><a href="http://www.atool.org/" target="_blank" rel="noopener">www.atool.org</a></td><td>在线工具集合</td></tr></tbody></table><h4 id="活跃微博"><a href="#活跃微博" class="headerlink" title="活跃微博"></a>活跃微博</h4><table><thead><tr><th>ID</th><th>公司</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://weibo.com/xitucircle" target="_blank" rel="noopener">@稀土圈</a></td><td>#</td><td>强烈推荐，分享一些技术文章和Github项目</td></tr><tr><td><a href="http://weibo.com/w3cchina" target="_blank" rel="noopener">@w3c中国</a></td><td>#</td><td>万维网联盟中国办事处官方微博</td></tr><tr><td><a href="http://weibo.com/javascriptdev" target="_blank" rel="noopener">@TheFrontEnd</a></td><td>#</td><td>JavaScript技术资讯、新闻、教程、深度文章。</td></tr><tr><td><a href="http://weibo.com/fekb" target="_blank" rel="noopener">@前端快爆</a></td><td>阿里巴巴</td><td>有HTML5、CSS3、JS</td></tr><tr><td><a href="http://e.weibo.com/html5cn" target="_blank" rel="noopener">@HTML5中国</a></td><td>#</td><td>中国<a href="http://www.html5cn.org官方微博" target="_blank" rel="noopener">www.html5cn.org官方微博</a></td></tr><tr><td><a href="http://e.weibo.com/githubdaily" target="_blank" rel="noopener">@GitHubDaily</a></td><td>#</td><td>专注于分享 GitHub 最新的优质开源项目:sparkles:</td></tr></tbody></table><!-- ##### 国内开发者国内开发者一块欢迎大家 `Fork`提交推荐，最好能推荐一些在前端界较活跃的的开发者。|ID |博客 |微博 |Github|Twitter| 公司 |关键字||-----|-----|------|------|-----|-----|------||小胡子哥|[barretlee](http://www.barretlee.com/)|[@Barret李靖](http://weibo.com/173248656)|[@barretlee](https://github.com/barretlee)|#|#|阿里巴巴||小鱼|[sofish](http://sofish.de/)|[@sofish](http://weibo.com/sofish)|#|#|#|饿了么前端||屈光宇|[Jerry Qu的小站](https://imququ.com/)|[屈光宇](http://weibo.com/jerryqu)|#|#|#|奇虎360前端,HTTP,Node。js||郭宇|[Einmal ist keinmal](http://blog.guoyu.me/)|[@郭宇](http://weibo.com/137601206)|[@guo-yu](https://github.com/guo-yu)|[@turingou](https://twitter.com/turingou)|今日头条 | Node.js|| hzlzh |[自力博客](https://zlz.im)|[@hzlzh](http://weibo.com/hzlzh)|[@hzlzh](http://github.com/hzlzh)|[@hzlzh](http://twitter.com/hzlzh)| 腾讯|前端开发|| TQ |http://targetkiller.net/|[@Piser-TQ](http://weibo.com/targetkiller)|[@tqtan](https://twitter.com/tqtan/)|[@targetkiller](https://github.com/targetkiller)| 腾讯 微信 | 前端|| 张鑫旭 |[张鑫旭博客](http://www.zhangxinxu.com/wordpress/)|[@张鑫旭](http://weibo.com/zhangxinxu)|[@zhangxinxu](https://github.com/zhangxinxu)|[@zhangxinxu](https://twitter.com/zhangxinxu)| 阅文(腾讯文学) YUED |前端开发||foru17|[罗磊的独立博客](http://luolei.org)|[@罗罗磊磊](http://weibo.com/foru17)|[@foru17](https://github.com/foru17)|[@foru17](https://twitter.com/foru17)|阅文(腾讯文学) YUED ||LOO2K|[LOO2K](http://loo2k.com/blog/)|[@LOO2K](http://weibo.com/loo2k)|[LOO2K](https://github.com/loo2k)|[LOO2K](https://twitter.com/loo2k/)|腾讯 CDC | 前端 ||阮一峰|[阮一峰博客](http://www.ruanyifeng.com/blog/)|[@ruanyf](http://weibo.com/ruanyf)|[@ruanyf](https://github.com/ruanyf)|[@ruanyf](https://twitter.com/ruanyf)|上海金融学院国际金融学院| 教师，博客写作人，翻译人，《黑客与画家》的译者||老赵| http://blog.zhaojie.me/|[@老赵](http://weibo.com/jeffz)|#|[#]()|摩根大通（香港）| 资深码农||玉伯|[岁月如歌](http://lifesinger.wordpress.com/)|[@玉伯也叫射雕](http://weibo.com/lifesinger)|[@lifesinger](https://github.com/lifesinger)|[@lifesinger](https://twitter.com/lifesinger)| 支付宝|大牛|| kejun |http://hikejun.com/|[@kejunz](http://weibo.com/kejunz)|[@kejunz](https://github.com/kejun)|#| 豆瓣|前端大神||寒冬winter|[winter-cn](http://winter-cn.cnblogs.com/)|[@寒冬winter](http://weibo.com/wintercn)|#|#|#|#||左耳朵耗子|[酷壳](http://coolshell.cn/)|[@左耳朵耗子](http://weibo.com/haoel)|#|[@haoel](https://twitter.com/haoel)|淘宝|#||fool2fish|#|[@fool2fish](http://weibo.com/fool2fish)|#|#|支付宝|#||朴灵|[Html5fiy](http://html5ify.com/)|[@朴灵](http://weibo.com/shyvo)|[JacksonTian](https://github.com/JacksonTian)|#|阿里巴巴|《深入浅出Node.js》作者,大牛||Cat Chen|[陈广琛](http://catchen.biz/home.zh-CN.html)|[@CatChen](http://weibo.com/u/1640352230)|[@CatChen](https://github.com/CatChen)|[@CatChen](https://twitter.com/CatChen)|Facebook |大牛||BYVod|[Beyond the Void](https://www.byvoid.com/)|[@BYVoid](http://weibo.com/byvoid)|[@byvoid](https://github.com/BYVoid)|[@BYVoid](https://twitter.com/byvoid)|Facebook 英国|《Node.js 开发指南》作者,大牛||勾三股四|#|[@勾三股四](http://weibo.com/mx006)|#|#|淘宝|#||cnberg|[冰山一角](http://cnberg.com)|[@berg](http://weibo.com/berg)|@cnberg|[@cnberg]()| 百度| 骑行||大猫| [意淫笔记](http://bigc.at)|[@daemao](http://weibo.com/daemao)|[@Damao](https://github.com/Damao)|[@13igcat](https://twitter.com/13igcat)|腾讯 |[知乎](http://www.zhihu.com/people/13igcat)|| C7210 |beforweb.com/|[@C7210](http://weibo.com/c7210)|[@C7210](http://twittercom/hzlzh)|[@C7210](http://github.com/hzlzh)|#|UX、交互设计师、视觉与前端|| kejun |http://hikejun.com/|[#](http://weibo.com/kejun)|[#](http://twittercom/kejun)|[#](http://github.com/hzlzh)| 腾讯|前端开发|| lucifr |http://lucifr.com/|[@lucifr](http://weibo.com/lucifr)|[@lucifr](http://twittercom/lucifr)|[@lucifr](http://github.com/lucifr)| #|Mac,ios|| smallni |http://www.smallni.com/|[#](http://weibo.com/hzlzh)|[@Smallni](https://twitter.com/smallniding/)|[#](http://github.com/hzlzh)| 腾讯|前端开发||qiqiboy|[qiqiboy](http://www.qiqiboy.com/)|[@qiqiboy](http://weibo.com/qiqiboy)|#|#|老虎证券 |吐槽清理大师开发者||周爱民|[aimingoo专栏](http://blog.csdn.net/aimingoo/)|#|#|#|支付宝|JavaScript语言精髓与编程实践作者||李松峰|[为之漫笔](http://www.cn-cuckoo.com)|#|#|#|#|高程2等书的译者||99css|[99css](http://www.99css.com/)|[@ytzong](http://weibo.com/ytzong)|#|#|#|腾讯一牛||秦歌|[Kaven](http://dancewithnet.com/)|#|[@kavenyan](http://twitter.com/kavenyan)|#|#|js语言精粹译者||linxz|[linxz](http://www.linxz.de/)|#|#|#|#|css那些事儿的作者||Along|[Along's Blog](http://jinlong.github.io/)|[@newwave](http://weibo.com/newwave)|#|#|#|Opera 欧朋一牛||安记|[cssha](http://www.cssha.com/)|[@hanan321](http://weibo.com/hanan321)|[hanan198501](https://github.com/hanan198501)|#|#|去哪网一牛|| 余弦 | [EVILCOS](http://evilcos.me/) | [余弦](http://weibo.com/evilcos) | [evilcos](https://github.com/evilcos) | # | [知道创宇](http://www.knownsec.com/) | 安全（黑客）、架构、团队的各种观点与分享 | # | [冯大辉](http://dbanotes.net/) | 现在就职于丁香园 (http://dxy.cn) ，担任技术团队负责人. --><p>持续更新中…..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端网站及资源导航&quot;&gt;&lt;a href=&quot;#前端网站及资源导航&quot; class=&quot;headerlink&quot; title=&quot;前端网站及资源导航&quot;&gt;&lt;/a&gt;前端网站及资源导航&lt;/h1&gt;&lt;p&gt;这里收集整理本人喜好的前端相关网站和资源等，不断更新中。有好的资源欢迎推荐（请发邮件
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端社区" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E7%A4%BE%E5%8C%BA/"/>
    
      <category term="前端网站" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%AB%99/"/>
    
      <category term="前端博客" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - event</title>
    <link href="http://www.chenya.site/2018/06/08/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/006.%E6%89%A9%E5%B1%95/002.event/"/>
    <id>http://www.chenya.site/2018/06/08/005.vue源码学习/006.扩展/002.event/</id>
    <published>2018-06-08T02:25:09.000Z</published>
    <updated>2019-09-16T01:57:01.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="event"><a href="#event" class="headerlink" title="event"></a>event</h1><p>我们平时开发工作中，处理组件间的通讯，原生的交互，都离不开事件。对于一个组件元素，我们不仅仅可以绑定原生的 DOM 事件，还可以绑定自定义事件，非常灵活和方便。那么接下来我们从源码角度来看看它的实现原理。</p><p>为了更加直观，我们通过一个例子来分析它的实现：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> Child <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;button @click="clickHandler($event)">'</span> <span class="token operator">+</span>  <span class="token string">'click me'</span> <span class="token operator">+</span>  <span class="token string">'&lt;/button>'</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">clickHandler</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Button clicked!'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'select'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;div>'</span> <span class="token operator">+</span>  <span class="token string">'&lt;child @select="selectHandler" @click.native.prevent="clickHandler">&lt;/child>'</span> <span class="token operator">+</span>  <span class="token string">'&lt;/div>'</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">clickHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Child clicked!'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">selectHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Child select!'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    Child  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>先从编译阶段开始看起，在 <code>parse</code> 阶段，会执行 <code>processAttrs</code> 方法，它的定义在 <code>src/compiler/parser/index.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> onRE <span class="token operator">=</span> <span class="token regex">/^@|^v-on:/</span><span class="token keyword">export</span> <span class="token keyword">const</span> dirRE <span class="token operator">=</span> <span class="token regex">/^v-|^@|^:/</span><span class="token keyword">export</span> <span class="token keyword">const</span> bindRE <span class="token operator">=</span> <span class="token regex">/^:|^v-bind:/</span><span class="token keyword">function</span> processAttrs <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> list <span class="token operator">=</span> el<span class="token punctuation">.</span>attrsList  <span class="token keyword">let</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rawName<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> isProp  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    name <span class="token operator">=</span> rawName <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name    value <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value    <span class="token keyword">if</span> <span class="token punctuation">(</span>dirRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         el<span class="token punctuation">.</span>hasBindings <span class="token operator">=</span> <span class="token boolean">true</span>      modifiers <span class="token operator">=</span> <span class="token function">parseModifiers</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>modifierRE<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>bindRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ..</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>onRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>onRE<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token function">addHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> modifiers<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> warn<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> parseModifiers <span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> Object <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> match <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>modifierRE<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    match<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> ret<span class="token punctuation">[</span>m<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ret  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在对标签属性的处理过程中，判断如果是指令，首先通过 <code>parseModifiers</code> 解析出修饰符，然后判断如果事件的指令，则执行 <code>addHandler(el, name, value, modifiers, false, warn)</code> 方法，它的定义在 <code>src/compiler/helpers.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> addHandler <span class="token punctuation">(</span>  el<span class="token punctuation">:</span> ASTElement<span class="token punctuation">,</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  value<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  modifiers<span class="token punctuation">:</span> <span class="token operator">?</span>ASTModifiers<span class="token punctuation">,</span>  important<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  warn<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>  modifiers <span class="token operator">=</span> modifiers <span class="token operator">||</span> emptyObject  <span class="token comment" spellcheck="true">// warn prevent and passive modifier</span>  <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> warn <span class="token operator">&amp;&amp;</span>    modifiers<span class="token punctuation">.</span>prevent <span class="token operator">&amp;&amp;</span> modifiers<span class="token punctuation">.</span>passive  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token string">'passive and prevent can\'t be used together. '</span> <span class="token operator">+</span>      <span class="token string">'Passive handler can\'t prevent default event.'</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// check capture modifier</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span>capture<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span>capture    name <span class="token operator">=</span> <span class="token string">'!'</span> <span class="token operator">+</span> name <span class="token comment" spellcheck="true">// mark the event as captured</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span>once<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span>once    name <span class="token operator">=</span> <span class="token string">'~'</span> <span class="token operator">+</span> name <span class="token comment" spellcheck="true">// mark the event as once</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span>passive<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span>passive    name <span class="token operator">=</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> name <span class="token comment" spellcheck="true">// mark the event as passive</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// normalize click.right and click.middle since they don't actually fire</span>  <span class="token comment" spellcheck="true">// this is technically browser-specific, but at least for now browsers are</span>  <span class="token comment" spellcheck="true">// the only target envs that have right/middle clicks.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">'click'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      name <span class="token operator">=</span> <span class="token string">'contextmenu'</span>      <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span>right    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span>middle<span class="token punctuation">)</span> <span class="token punctuation">{</span>      name <span class="token operator">=</span> <span class="token string">'mouseup'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> events  <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers<span class="token punctuation">.</span>native<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">delete</span> modifiers<span class="token punctuation">.</span>native    events <span class="token operator">=</span> el<span class="token punctuation">.</span>nativeEvents <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>nativeEvents <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    events <span class="token operator">=</span> el<span class="token punctuation">.</span>events <span class="token operator">||</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> newHandler<span class="token punctuation">:</span> any <span class="token operator">=</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>modifiers <span class="token operator">!==</span> emptyObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    newHandler<span class="token punctuation">.</span>modifiers <span class="token operator">=</span> modifiers  <span class="token punctuation">}</span>  <span class="token keyword">const</span> handlers <span class="token operator">=</span> events<span class="token punctuation">[</span>name<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    important <span class="token operator">?</span> handlers<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>newHandler<span class="token punctuation">)</span> <span class="token punctuation">:</span> handlers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newHandler<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>handlers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    events<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> important <span class="token operator">?</span> <span class="token punctuation">[</span>newHandler<span class="token punctuation">,</span> handlers<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>handlers<span class="token punctuation">,</span> newHandler<span class="token punctuation">]</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    events<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> newHandler  <span class="token punctuation">}</span>  el<span class="token punctuation">.</span>plain <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>addHandler</code> 函数看起来长，实际上就做了 3 件事情，首先根据 <code>modifier</code> 修饰符对事件名 <code>name</code> 做处理，接着根据 <code>modifier.native</code> 判断是一个纯原生事件还是普通事件，分别对应 <code>el.nativeEvents</code> 和 <code>el.events</code>，最后按照 <code>name</code> 对事件做归类，并把回调函数的字符串保留到对应的事件中。</p><p>在我们的例子中，父组件的 <code>child</code> 节点生成的 <code>el.events</code> 和 <code>el.nativeEvents</code> 如下：</p><pre class="line-numbers language-js"><code class="language-js">el<span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">{</span>  select<span class="token punctuation">:</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">'selectHandler'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>el<span class="token punctuation">.</span>nativeEvents <span class="token operator">=</span> <span class="token punctuation">{</span>  click<span class="token punctuation">:</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">'clickHandler'</span><span class="token punctuation">,</span>    modifiers<span class="token punctuation">:</span> <span class="token punctuation">{</span>      prevent<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件的 <code>button</code> 节点生成的 <code>el.events</code> 如下：</p><pre class="line-numbers language-js"><code class="language-js">el<span class="token punctuation">.</span>events <span class="token operator">=</span> <span class="token punctuation">{</span>  click<span class="token punctuation">:</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">'clickHandler($event)'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 <code>codegen</code> 的阶段，会在 <code>genData</code> 函数中根据 AST 元素节点上的 <code>events</code> 和 <code>nativeEvents</code> 生成 <code>data</code> 数据，它的定义在 <code>src/compiler/codegen/index.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> genData <span class="token punctuation">(</span>el<span class="token punctuation">:</span> ASTElement<span class="token punctuation">,</span> state<span class="token punctuation">:</span> CodegenState<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">'{'</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>nativeEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>nativeEvents<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">return</span> data<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于这两个属性，会调用 <code>genHandlers</code> 函数，定义在 <code>src/compiler/codegen/events.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> genHandlers <span class="token punctuation">(</span>  events<span class="token punctuation">:</span> ASTElementHandlers<span class="token punctuation">,</span>  isNative<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  warn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> isNative <span class="token operator">?</span> <span class="token string">'nativeOn:{'</span> <span class="token punctuation">:</span> <span class="token string">'on:{'</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">in</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genHandler</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> events<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">}</span><span class="token keyword">const</span> fnExpRE <span class="token operator">=</span> <span class="token regex">/^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/</span><span class="token keyword">const</span> simplePathRE <span class="token operator">=</span> <span class="token regex">/^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/</span><span class="token keyword">function</span> genHandler <span class="token punctuation">(</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  handler<span class="token punctuation">:</span> ASTElementHandler <span class="token operator">|</span> Array<span class="token operator">&lt;</span>ASTElementHandler<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'function(){}'</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>handler<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>handler <span class="token operator">=</span><span class="token operator">></span> <span class="token function">genHandler</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]`</span></span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> isMethodPath <span class="token operator">=</span> simplePathRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token keyword">const</span> isFunctionExpression <span class="token operator">=</span> fnExpRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handler<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isMethodPath <span class="token operator">||</span> isFunctionExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> handler<span class="token punctuation">.</span>value    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__WEEX__ <span class="token operator">&amp;&amp;</span> handler<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">genWeexHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>params<span class="token punctuation">,</span> handler<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`function($event){</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>handler<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}`</span></span> <span class="token comment" spellcheck="true">// inline statement</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">let</span> genModifierCode <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> handler<span class="token punctuation">.</span>modifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>modifierCode<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        genModifierCode <span class="token operator">+</span><span class="token operator">=</span> modifierCode<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">// left/right</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCodes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'exact'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> modifiers<span class="token punctuation">:</span> ASTModifiers <span class="token operator">=</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span>modifiers<span class="token punctuation">:</span> any<span class="token punctuation">)</span>        genModifierCode <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">genGuard</span><span class="token punctuation">(</span>          <span class="token punctuation">[</span><span class="token string">'ctrl'</span><span class="token punctuation">,</span> <span class="token string">'shift'</span><span class="token punctuation">,</span> <span class="token string">'alt'</span><span class="token punctuation">,</span> <span class="token string">'meta'</span><span class="token punctuation">]</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>keyModifier <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>modifiers<span class="token punctuation">[</span>keyModifier<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>keyModifier <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`$event.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>keyModifier<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">Key`</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'||'</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      code <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">genKeyFilter</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Make sure modifiers like prevent and stop get executed after key filtering</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>genModifierCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      code <span class="token operator">+</span><span class="token operator">=</span> genModifierCode    <span class="token punctuation">}</span>    <span class="token keyword">const</span> handlerCode <span class="token operator">=</span> isMethodPath      <span class="token operator">?</span> <span class="token template-string"><span class="token string">`return </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>handler<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">($event)`</span></span>      <span class="token punctuation">:</span> isFunctionExpression        <span class="token operator">?</span> <span class="token template-string"><span class="token string">`return (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>handler<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)($event)`</span></span>        <span class="token punctuation">:</span> handler<span class="token punctuation">.</span>value    <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__WEEX__ <span class="token operator">&amp;&amp;</span> handler<span class="token punctuation">.</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">genWeexHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>params<span class="token punctuation">,</span> code <span class="token operator">+</span> handlerCode<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`function($event){</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>handlerCode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>genHandlers</code> 方法遍历事件对象 <code>events</code>，对同一个事件名称的事件调用 <code>genHandler(name, events[name])</code> 方法，它的内容看起来多，但实际上逻辑很简单，首先先判断如果 <code>handler</code> 是一个数组，就遍历它然后递归调用 <code>genHandler</code> 方法并拼接结果，然后判断 <code>hanlder.value</code> 是一个函数的调用路径还是一个函数表达式， 接着对 <code>modifiers</code> 做判断，对于没有 <code>modifiers</code> 的情况，就根据 <code>handler.value</code> 不同情况处理，要么直接返回，要么返回一个函数包裹的表达式；对于有 <code>modifiers</code> 的情况，则对各种不同的 <code>modifer</code> 情况做不同处理，添加相应的代码串。</p><p>那么对于我们的例子而言，父组件生成的 <code>data</code> 串为：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  on<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"select"</span><span class="token punctuation">:</span> selectHandler<span class="token punctuation">}</span><span class="token punctuation">,</span>  nativeOn<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"click"</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      $event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">clickHandler</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件生成的 <code>data</code> 串为：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  on<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"click"</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">clickHandler</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么到这里，编译部分完了，接下来我们来看一下运行时部分是如何实现的。其实 Vue 的事件有 2 种，一种是原生 DOM 事件，一种是用户自定义事件，我们分别来看。</p><h2 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a>DOM 事件</h2><p>还记得我们之前在 <code>patch</code> 的时候执行各种 <code>module</code> 的钩子函数吗，当时这部分是略过的，我们之前只分析了 DOM 是如何渲染的，而 DOM 元素相关的属性、样式、事件等都是通过这些 <code>module</code> 的钩子函数完成设置的。</p><p>所有和 web 相关的 <code>module</code> 都定义在 <code>src/platforms/web/runtime/modules</code> 目录下，我们这次只关注目录下的 <code>events.js</code> 即可。</p><p>在 <code>patch</code> 过程中的创建阶段和更新阶段都会执行 <code>updateDOMListeners</code>：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> target<span class="token punctuation">:</span> any<span class="token keyword">function</span> updateDOMListeners <span class="token punctuation">(</span>oldVnode<span class="token punctuation">:</span> VNodeWithData<span class="token punctuation">,</span> vnode<span class="token punctuation">:</span> VNodeWithData<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>on<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>on<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> on <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>on <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> oldOn <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>on <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  target <span class="token operator">=</span> vnode<span class="token punctuation">.</span>elm  <span class="token function">normalizeEvents</span><span class="token punctuation">(</span>on<span class="token punctuation">)</span>  <span class="token function">updateListeners</span><span class="token punctuation">(</span>on<span class="token punctuation">,</span> oldOn<span class="token punctuation">,</span> add<span class="token punctuation">,</span> remove<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>context<span class="token punctuation">)</span>  target <span class="token operator">=</span> undefined<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先获取 <code>vnode.data.on</code>，这就是我们之前的生成的 <code>data</code> 中对应的事件对象，<code>target</code> 是当前 <code>vnode</code> 对于的 DOM 对象，<code>normalizeEvents</code> 主要是对 <code>v-model</code> 相关的处理，我们之后分析 <code>v-model</code> 的时候会介绍，接着调用 <code>updateListeners(on, oldOn, add, remove, vnode.context)</code> 方法，它的定义在 <code>src/core/vdom/helpers/update-listeners.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> updateListeners <span class="token punctuation">(</span>  on<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  oldOn<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  add<span class="token punctuation">:</span> Function<span class="token punctuation">,</span>  remove<span class="token punctuation">:</span> Function<span class="token punctuation">,</span>  vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> name<span class="token punctuation">,</span> def<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> old<span class="token punctuation">,</span> event  <span class="token keyword">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> on<span class="token punctuation">)</span> <span class="token punctuation">{</span>    def <span class="token operator">=</span> cur <span class="token operator">=</span> on<span class="token punctuation">[</span>name<span class="token punctuation">]</span>    old <span class="token operator">=</span> oldOn<span class="token punctuation">[</span>name<span class="token punctuation">]</span>    event <span class="token operator">=</span> <span class="token function">normalizeEvent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>__WEEX__ <span class="token operator">&amp;&amp;</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span>def<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      cur <span class="token operator">=</span> def<span class="token punctuation">.</span>handler      event<span class="token punctuation">.</span>params <span class="token operator">=</span> def<span class="token punctuation">.</span>params    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token string">`Invalid handler for event "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">": got `</span></span> <span class="token operator">+</span> <span class="token function">String</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">,</span>        vm      <span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>fns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cur <span class="token operator">=</span> on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createFnInvoker</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token function">add</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>name<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> event<span class="token punctuation">.</span>once<span class="token punctuation">,</span> event<span class="token punctuation">.</span>capture<span class="token punctuation">,</span> event<span class="token punctuation">.</span>passive<span class="token punctuation">,</span> event<span class="token punctuation">.</span>params<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> old<span class="token punctuation">)</span> <span class="token punctuation">{</span>      old<span class="token punctuation">.</span>fns <span class="token operator">=</span> cur      on<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> old    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> oldOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>on<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      event <span class="token operator">=</span> <span class="token function">normalizeEvent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>      <span class="token function">remove</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>name<span class="token punctuation">,</span> oldOn<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>capture<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>updateListeners</code> 的逻辑很简单，遍历 <code>on</code> 去添加事件监听，遍历 <code>oldOn</code> 去移除事件监听，关于监听和移除事件的方法都是外部传入的，因为它既处理原生 DOM 事件的添加删除，也处理自定义事件的添加删除。</p><p>对于 <code>on</code> 的遍历，首先获得每一个事件名，然后做 <code>normalizeEvent</code> 的处理：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> normalizeEvent <span class="token operator">=</span> <span class="token function">cached</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  once<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  capture<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  passive<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  handler<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span>  params<span class="token operator">?</span><span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span><span class="token punctuation">}</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> passive <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'&amp;'</span>  name <span class="token operator">=</span> passive <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> name  <span class="token keyword">const</span> once <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'~'</span> <span class="token comment" spellcheck="true">// Prefixed last, checked first</span>  name <span class="token operator">=</span> once <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> name  <span class="token keyword">const</span> capture <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'!'</span>  name <span class="token operator">=</span> capture <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> name  <span class="token keyword">return</span> <span class="token punctuation">{</span>    name<span class="token punctuation">,</span>    once<span class="token punctuation">,</span>    capture<span class="token punctuation">,</span>    passive  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据我们的的事件名的一些特殊标识（之前在 <code>addHandler</code> 的时候添加上的）区分出这个事件是否有 <code>once</code>、<code>capture</code>、<code>passive</code> 等修饰符。</p><p>处理完事件名后，又对事件回调函数做处理，对于第一次，满足 <code>isUndef(old)</code> 并且 <code>isUndef(cur.fns)</code>，会执行 <code>cur = on[name] = createFnInvoker(cur)</code> 方法去创建一个回调函数，然后在执行 <code>add(event.name, cur, event.once, event.capture, event.passive, event.params)</code> 完成一次事件绑定。我们先看一下 <code>createFnInvoker</code> 的实现：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> createFnInvoker <span class="token punctuation">(</span>fns<span class="token punctuation">:</span> Function <span class="token operator">|</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>  <span class="token keyword">function</span> invoker <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> invoker<span class="token punctuation">.</span>fns    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>fns<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> cloned <span class="token operator">=</span> fns<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cloned<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cloned<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> fns<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  invoker<span class="token punctuation">.</span>fns <span class="token operator">=</span> fns  <span class="token keyword">return</span> invoker<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里定义了 <code>invoker</code> 方法并返回，由于一个事件可能会对应多个回调函数，所以这里做了数组的判断，多个回调函数就依次调用。注意最后的赋值逻辑， <code>invoker.fns = fns</code>，每一次执行 <code>invoker</code> 函数都是从 <code>invoker.fns</code> 里取执行的回调函数，回到 <code>updateListeners</code>，当我们第二次执行该函数的时候，判断如果 <code>cur !== old</code>，那么只需要更改 <code>old.fns = cur</code> 把之前绑定的 <code>involer.fns</code>  赋值为新的回调函数即可，并且 通过 <code>on[name] = old</code> 保留引用关系，这样就保证了事件回调只添加一次，之后仅仅去修改它的回调函数的引用。</p><p><code>updateListeners</code> 函数的最后遍历 <code>oldOn</code> 拿到事件名称，判断如果满足 <code>isUndef(on[name])</code>，则执行 <code>remove(event.name, oldOn[name], event.capture)</code> 去移除事件回调。</p><p>了解了 <code>updateListeners</code> 的实现后，我们来看一下在原生 DOM 事件中真正添加回调和移除回调函数的实现，它们的定义都在 <code>src/platforms/web/runtime/modules/event.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> add <span class="token punctuation">(</span>  event<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  handler<span class="token punctuation">:</span> Function<span class="token punctuation">,</span>  once<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  capture<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  passive<span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>  handler <span class="token operator">=</span> <span class="token function">withMacroTask</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>once<span class="token punctuation">)</span> handler <span class="token operator">=</span> <span class="token function">createOnceHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> event<span class="token punctuation">,</span> capture<span class="token punctuation">)</span>  target<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>    event<span class="token punctuation">,</span>    handler<span class="token punctuation">,</span>    supportsPassive      <span class="token operator">?</span> <span class="token punctuation">{</span> capture<span class="token punctuation">,</span> passive <span class="token punctuation">}</span>      <span class="token punctuation">:</span> capture  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> remove <span class="token punctuation">(</span>  event<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  handler<span class="token punctuation">:</span> Function<span class="token punctuation">,</span>  capture<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  _target<span class="token operator">?</span><span class="token punctuation">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>_target <span class="token operator">||</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>    event<span class="token punctuation">,</span>    handler<span class="token punctuation">.</span>_withTask <span class="token operator">||</span> handler<span class="token punctuation">,</span>    capture  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>add</code> 和 <code>remove</code> 的逻辑很简单，就是实际上调用原生 <code>addEventListener</code> 和 <code>removeEventListener</code>，并根据参数传递一些配置，注意这里的 <code>hanlder</code> 会用 <code>withMacroTask(hanlder)</code> 包裹一下，它的定义在 <code>src/core/util/next-tick.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> withMacroTask <span class="token punctuation">(</span>fn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>  <span class="token keyword">return</span> fn<span class="token punctuation">.</span>_withTask <span class="token operator">||</span> <span class="token punctuation">(</span>fn<span class="token punctuation">.</span>_withTask <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    useMacroTask <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    useMacroTask <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">return</span> res  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上就是强制在 DOM 事件的回调函数执行期间如果修改了数据，那么这些数据更改推入的队列会被当做 <code>macroTask</code> 在 <code>nextTick</code> 后执行。</p><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>除了原生 DOM 事件，Vue 还支持了自定义事件，并且自定义事件只能作用在组件上，如果在组件上使用原生事件，需要加 <code>.native</code> 修饰符，普通元素上使用 <code>.native</code> 修饰符无效，接下来我们就来分析它的实现。</p><p>在 <code>render</code> 阶段，如果是一个组件节点，则通过 <code>createComponent</code> 创建一个组件 <code>vnode</code>，我们再来回顾这个方法，定义在 <code>src/core/vdom/create-component.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> createComponent <span class="token punctuation">(</span>  Ctor<span class="token punctuation">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">></span> <span class="token operator">|</span> Function <span class="token operator">|</span> Object <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token operator">?</span>VNodeData<span class="token punctuation">,</span>  context<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>  children<span class="token punctuation">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">></span><span class="token punctuation">,</span>  tag<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> VNode <span class="token operator">|</span> Array<span class="token operator">&lt;</span>VNode<span class="token operator">></span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">const</span> listeners <span class="token operator">=</span> data<span class="token punctuation">.</span>on  data<span class="token punctuation">.</span>on <span class="token operator">=</span> data<span class="token punctuation">.</span>nativeOn  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">const</span> name <span class="token operator">=</span> Ctor<span class="token punctuation">.</span>options<span class="token punctuation">.</span>name <span class="token operator">||</span> tag  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>    <span class="token template-string"><span class="token string">`vue-component-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Ctor<span class="token punctuation">.</span>cid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">${name ? `</span></span><span class="token operator">-</span>$<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token template-string"><span class="token string">` : ''}`</span></span><span class="token punctuation">,</span>    data<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> context<span class="token punctuation">,</span>    <span class="token punctuation">{</span> Ctor<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> children <span class="token punctuation">}</span><span class="token punctuation">,</span>    asyncFactory  <span class="token punctuation">)</span>  <span class="token keyword">return</span> vnode<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们只关注事件相关的逻辑，可以看到，它把 <code>data.on</code> 赋值给了 <code>listeners</code>，把 <code>data.nativeOn</code> 赋值给了 <code>data.on</code>，这样所有的原生 DOM 事件处理跟我们刚才介绍的一样，它是在当前组件环境中处理的。而对于自定义事件，我们把 <code>listeners</code> 作为 <code>vnode</code> 的 <code>componentOptions</code> 传入，它是在子组件初始化阶段中处理的，所以它的处理环境是子组件。</p><p>然后在子组件的初始化的时候，会执行 <code>initInternalComponent</code> 方法，它的定义在 <code>src/core/instance/init.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> initInternalComponent <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> options<span class="token punctuation">:</span> InternalComponentOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> opts <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>options<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ....</span>  <span class="token keyword">const</span> vnodeComponentOptions <span class="token operator">=</span> parentVnode<span class="token punctuation">.</span>componentOptions  opts<span class="token punctuation">.</span>_parentListeners <span class="token operator">=</span> vnodeComponentOptions<span class="token punctuation">.</span>listeners  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里拿到了父组件传入的 <code>listeners</code>，然后在执行 <code>initEvents</code> 的过程中，会处理这个 <code>listeners</code>，定义在 <code>src/core/instance/events.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> initEvents <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span>_events <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  vm<span class="token punctuation">.</span>_hasHookEvent <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment" spellcheck="true">// init parent attached events</span>  <span class="token keyword">const</span> listeners <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_parentListeners  <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">updateComponentListeners</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿到 <code>listeners</code> 后，执行 <code>updateComponentListeners(vm, listeners)</code> 方法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> target<span class="token punctuation">:</span> any<span class="token keyword">export</span> <span class="token keyword">function</span> updateComponentListeners <span class="token punctuation">(</span>  vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>  listeners<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  oldListeners<span class="token punctuation">:</span> <span class="token operator">?</span>Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  target <span class="token operator">=</span> vm  <span class="token function">updateListeners</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> oldListeners <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> add<span class="token punctuation">,</span> remove<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>  target <span class="token operator">=</span> undefined<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>updateListeners</code> 我们之前介绍过，所以对于自定义事件和原生 DOM 事件处理的差异就在事件添加和删除的实现上，来看一下自定义事件 <code>add</code> 和 <code>remove</code> 的实现：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> add <span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> once<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>once<span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">.</span><span class="token function">$once</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    target<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> remove <span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  target<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上是利用 Vue 定义的事件中心，简单分析一下它的实现：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> eventsMixin <span class="token punctuation">(</span>Vue<span class="token punctuation">:</span> Class<span class="token operator">&lt;</span>Component<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> hookRE <span class="token operator">=</span> <span class="token regex">/^hook:/</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$on <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span> string <span class="token operator">|</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span> fn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// optimize hook:event cost by using a boolean flag marked at registration</span>      <span class="token comment" spellcheck="true">// instead of a hash lookup</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>hookRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span>_hasHookEvent <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$once <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span> string<span class="token punctuation">,</span> fn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">function</span> on <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> on<span class="token punctuation">)</span>      fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    on<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn    vm<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> on<span class="token punctuation">)</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$off <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span> fn<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment" spellcheck="true">// all</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_events <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// array of events</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> event<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// specific event</span>    <span class="token keyword">const</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">return</span> vm    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// specific handler</span>      <span class="token keyword">let</span> cb      <span class="token keyword">let</span> i <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cb <span class="token operator">=</span> cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">===</span> fn <span class="token operator">||</span> cb<span class="token punctuation">.</span>fn <span class="token operator">===</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>          cbs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$emit <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> lowerCaseEvent <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lowerCaseEvent <span class="token operator">!==</span> event <span class="token operator">&amp;&amp;</span> vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>lowerCaseEvent<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">tip</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Event "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lowerCaseEvent<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" is emitted in component `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">formatComponentName</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> but the handler is registered for "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">". `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`Note that HTML attributes are case-insensitive and you cannot use `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`v-on to listen to camelCase events when using in-DOM templates. `</span></span> <span class="token operator">+</span>          <span class="token template-string"><span class="token string">`You should probably use "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">hyphenate</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" instead of "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">".`</span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> cbs <span class="token operator">=</span> vm<span class="token punctuation">.</span>_events<span class="token punctuation">[</span>event<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cbs <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token function">toArray</span><span class="token punctuation">(</span>cbs<span class="token punctuation">)</span> <span class="token punctuation">:</span> cbs      <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">toArray</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> cbs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          cbs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> args<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`event handler for "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>event<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vm  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非常经典的事件中心的实现，把所有的事件用 <code>vm._events</code> 存储起来，当执行 <code>vm.$on(event,fn)</code> 的时候，按事件的名称 <code>event</code> 把回调函数 <code>fn</code> 存储起来 <code>vm._events[event].push(fn)</code>。当执行 <code>vm.$emit(event)</code> 的时候，根据事件名 <code>event</code> 找到所有的回调函数 <code>let cbs = vm._events[event]</code>，然后遍历执行所有的回调函数。当执行 <code>vm.$off(event,fn)</code> 的时候会移除指定事件名 <code>event</code> 和指定的 <code>fn</code> 当执行 <code>vm.$once(event,fn)</code> 的时候，内部就是执行 <code>vm.$on</code>，并且当回调函数执行一次后再通过 <code>vm.$off</code> 移除事件的回调，这样就确保了回调函数只执行一次。</p><p>所以对于用户自定义的事件添加和删除就是利用了这几个事件中心的 API。需要注意的事一点，<code>vm.$emit</code> 是给当前的 <code>vm</code> 上派发的实例，之所以我们常用它做父子组件通讯，是因为它的回调函数的定义是在父组件中，对于我们这个例子而言，当子组件的 <code>button</code> 被点击了，它通过 <code>this.$emit(&#39;select&#39;)</code> 派发事件，那么子组件的实例就监听到了这个 <code>select</code> 事件，并执行它的回调函数——定义在父组件中的 <code>selectHandler</code> 方法，这样就相当于完成了一次父子组件的通讯。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么至此我们对 Vue 的事件实现有了进一步的了解，Vue 支持 2 种事件类型，原生 DOM 事件和自定义事件，它们主要的区别在于添加和删除事件的方式不一样，并且自定义事件的派发是往当前实例上派发，但是可以利用在父组件环境定义回调函数来实现父子组件的通讯。另外要注意一点，只有组件节点才可以添加自定义事件，并且添加原生 DOM 事件需要使用 <code>native</code> 修饰符；而普通元素使用 <code>.native</code> 修饰符是没有作用的，也只能添加原生 DOM 事件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;event&quot;&gt;&lt;a href=&quot;#event&quot; class=&quot;headerlink&quot; title=&quot;event&quot;&gt;&lt;/a&gt;event&lt;/h1&gt;&lt;p&gt;我们平时开发工作中，处理组件间的通讯，原生的交互，都离不开事件。对于一个组件元素，我们不仅仅可以绑定原生的 DOM 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - 扩展介绍</title>
    <link href="http://www.chenya.site/2018/06/05/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/006.%E6%89%A9%E5%B1%95/001.%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.chenya.site/2018/06/05/005.vue源码学习/006.扩展/001.介绍/</id>
    <published>2018-06-05T01:01:52.000Z</published>
    <updated>2019-09-16T01:57:01.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>前面几章我们分析了 Vue 的核心以及编译过程，除此之外，Vue 还提供了很多好用的 feature 如 <code>event</code>、<code>v-model</code>、<code>slot</code>、<code>keep-alive</code>、<code>transition</code> 等等。对他们的理解有助于我们在平时开发中更好地应用这些 feature，即使出现 bug 我们也可以很从容地应对。</p><p>这一章是一个可扩展的章节，除了已分析的这些 feature 外，未来我们可能会扩展更多的内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;扩展&quot;&gt;&lt;a href=&quot;#扩展&quot; class=&quot;headerlink&quot; title=&quot;扩展&quot;&gt;&lt;/a&gt;扩展&lt;/h1&gt;&lt;p&gt;前面几章我们分析了 Vue 的核心以及编译过程，除此之外，Vue 还提供了很多好用的 feature 如 &lt;code&gt;event&lt;/code
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - codegen</title>
    <link href="http://www.chenya.site/2018/05/26/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/005.%E7%BC%96%E8%AF%91/005.codegen/"/>
    <id>http://www.chenya.site/2018/05/26/005.vue源码学习/005.编译/005.codegen/</id>
    <published>2018-05-26T12:24:09.000Z</published>
    <updated>2019-09-16T01:57:01.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codegen"><a href="#codegen" class="headerlink" title="codegen"></a>codegen</h1><p>编译的最后一步就是把优化后的 AST 树转换成可执行的代码，这部分内容也比较多，我并不打算把所有的细节都讲了，了解整体流程即可。部分细节我们会在之后的章节配合一个具体 case 去详细讲。</p><p>为了方便理解，我们还是用之前的例子：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bindCls<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in data<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickItem(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}:{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它经过编译，执行 <code>const code = generate(ast, options)</code>，生成的 <code>render</code> 代码串如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token operator">?</span>    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        staticClass<span class="token punctuation">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>        <span class="token keyword">class</span><span class="token punctuation">:</span> bindCls      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">_l</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          on<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"click"</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">clickItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">_s</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">_e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的 <code>_c</code> 函数定义在 <code>src/core/instance/render.js</code> 中。</p><pre class="line-numbers language-js"><code class="language-js">vm<span class="token punctuation">.</span>_c <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">createElement</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而 <code>_l</code>、<code>_v</code> 定义在 <code>src/core/instance/render-helpers/index.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> installRenderHelpers <span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>  target<span class="token punctuation">.</span>_o <span class="token operator">=</span> markOnce  target<span class="token punctuation">.</span>_n <span class="token operator">=</span> toNumber  target<span class="token punctuation">.</span>_s <span class="token operator">=</span> toString  target<span class="token punctuation">.</span>_l <span class="token operator">=</span> renderList  target<span class="token punctuation">.</span>_t <span class="token operator">=</span> renderSlot  target<span class="token punctuation">.</span>_q <span class="token operator">=</span> looseEqual  target<span class="token punctuation">.</span>_i <span class="token operator">=</span> looseIndexOf  target<span class="token punctuation">.</span>_m <span class="token operator">=</span> renderStatic  target<span class="token punctuation">.</span>_f <span class="token operator">=</span> resolveFilter  target<span class="token punctuation">.</span>_k <span class="token operator">=</span> checkKeyCodes  target<span class="token punctuation">.</span>_b <span class="token operator">=</span> bindObjectProps  target<span class="token punctuation">.</span>_v <span class="token operator">=</span> createTextVNode  target<span class="token punctuation">.</span>_e <span class="token operator">=</span> createEmptyVNode  target<span class="token punctuation">.</span>_u <span class="token operator">=</span> resolveScopedSlots  target<span class="token punctuation">.</span>_g <span class="token operator">=</span> bindObjectListeners<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顾名思义，<code>_c</code> 就是执行 <code>createElement</code> 去创建 VNode，而 <code>_l</code> 对应 <code>renderList</code> 渲染列表；<code>_v</code> 对应 <code>createTextVNode</code> 创建文本 VNode；<code>_e</code> 对于 <code>createEmptyVNode</code>创建空的 VNode。 </p><p>在 <code>compileToFunctions</code> 中，会把这个 <code>render</code> 代码串转换成函数，它的定义在 <code>src/compler/to-function.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> compiled <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span>res<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token function">createFunction</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>render<span class="token punctuation">,</span> fnGenErrors<span class="token punctuation">)</span><span class="token keyword">function</span> createFunction <span class="token punctuation">(</span>code<span class="token punctuation">,</span> errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    errors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> err<span class="token punctuation">,</span> code <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> noop  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上就是把 <code>render</code> 代码串通过 <code>new Function</code> 的方式转换成可执行的函数，赋值给 <code>vm.options.render</code>，这样当组件通过 <code>vm._render</code> 的时候，就会执行这个 <code>render</code> 函数。那么接下来我们就重点关注一下这个 <code>render</code> 代码串的生成过程。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>generate</code> 函数的定义在 <code>src/compiler/codegen/index.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> generate <span class="token punctuation">(</span>  ast<span class="token punctuation">:</span> ASTElement <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">,</span>  options<span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">)</span><span class="token punctuation">:</span> CodegenResult <span class="token punctuation">{</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CodegenState</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>  <span class="token keyword">const</span> code <span class="token operator">=</span> ast <span class="token operator">?</span> <span class="token function">genElement</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">'_c("div")'</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    render<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`with(this){return </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">}`</span></span><span class="token punctuation">,</span>    staticRenderFns<span class="token punctuation">:</span> state<span class="token punctuation">.</span>staticRenderFns  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>generate</code> 函数首先通过 <code>genElement(ast, state)</code> 生成 <code>code</code>，再把 <code>code</code> 用 <code>with(this){return ${code}}}</code> 包裹起来。这里的 <code>state</code> 是 <code>CodegenState</code> 的一个实例，稍后我们在用到它的时候会介绍它。先来看一下 <code>genElement</code>：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> genElement <span class="token punctuation">(</span>el<span class="token punctuation">:</span> ASTElement<span class="token punctuation">,</span> state<span class="token punctuation">:</span> CodegenState<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>staticRoot <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>staticProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genStatic</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>once <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>onceProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genOnce</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token keyword">for</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>forProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genFor</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>ifProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genIf</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">'template'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>slotTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'void 0'</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">'slot'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genSlot</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// component or element</span>    <span class="token keyword">let</span> code    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>      code <span class="token operator">=</span> <span class="token function">genComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">,</span> el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> el<span class="token punctuation">.</span>plain <span class="token operator">?</span> undefined <span class="token punctuation">:</span> <span class="token function">genData</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>      <span class="token keyword">const</span> children <span class="token operator">=</span> el<span class="token punctuation">.</span>inlineTemplate <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      code <span class="token operator">=</span> <span class="token template-string"><span class="token string">`_c('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'${        data ? `</span></span><span class="token punctuation">,</span>$<span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token template-string"><span class="token string">` : '' // data      }${        children ? `</span></span><span class="token punctuation">,</span>$<span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token template-string"><span class="token string">` : '' // children      })`</span></span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// module transforms</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      code <span class="token operator">=</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> code<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> code  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本就是判断当前 AST 元素节点的属性执行不同的代码生成函数，在我们的例子中，我们先了解一下 <code>genFor</code> 和 <code>genIf</code>。</p><h2 id="genIf"><a href="#genIf" class="headerlink" title="genIf"></a><code>genIf</code></h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> genIf <span class="token punctuation">(</span>  el<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  state<span class="token punctuation">:</span> CodegenState<span class="token punctuation">,</span>  altGen<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span>  altEmpty<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  el<span class="token punctuation">.</span>ifProcessed <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// avoid recursion</span>  <span class="token keyword">return</span> <span class="token function">genIfConditions</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> state<span class="token punctuation">,</span> altGen<span class="token punctuation">,</span> altEmpty<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> genIfConditions <span class="token punctuation">(</span>  conditions<span class="token punctuation">:</span> ASTIfConditions<span class="token punctuation">,</span>  state<span class="token punctuation">:</span> CodegenState<span class="token punctuation">,</span>  altGen<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span>  altEmpty<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conditions<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> altEmpty <span class="token operator">||</span> <span class="token string">'_e()'</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> condition <span class="token operator">=</span> conditions<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>condition<span class="token punctuation">.</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>      <span class="token function">genTernaryExp</span><span class="token punctuation">(</span>condition<span class="token punctuation">.</span>block<span class="token punctuation">)</span>    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>      <span class="token function">genIfConditions</span><span class="token punctuation">(</span>conditions<span class="token punctuation">,</span> state<span class="token punctuation">,</span> altGen<span class="token punctuation">,</span> altEmpty<span class="token punctuation">)</span>    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genTernaryExp</span><span class="token punctuation">(</span>condition<span class="token punctuation">.</span>block<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// v-if with v-once should generate code like (a)?_m(0):_m(1)</span>  <span class="token keyword">function</span> genTernaryExp <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> altGen      <span class="token operator">?</span> <span class="token function">altGen</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>      <span class="token punctuation">:</span> el<span class="token punctuation">.</span>once        <span class="token operator">?</span> <span class="token function">genOnce</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>        <span class="token punctuation">:</span> <span class="token function">genElement</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>genIf</code> 主要是通过执行 <code>genIfConditions</code>，它是依次从 <code>conditions</code> 获取第一个 <code>condition</code>，然后通过对 <code>condition.exp</code> 去生成一段三元运算符的代码，<code>:</code> 后是递归调用 <code>genIfConditions</code>，这样如果有多个 <code>conditions</code>，就生成多层三元运算逻辑。这里我们暂时不考虑 <code>v-once</code> 的情况，所以<br><code>genTernaryExp</code> 最终是调用了 <code>genElement</code>。</p><p>在我们的例子中，只有一个 <code>condition</code>，<code>exp</code> 为 <code>isShow</code>，因此生成如下伪代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">return</span> <span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">genElement</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">_e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="genFor"><a href="#genFor" class="headerlink" title="genFor"></a><code>genFor</code></h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> genFor <span class="token punctuation">(</span>  el<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  state<span class="token punctuation">:</span> CodegenState<span class="token punctuation">,</span>  altGen<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span>  altHelper<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">const</span> exp <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token keyword">for</span>  <span class="token keyword">const</span> alias <span class="token operator">=</span> el<span class="token punctuation">.</span>alias  <span class="token keyword">const</span> iterator1 <span class="token operator">=</span> el<span class="token punctuation">.</span>iterator1 <span class="token operator">?</span> <span class="token template-string"><span class="token string">`,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>iterator1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token keyword">const</span> iterator2 <span class="token operator">=</span> el<span class="token punctuation">.</span>iterator2 <span class="token operator">?</span> <span class="token template-string"><span class="token string">`,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>iterator2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    state<span class="token punctuation">.</span><span class="token function">maybeComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    el<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">'slot'</span> <span class="token operator">&amp;&amp;</span>    el<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">'template'</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span>el<span class="token punctuation">.</span>key  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token string">`&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> v-for="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>alias<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">">: component lists rendered with `</span></span> <span class="token operator">+</span>      <span class="token template-string"><span class="token string">`v-for should have explicit keys. `</span></span> <span class="token operator">+</span>      <span class="token template-string"><span class="token string">`See https://vuejs.org/guide/list.html#key for more info.`</span></span><span class="token punctuation">,</span>      <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* tip */</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  el<span class="token punctuation">.</span>forProcessed <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// avoid recursion</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>altHelper <span class="token operator">||</span> <span class="token string">'_l'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">((</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">),`</span></span> <span class="token operator">+</span>    <span class="token template-string"><span class="token string">`function(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>alias<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>iterator1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>iterator2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">){`</span></span> <span class="token operator">+</span>      <span class="token template-string"><span class="token string">`return </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>altGen <span class="token operator">||</span> genElement<span class="token punctuation">)</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token operator">+</span>    <span class="token string">'})'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>genFor</code> 的逻辑很简单，首先 AST 元素节点中获取了和 <code>for</code> 相关的一些属性，然后返回了一个代码字符串。</p><p>在我们的例子中，<code>exp</code> 是 <code>data</code>，<code>alias</code> 是 <code>item</code>，<code>iterator1</code> ，因此生成如下伪代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">_l</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">genElememt</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="genData-amp-genChildren"><a href="#genData-amp-genChildren" class="headerlink" title="genData &amp; genChildren"></a><code>genData</code> &amp; <code>genChildren</code></h2><p>再次回顾我们的例子，它的最外层是 <code>ul</code>，首先执行 <code>genIf</code>，它最终调用了 <code>genElement(el, state)</code> 去生成子节点，注意，这里的 <code>el</code> 仍然指向的是 <code>ul</code> 对应的 AST 节点，但是此时的 <code>el.ifProcessed</code> 为 true，所以命中最后一个 else 逻辑：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// component or element</span><span class="token keyword">let</span> code<span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  code <span class="token operator">=</span> <span class="token function">genComponent</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">,</span> el<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> el<span class="token punctuation">.</span>plain <span class="token operator">?</span> undefined <span class="token punctuation">:</span> <span class="token function">genData</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token keyword">const</span> children <span class="token operator">=</span> el<span class="token punctuation">.</span>inlineTemplate <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> <span class="token function">genChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  code <span class="token operator">=</span> <span class="token template-string"><span class="token string">`_c('</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">'${    data ? `</span></span><span class="token punctuation">,</span>$<span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token template-string"><span class="token string">` : '' // data  }${    children ? `</span></span><span class="token punctuation">,</span>$<span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token template-string"><span class="token string">` : '' // children  })`</span></span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// module transforms</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  code <span class="token operator">=</span> state<span class="token punctuation">.</span>transforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们只关注 2 个逻辑，<code>genData</code> 和 <code>genChildren</code>：</p><ul><li>genData</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> genData <span class="token punctuation">(</span>el<span class="token punctuation">:</span> ASTElement<span class="token punctuation">,</span> state<span class="token punctuation">:</span> CodegenState<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">'{'</span>  <span class="token comment" spellcheck="true">// directives first.</span>  <span class="token comment" spellcheck="true">// directives may mutate the el's other properties before they are generated.</span>  <span class="token keyword">const</span> dirs <span class="token operator">=</span> <span class="token function">genDirectives</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirs<span class="token punctuation">)</span> data <span class="token operator">+</span><span class="token operator">=</span> dirs <span class="token operator">+</span> <span class="token string">','</span>  <span class="token comment" spellcheck="true">// key</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`key:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ref</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`ref:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>ref<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>refInFor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`refInFor:true,`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// pre</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`pre:true,`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// record original tag name for components using "is" attribute</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>component<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`tag:"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">",`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// module data generation functions</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>dataGenFns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> state<span class="token punctuation">.</span>dataGenFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// attributes</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`attrs:{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genProps</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">},`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// DOM props</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`domProps:{</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genProps</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">},`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// event handlers</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>nativeEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>nativeEvents<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// slot target</span>  <span class="token comment" spellcheck="true">// only for non-scoped slots</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>slotTarget <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>el<span class="token punctuation">.</span>slotScope<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`slot:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>slotTarget<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// scoped slots</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>scopedSlots<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genScopedSlots</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>scopedSlots<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// component v-model</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`model:{value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>      el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>value    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,callback:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>      el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>callback    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,expression:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>      el<span class="token punctuation">.</span>model<span class="token punctuation">.</span>expression    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">},`</span></span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// inline-template</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>inlineTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> inlineTemplate <span class="token operator">=</span> <span class="token function">genInlineTemplate</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inlineTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>      data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>inlineTemplate<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  data <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/,$/</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'}'</span>  <span class="token comment" spellcheck="true">// v-bind data wrap</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>wrapData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">wrapData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// v-on data wrap</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>wrapListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">wrapListeners</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> data<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>genData</code> 函数就是根据 AST 元素节点的属性构造出一个 <code>data</code> 对象字符串，这个在后面创建 VNode 的时候的时候会作为参数传入。</p><p>之前我们提到了 <code>CodegenState</code> 的实例 <code>state</code>，这里有一段关于 <code>state</code> 的逻辑：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>dataGenFns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  data <span class="token operator">+</span><span class="token operator">=</span> state<span class="token punctuation">.</span>dataGenFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>state.dataGenFns</code> 的初始化在它的构造器中。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CodegenState</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>options<span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataGenFns <span class="token operator">=</span> <span class="token function">pluckModuleFunction</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token string">'genData'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上就是获取所有 <code>modules</code> 中的 <code>genData</code> 函数，其中，<code>class module</code> 和 <code>style module</code> 定义了 <code>genData</code> 函数。比如定义在 <code>src/platforms/web/compiler/modules/class.js</code> 中的 <code>genData</code> 方法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> genData <span class="token punctuation">(</span>el<span class="token punctuation">:</span> ASTElement<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>staticClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`staticClass:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>staticClass<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>classBinding<span class="token punctuation">)</span> <span class="token punctuation">{</span>    data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`class:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>classBinding<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> data<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们的例子中，<code>ul</code> AST 元素节点定义了 <code>el.staticClass</code> 和 <code>el.classBinding</code>，因此最终生成的 <code>data</code> 字符串如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  staticClass<span class="token punctuation">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>  <span class="token keyword">class</span><span class="token punctuation">:</span> bindCls<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>genChildren</li></ul><p>接下来我们再来看一下 <code>genChildren</code>，它的定义在 <code>src/compiler/codegen/index.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> genChildren <span class="token punctuation">(</span>  el<span class="token punctuation">:</span> ASTElement<span class="token punctuation">,</span>  state<span class="token punctuation">:</span> CodegenState<span class="token punctuation">,</span>  checkSkip<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  altGenElement<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span>  altGenNode<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> children <span class="token operator">=</span> el<span class="token punctuation">.</span>children  <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> el<span class="token punctuation">:</span> any <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>      el<span class="token punctuation">.</span><span class="token keyword">for</span> <span class="token operator">&amp;&amp;</span>      el<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">'template'</span> <span class="token operator">&amp;&amp;</span>      el<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">'slot'</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>altGenElement <span class="token operator">||</span> genElement<span class="token punctuation">)</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> normalizationType <span class="token operator">=</span> checkSkip      <span class="token operator">?</span> <span class="token function">getNormalizationType</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> state<span class="token punctuation">.</span>maybeComponent<span class="token punctuation">)</span>      <span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token keyword">const</span> gen <span class="token operator">=</span> altGenNode <span class="token operator">||</span> genNode    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token function">gen</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]${      normalizationType ? `</span></span><span class="token punctuation">,</span>$<span class="token punctuation">{</span>normalizationType<span class="token punctuation">}</span><span class="token template-string"><span class="token string">` : ''    }`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们的例子中，<code>li</code> AST 元素节点是 <code>ul</code> AST 元素节点的 <code>children</code> 之一，满足 <code>(children.length === 1 &amp;&amp; el.for &amp;&amp; el.tag !== &#39;template&#39; &amp;&amp; el.tag !== &#39;slot&#39;)</code> 条件，因此通过 <code>genElement(el, state)</code> 生成 <code>li</code> AST元素节点的代码，也就回到了我们之前调用 <code>genFor</code> 生成的代码，把它们拼在一起生成的伪代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">return</span> <span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token operator">?</span>    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        staticClass<span class="token punctuation">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>        <span class="token keyword">class</span><span class="token punctuation">:</span> bindCls      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">_l</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">genElememt</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> state<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">_e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们的例子中，在执行 <code>genElememt(el, state)</code> 的时候，<code>el</code> 还是 <code>li</code> AST 元素节点，<code>el.forProcessed</code> 已为 true，所以会继续执行 <code>genData</code> 和 <code>genChildren</code> 的逻辑。由于 <code>el.events</code> 不为空，在执行 <code>genData</code> 的时候，会执行 如下逻辑：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">)</span> <span class="token punctuation">{</span>  data <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genHandlers</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>events<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>genHandlers</code> 的定义在 <code>src/compiler/codegen/events.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> genHandlers <span class="token punctuation">(</span>  events<span class="token punctuation">:</span> ASTElementHandlers<span class="token punctuation">,</span>  isNative<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  warn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> isNative <span class="token operator">?</span> <span class="token string">'nativeOn:{'</span> <span class="token punctuation">:</span> <span class="token string">'on:{'</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> name <span class="token keyword">in</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">":</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">genHandler</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> events<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,`</span></span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>genHandler</code> 的逻辑就不介绍了，很大部分都是对修饰符 <code>modifier</code> 的处理，感兴趣同学可以自己看，对于我们的例子，它最终 <code>genData</code> 生成的 <code>data</code> 字符串如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  on<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"click"</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">clickItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>genChildren</code> 的时候，会执行到如下逻辑：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> genChildren <span class="token punctuation">(</span>  el<span class="token punctuation">:</span> ASTElement<span class="token punctuation">,</span>  state<span class="token punctuation">:</span> CodegenState<span class="token punctuation">,</span>  checkSkip<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  altGenElement<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span>  altGenNode<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">const</span> normalizationType <span class="token operator">=</span> checkSkip    <span class="token operator">?</span> <span class="token function">getNormalizationType</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> state<span class="token punctuation">.</span>maybeComponent<span class="token punctuation">)</span>    <span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token keyword">const</span> gen <span class="token operator">=</span> altGenNode <span class="token operator">||</span> genNode  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> <span class="token function">gen</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]${    normalizationType ? `</span></span><span class="token punctuation">,</span>$<span class="token punctuation">{</span>normalizationType<span class="token punctuation">}</span><span class="token template-string"><span class="token string">` : ''  }`</span></span><span class="token punctuation">}</span><span class="token keyword">function</span> genNode <span class="token punctuation">(</span>node<span class="token punctuation">:</span> ASTNode<span class="token punctuation">,</span> state<span class="token punctuation">:</span> CodegenState<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genElement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> state<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>isComment<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genComment</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">genText</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>genChildren</code> 的就是遍历 <code>children</code>，然后执行 <code>genNode</code> 方法，根据不同的 <code>type</code> 执行具体的方法。在我们的例子中，<code>li</code> AST 元素节点的 <code>children</code> 是 type 为 2 的表达式 AST 元素节点，那么会执行到 <code>genText(node)</code> 逻辑。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> genText <span class="token punctuation">(</span>text<span class="token punctuation">:</span> ASTText <span class="token operator">|</span> ASTExpression<span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`_v(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>text<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">2</span>    <span class="token operator">?</span> text<span class="token punctuation">.</span>expression    <span class="token punctuation">:</span> <span class="token function">transformSpecialNewlines</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此在我们的例子中，<code>genChildren</code> 生成的代码串如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">_s</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>和之前拼在一起，最终生成的 <code>code</code> 如下：</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">return</span> <span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token operator">?</span>    <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        staticClass<span class="token punctuation">:</span> <span class="token string">"list"</span><span class="token punctuation">,</span>        <span class="token keyword">class</span><span class="token punctuation">:</span> bindCls      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">_l</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          on<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"click"</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$event<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">clickItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token function">_v</span><span class="token punctuation">(</span><span class="token function">_s</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token function">_s</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">_e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一节通过例子配合解析，我们对从 <code>ast -&gt; code</code> 这一步有了一些了解，编译后生成的代码就是在运行时执行的代码。由于 <code>genCode</code> 的内容有很多，所以我对大家的建议是没必要把所有的细节都一次性看完，我们应该根据具体一个 case，走完一条主线即可。</p><p>在之后的章节我们会对 <code>slot</code> 的实现做解析，我们会重新复习编译的章节，针对具体问题做具体分析，有利于我们排除干扰，对编译过程的学习有更深入的理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;codegen&quot;&gt;&lt;a href=&quot;#codegen&quot; class=&quot;headerlink&quot; title=&quot;codegen&quot;&gt;&lt;/a&gt;codegen&lt;/h1&gt;&lt;p&gt;编译的最后一步就是把优化后的 AST 树转换成可执行的代码，这部分内容也比较多，我并不打算把所有的细
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - optimize</title>
    <link href="http://www.chenya.site/2018/05/24/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/005.%E7%BC%96%E8%AF%91/004.optimize/"/>
    <id>http://www.chenya.site/2018/05/24/005.vue源码学习/005.编译/004.optimize/</id>
    <published>2018-05-24T15:21:15.000Z</published>
    <updated>2019-09-16T01:57:01.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="optimize"><a href="#optimize" class="headerlink" title="optimize"></a>optimize</h1><p>当我们的模板 <code>template</code> 经过 <code>parse</code> 过程后，会输出生成 AST 树，那么接下来我们需要对这颗树做优化，<code>optimize</code> 的逻辑是远简单于 <code>parse</code> 的逻辑，所以理解起来会轻松很多。</p><p>为什么要有优化过程，因为我们知道 Vue 是数据驱动，是响应式的，但是我们的模板并不是所有数据都是响应式的，也有很多数据是首次渲染后就永远不会变化的，那么这部分数据生成的 DOM 也不会变化，我们可以在 <code>patch</code> 的过程跳过对他们的比对。</p><p>来看一下 <code>optimize</code> 方法的定义，在 <code>src/compiler/optimizer.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Goal of the optimizer: walk the generated template AST tree * and detect sub-trees that are purely static, i.e. parts of * the DOM that never needs to change. * * Once we detect these sub-trees, we can: * * 1. Hoist them into constants, so that we no longer need to *    create fresh nodes for them on each re-render; * 2. Completely skip them in the patching process. */</span><span class="token keyword">export</span> <span class="token keyword">function</span> optimize <span class="token punctuation">(</span>root<span class="token punctuation">:</span> <span class="token operator">?</span>ASTElement<span class="token punctuation">,</span> options<span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>  isStaticKey <span class="token operator">=</span> <span class="token function">genStaticKeysCached</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>staticKeys <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span>  isPlatformReservedTag <span class="token operator">=</span> options<span class="token punctuation">.</span>isReservedTag <span class="token operator">||</span> no  <span class="token comment" spellcheck="true">// first pass: mark all non-static nodes.</span>  <span class="token function">markStatic</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// second pass: mark static roots.</span>  <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> genStaticKeys <span class="token punctuation">(</span>keys<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">makeMap</span><span class="token punctuation">(</span>    <span class="token string">'type,tag,attrsList,attrsMap,plain,parent,children,attrs'</span> <span class="token operator">+</span>    <span class="token punctuation">(</span>keys <span class="token operator">?</span> <span class="token string">','</span> <span class="token operator">+</span> keys <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在编译阶段可以把一些 AST 节点优化成静态节点，所以整个 <code>optimize</code> 的过程实际上就干 2 件事情，<code>markStatic(root)</code> 标记静态节点 ，<code>markStaticRoots(root, false)</code> 标记静态根。</p><h2 id="标记静态节点"><a href="#标记静态节点" class="headerlink" title="标记静态节点"></a>标记静态节点</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> markStatic <span class="token punctuation">(</span>node<span class="token punctuation">:</span> ASTNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  node<span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token operator">=</span> <span class="token function">isStatic</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do not make component slot content static. this avoids</span>    <span class="token comment" spellcheck="true">// 1. components not able to mutate slot nodes</span>    <span class="token comment" spellcheck="true">// 2. static slot content fails for hot-reloading</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token operator">!</span><span class="token function">isPlatformReservedTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      node<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">'slot'</span> <span class="token operator">&amp;&amp;</span>      node<span class="token punctuation">.</span>attrsMap<span class="token punctuation">[</span><span class="token string">'inline-template'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token function">markStatic</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        node<span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> block <span class="token operator">=</span> node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>block        <span class="token function">markStatic</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>block<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          node<span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> isStatic <span class="token punctuation">(</span>node<span class="token punctuation">:</span> ASTNode<span class="token punctuation">)</span><span class="token punctuation">:</span> boolean <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// expression</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// text</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>pre <span class="token operator">||</span> <span class="token punctuation">(</span>    <span class="token operator">!</span>node<span class="token punctuation">.</span>hasBindings <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// no dynamic bindings</span>    <span class="token operator">!</span>node<span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span><span class="token keyword">for</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// not v-if or v-for or v-else</span>    <span class="token operator">!</span><span class="token function">isBuiltInTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// not a built-in</span>    <span class="token function">isPlatformReservedTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">// not a component</span>    <span class="token operator">!</span><span class="token function">isDirectChildOfTemplateFor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isStaticKey<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先执行 <code>node.static = isStatic(node)</code></p><p><code>isStatic</code> 是对一个 AST 元素节点是否是静态的判断，如果是表达式，就是非静态；如果是纯文本，就是静态；对于一个普通元素，如果有 pre 属性，那么它使用了 <code>v-pre</code> 指令，是静态，否则要同时满足以下条件：没有使用 <code>v-if</code>、<code>v-for</code>，没有使用其它指令（不包括 <code>v-once</code>），非内置组件，是平台保留的标签，非带有 <code>v-for</code> 的 <code>template</code> 标签的直接子节点，节点的所有属性的 <code>key</code> 都满足静态 key；这些都满足则这个 AST 节点是一个静态节点。</p><p>如果这个节点是一个普通元素，则遍历它的所有 <code>children</code>，递归执行 <code>markStatic</code>。因为所有的 <code>elseif</code> 和 <code>else</code> 节点都不在 <code>children</code> 中， 如果节点的 <code>ifConditions</code> 不为空，则遍历 <code>ifConditions</code> 拿到所有条件中的 <code>block</code>，也就是它们对应的 AST 节点，递归执行 <code>markStatic</code>。在这些递归过程中，一旦子节点有不是 <code>static</code> 的情况，则它的父节点的 <code>static</code> 均变成 false。</p><h2 id="标记静态根"><a href="#标记静态根" class="headerlink" title="标记静态根"></a>标记静态根</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> markStaticRoots <span class="token punctuation">(</span>node<span class="token punctuation">:</span> ASTNode<span class="token punctuation">,</span> isInFor<span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>once<span class="token punctuation">)</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>staticInFor <span class="token operator">=</span> isInFor    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// For a node to qualify as a static root, it should have children that</span>    <span class="token comment" spellcheck="true">// are not just static text. Otherwise the cost of hoisting out will</span>    <span class="token comment" spellcheck="true">// outweigh the benefits and it's better off to just always render it fresh.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token keyword">static</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>      node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>      node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>staticRoot <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      node<span class="token punctuation">.</span>staticRoot <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isInFor <span class="token operator">||</span> <span class="token operator">!</span><span class="token operator">!</span>node<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>block<span class="token punctuation">,</span> isInFor<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>markStaticRoots</code> 第二个参数是 <code>isInFor</code>，对于已经是 <code>static</code> 的节点或者是 <code>v-once</code> 指令的节点，<code>node.staticInFor = isInFor</code>。<br>接着就是对于 <code>staticRoot</code> 的判断逻辑，从注释中我们可以看到，对于有资格成为 <code>staticRoot</code> 的节点，除了本身是一个静态节点外，必须满足拥有 <code>children</code>，并且 <code>children</code> 不能只是一个文本节点，不然的话把它标记成静态根节点的收益就很小了。</p><p>接下来和标记静态节点的逻辑一样，遍历 <code>children</code> 以及 <code>ifConditions</code>，递归执行 <code>markStaticRoots</code>。</p><p>回归我们之前的例子，经过 <code>optimize</code> 后，AST 树变成了如下：</p><pre class="line-numbers language-js"><code class="language-js">ast <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">'tag'</span><span class="token punctuation">:</span> <span class="token string">'ul'</span><span class="token punctuation">,</span>  <span class="token string">'attrsList'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'attrsMap'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">':class'</span><span class="token punctuation">:</span> <span class="token string">'bindCls'</span><span class="token punctuation">,</span>    <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span>    <span class="token string">'v-if'</span><span class="token punctuation">:</span> <span class="token string">'isShow'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">'if'</span><span class="token punctuation">:</span> <span class="token string">'isShow'</span><span class="token punctuation">,</span>  <span class="token string">'ifConditions'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'exp'</span><span class="token punctuation">:</span> <span class="token string">'isShow'</span><span class="token punctuation">,</span>    <span class="token string">'block'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// ul ast element</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'parent'</span><span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  <span class="token string">'plain'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string">'staticClass'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span>  <span class="token string">'classBinding'</span><span class="token punctuation">:</span> <span class="token string">'bindCls'</span><span class="token punctuation">,</span>  <span class="token string">'static'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string">'staticRoot'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string">'children'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'tag'</span><span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span>    <span class="token string">'attrsList'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'@click'</span><span class="token punctuation">,</span>      <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'clickItem(index)'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'attrsMap'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'@click'</span><span class="token punctuation">:</span> <span class="token string">'clickItem(index)'</span><span class="token punctuation">,</span>      <span class="token string">'v-for'</span><span class="token punctuation">:</span> <span class="token string">'(item,index) in data'</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'parent'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// ul ast element</span>    <span class="token string">'plain'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token string">'events'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'click'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'clickItem(index)'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'hasBindings'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">'for'</span><span class="token punctuation">:</span> <span class="token string">'data'</span><span class="token punctuation">,</span>    <span class="token string">'alias'</span><span class="token punctuation">:</span> <span class="token string">'item'</span><span class="token punctuation">,</span>    <span class="token string">'iterator1'</span><span class="token punctuation">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>    <span class="token string">'static'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token string">'staticRoot'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token string">'children'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token string">'expression'</span><span class="token punctuation">:</span> <span class="token string">'_s(item)+":"+_s(index)'</span>      <span class="token string">'text'</span><span class="token punctuation">:</span> <span class="token string">'{{item}}:{{index}}'</span><span class="token punctuation">,</span>      <span class="token string">'tokens'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token string">'@binding'</span><span class="token punctuation">:</span><span class="token string">'item'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">':'</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">'@binding'</span><span class="token punctuation">:</span><span class="token string">'index'</span><span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">'static'</span><span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们发现每一个 AST 元素节点都多了 <code>staic</code> 属性，并且 <code>type</code> 为 1 的普通元素 AST 节点多了 <code>staticRoot</code> 属性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么至此我们分析完了 <code>optimize</code> 的过程，就是深度遍历这个 AST 树，去检测它的每一颗子树是不是静态节点，如果是静态节点则它们生成 DOM 永远不需要改变，这对运行时对模板的更新起到极大的优化作用。</p><p>我们通过 <code>optimize</code> 我们把整个 AST 树中的每一个 AST 元素节点标记了 <code>static</code> 和 <code>staticRoot</code>，它会影响我们接下来执行代码生成的过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;optimize&quot;&gt;&lt;a href=&quot;#optimize&quot; class=&quot;headerlink&quot; title=&quot;optimize&quot;&gt;&lt;/a&gt;optimize&lt;/h1&gt;&lt;p&gt;当我们的模板 &lt;code&gt;template&lt;/code&gt; 经过 &lt;code&gt;parse&lt;/c
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - parse</title>
    <link href="http://www.chenya.site/2018/05/22/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/005.%E7%BC%96%E8%AF%91/003.parse/"/>
    <id>http://www.chenya.site/2018/05/22/005.vue源码学习/005.编译/003.parse/</id>
    <published>2018-05-22T03:33:09.000Z</published>
    <updated>2019-09-16T01:57:01.507Z</updated>
    
    <content type="html"><![CDATA[<p>编译过程首先就是对模板做解析，生成 AST，它是一种抽象语法树，是对源代码的抽象语法结构的树状表现形式。在很多编译技术中，如 babel 编译 ES6 的代码都会先生成 AST。</p><p>这个过程是比较复杂的，它会用到大量正则表达式对字符串解析，如果对正则不是很了解，建议先去补习正则表达式的知识。为了直观地演示 <code>parse</code> 的过程，我们先来看一个例子：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bindCls<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in data<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clickItem(index)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}:{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>经过 <code>parse</code> 过程后，生成的 AST 如下：</p><pre class="line-numbers language-js"><code class="language-js">ast <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">'tag'</span><span class="token punctuation">:</span> <span class="token string">'ul'</span><span class="token punctuation">,</span>  <span class="token string">'attrsList'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'attrsMap'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">':class'</span><span class="token punctuation">:</span> <span class="token string">'bindCls'</span><span class="token punctuation">,</span>    <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span>    <span class="token string">'v-if'</span><span class="token punctuation">:</span> <span class="token string">'isShow'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">'if'</span><span class="token punctuation">:</span> <span class="token string">'isShow'</span><span class="token punctuation">,</span>  <span class="token string">'ifConditions'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'exp'</span><span class="token punctuation">:</span> <span class="token string">'isShow'</span><span class="token punctuation">,</span>    <span class="token string">'block'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// ul ast element</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">'parent'</span><span class="token punctuation">:</span> undefined<span class="token punctuation">,</span>  <span class="token string">'plain'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string">'staticClass'</span><span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span>  <span class="token string">'classBinding'</span><span class="token punctuation">:</span> <span class="token string">'bindCls'</span><span class="token punctuation">,</span>  <span class="token string">'children'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token string">'tag'</span><span class="token punctuation">:</span> <span class="token string">'li'</span><span class="token punctuation">,</span>    <span class="token string">'attrsList'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'@click'</span><span class="token punctuation">,</span>      <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'clickItem(index)'</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'attrsMap'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'@click'</span><span class="token punctuation">:</span> <span class="token string">'clickItem(index)'</span><span class="token punctuation">,</span>      <span class="token string">'v-for'</span><span class="token punctuation">:</span> <span class="token string">'(item,index) in data'</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'parent'</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">// ul ast element</span>    <span class="token string">'plain'</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token string">'events'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'click'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'value'</span><span class="token punctuation">:</span> <span class="token string">'clickItem(index)'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'hasBindings'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">'for'</span><span class="token punctuation">:</span> <span class="token string">'data'</span><span class="token punctuation">,</span>    <span class="token string">'alias'</span><span class="token punctuation">:</span> <span class="token string">'item'</span><span class="token punctuation">,</span>    <span class="token string">'iterator1'</span><span class="token punctuation">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>    <span class="token string">'children'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token string">'expression'</span><span class="token punctuation">:</span> <span class="token string">'_s(item)+":"+_s(index)'</span>      <span class="token string">'text'</span><span class="token punctuation">:</span> <span class="token string">'{{item}}:{{index}}'</span><span class="token punctuation">,</span>      <span class="token string">'tokens'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token string">'@binding'</span><span class="token punctuation">:</span><span class="token string">'item'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">':'</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">'@binding'</span><span class="token punctuation">:</span><span class="token string">'index'</span><span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，生成的 AST 是一个树状结构，每一个节点都是一个 <code>ast element</code>，除了它自身的一些属性，还维护了它的父子关系，如 <code>parent</code> 指向它的父节点，<code>children</code> 指向它的所有子节点。先对 AST 有一些直观的印象，那么接下来我们来分析一下这个 AST 是如何得到的。</p><h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p>首先来看一下 <code>parse</code> 的定义，在 <code>src/compiler/parser/index.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> parse <span class="token punctuation">(</span>  template<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  options<span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">)</span><span class="token punctuation">:</span> ASTElement <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token function">getFnsAndConfigFromOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>  <span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// options ...</span>    start <span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> unary<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token function">createASTElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span>      <span class="token function">processElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>      <span class="token function">treeManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    end <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">treeManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">closeElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    chars <span class="token punctuation">(</span>text<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">createChildrenASTOfText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    comment <span class="token punctuation">(</span>text<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">createChildrenASTOfComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> astRootElement<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>parse</code> 函数的代码很长，贴一遍对同学的理解没有好处，我先把它拆成伪代码的形式，方便同学们对整体流程先有一个大致的了解。接下来我们就来分解分析每段伪代码的作用。</p><h3 id="从-options-中获取方法和配置"><a href="#从-options-中获取方法和配置" class="headerlink" title="从 options 中获取方法和配置"></a>从 options 中获取方法和配置</h3><p>对应伪代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">getFnsAndConfigFromOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>parse</code> 函数的输入是 <code>template</code> 和 <code>options</code>，输出是 AST 的根节点。<code>template</code> 就是我们的模板字符串，而 <code>options</code> 实际上是和平台相关的一些配置，它的定义在 <code>src/platforms/web/compiler/options</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>  isPreTag<span class="token punctuation">,</span>  mustUseProp<span class="token punctuation">,</span>  isReservedTag<span class="token punctuation">,</span>  getTagNamespace<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">import</span> modules <span class="token keyword">from</span> <span class="token string">'./modules/index'</span><span class="token keyword">import</span> directives <span class="token keyword">from</span> <span class="token string">'./directives/index'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> genStaticKeys <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'shared/util'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> isUnaryTag<span class="token punctuation">,</span> canBeLeftOpenTag <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./util'</span><span class="token keyword">export</span> <span class="token keyword">const</span> baseOptions<span class="token punctuation">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span>  expectHTML<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  modules<span class="token punctuation">,</span>  directives<span class="token punctuation">,</span>  isPreTag<span class="token punctuation">,</span>  isUnaryTag<span class="token punctuation">,</span>  mustUseProp<span class="token punctuation">,</span>  canBeLeftOpenTag<span class="token punctuation">,</span>  isReservedTag<span class="token punctuation">,</span>  getTagNamespace<span class="token punctuation">,</span>  staticKeys<span class="token punctuation">:</span> <span class="token function">genStaticKeys</span><span class="token punctuation">(</span>modules<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些属性和方法之所以放到 <code>platforms</code> 目录下是因为它们在不同的平台（web 和 weex）的实现是不同的。</p><p>我们用伪代码 <code>getFnsAndConfigFromOptions</code> 表示了这一过程，它的实际代码如下：</p><pre class="line-numbers language-js"><code class="language-js">warn <span class="token operator">=</span> options<span class="token punctuation">.</span>warn <span class="token operator">||</span> baseWarnplatformIsPreTag <span class="token operator">=</span> options<span class="token punctuation">.</span>isPreTag <span class="token operator">||</span> noplatformMustUseProp <span class="token operator">=</span> options<span class="token punctuation">.</span>mustUseProp <span class="token operator">||</span> noplatformGetTagNamespace <span class="token operator">=</span> options<span class="token punctuation">.</span>getTagNamespace <span class="token operator">||</span> notransforms <span class="token operator">=</span> <span class="token function">pluckModuleFunction</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token string">'transformNode'</span><span class="token punctuation">)</span>preTransforms <span class="token operator">=</span> <span class="token function">pluckModuleFunction</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token string">'preTransformNode'</span><span class="token punctuation">)</span>postTransforms <span class="token operator">=</span> <span class="token function">pluckModuleFunction</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">,</span> <span class="token string">'postTransformNode'</span><span class="token punctuation">)</span>delimiters <span class="token operator">=</span> options<span class="token punctuation">.</span>delimiters<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些方法和配置都是后续解析时候需要的，可以不用去管它们的具体作用，我们先往后看。</p><h3 id="解析-HTML-模板"><a href="#解析-HTML-模板" class="headerlink" title="解析 HTML 模板"></a>解析 HTML 模板</h3><p>对应伪代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">parseHTML</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于 <code>template</code> 模板的解析主要是通过 <code>parseHTML</code> 函数，它的定义在 <code>src/compiler/parser/html-parser</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> parseHTML <span class="token punctuation">(</span>html<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> lastTag  <span class="token keyword">while</span> <span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastTag <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isPlainTextElement</span><span class="token punctuation">(</span>lastTag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">let</span> textEnd <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>matchComment<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">advance</span><span class="token punctuation">(</span>commentLength<span class="token punctuation">)</span>           <span class="token keyword">continue</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>matchDoctype<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">advance</span><span class="token punctuation">(</span>doctypeLength<span class="token punctuation">)</span>           <span class="token keyword">continue</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>matchEndTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">advance</span><span class="token punctuation">(</span>endTagLength<span class="token punctuation">)</span>           <span class="token function">parseEndTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">continue</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>matchStartTag<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token function">parseStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token function">handleStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">continue</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">handleText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">advance</span><span class="token punctuation">(</span>textLength<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       <span class="token function">handlePlainTextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token function">parseEndTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 <code>parseHTML</code> 的逻辑也非常复杂，因此我也用了伪代码的方式表达，整体来说它的逻辑就是循环解析 <code>template</code> ，用正则做各种匹配，对于不同情况分别进行不同的处理，直到整个 template 被解析完毕。<br>在匹配的过程中会利用 <code>advance</code> 函数不断前进整个模板字符串，直到字符串末尾。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> advance <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  index <span class="token operator">+</span><span class="token operator">=</span> n  html <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为了更加直观地说明 <code>advance</code> 的作用，可以通过一副图表示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/advance-1.png" alt="advance-1" title="advance-1">                </div>                <div class="image-caption">advance-1</div>            </figure><p>调用 <code>advance</code> 函数：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">advance</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/advance-2.png" alt="advance-2" title="advance-2">                </div>                <div class="image-caption">advance-2</div>            </figure><p>匹配的过程中主要利用了正则表达式，如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> attribute <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">^</span>\s<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">^</span>\s<span class="token string">"'&lt;>\/=]+)(?:\s*(=)\s*(?:"</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token string">"]*)"</span><span class="token operator">+</span><span class="token operator">|</span><span class="token string">'([^'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">'+|([^\s"'</span><span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token template-string"><span class="token string">`]+)))?/const ncname = '[a-zA-Z_][\\w\\-\\.]*'const qnameCapture = `</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>ncname<span class="token punctuation">}</span>\\<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token operator">?</span>$<span class="token punctuation">{</span>ncname<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token template-string"><span class="token string">`const startTagOpen = new RegExp(`</span></span><span class="token operator">^</span><span class="token operator">&lt;</span>$<span class="token punctuation">{</span>qnameCapture<span class="token punctuation">}</span><span class="token template-string"><span class="token string">`)const startTagClose = /^\s*(\/?)>/const endTag = new RegExp(`</span></span><span class="token operator">^</span><span class="token operator">&lt;</span>\\<span class="token operator">/</span>$<span class="token punctuation">{</span>qnameCapture<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">></span>`<span class="token punctuation">)</span><span class="token keyword">const</span> doctype <span class="token operator">=</span> <span class="token regex">/^&lt;!DOCTYPE [^>]+>/i</span><span class="token keyword">const</span> comment <span class="token operator">=</span> <span class="token regex">/^&lt;!\--/</span><span class="token keyword">const</span> conditionalComment <span class="token operator">=</span> <span class="token regex">/^&lt;!\[/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这些正则表达式，我们可以匹配注释节点、文档类型节点、开始闭合标签等。</p><ul><li>注释节点、文档类型节点</li></ul><p>对于注释节点和文档类型节点的匹配，如果匹配到我们仅仅做的是做前进即可。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>comment<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> commentEnd <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'-->'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>commentEnd <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>shouldKeepComment<span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> commentEnd<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">advance</span><span class="token punctuation">(</span>commentEnd <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">continue</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>conditionalComment<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> conditionalEnd <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">']>'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>conditionalEnd <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">advance</span><span class="token punctuation">(</span>conditionalEnd <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">continue</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> doctypeMatch <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>doctype<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>doctypeMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">advance</span><span class="token punctuation">(</span>doctypeMatch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token keyword">continue</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于注释和条件注释节点，前进至它们的末尾位置；对于文档类型节点，则前进它自身长度的距离。</p><ul><li>开始标签</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> startTagMatch <span class="token operator">=</span> <span class="token function">parseStartTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>startTagMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">handleStartTag</span><span class="token punctuation">(</span>startTagMatch<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldIgnoreFirstNewline</span><span class="token punctuation">(</span>lastTag<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">advance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">continue</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先通过 <code>parseStartTag</code> 解析开始标签：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> parseStartTag <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> start <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startTagOpen<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token punctuation">{</span>      tagName<span class="token punctuation">:</span> start<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      attrs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      start<span class="token punctuation">:</span> index    <span class="token punctuation">}</span>    <span class="token function">advance</span><span class="token punctuation">(</span>start<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">let</span> end<span class="token punctuation">,</span> attr    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>end <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>startTagClose<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>attr <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">advance</span><span class="token punctuation">(</span>attr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>      match<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>      match<span class="token punctuation">.</span>unarySlash <span class="token operator">=</span> end<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token function">advance</span><span class="token punctuation">(</span>end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>      match<span class="token punctuation">.</span>end <span class="token operator">=</span> index      <span class="token keyword">return</span> match    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于开始标签，除了标签名之外，还有一些标签相关的属性。函数先通过正则表达式 <code>startTagOpen</code> 匹配到开始标签，然后定义了 <code>match</code> 对象，接着循环去匹配开始标签中的属性并添加到 <code>match.attrs</code> 中，直到匹配的开始标签的闭合符结束。如果匹配到闭合符，则获取一元斜线符，前进到闭合符尾，并把当前索引赋值给 <code>match.end</code>。</p><p><code>parseStartTag</code> 对开始标签解析拿到 <code>match</code> 后，紧接着会执行 <code>handleStartTag</code> 对 <code>match</code> 做处理：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> handleStartTag <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> tagName <span class="token operator">=</span> match<span class="token punctuation">.</span>tagName  <span class="token keyword">const</span> unarySlash <span class="token operator">=</span> match<span class="token punctuation">.</span>unarySlash  <span class="token keyword">if</span> <span class="token punctuation">(</span>expectHTML<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTag <span class="token operator">===</span> <span class="token string">'p'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNonPhrasingTag</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">parseEndTag</span><span class="token punctuation">(</span>lastTag<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canBeLeftOpenTag</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lastTag <span class="token operator">===</span> tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">parseEndTag</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> unary <span class="token operator">=</span> <span class="token function">isUnaryTag</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token operator">!</span>unarySlash  <span class="token keyword">const</span> l <span class="token operator">=</span> match<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>length  <span class="token keyword">const</span> attrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> args <span class="token operator">=</span> match<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_REGEX_CAPTURING_BROKEN <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'""'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> args<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">||</span> args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">||</span> args<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">''</span>    <span class="token keyword">const</span> shouldDecodeNewlines <span class="token operator">=</span> tagName <span class="token operator">===</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'href'</span>      <span class="token operator">?</span> options<span class="token punctuation">.</span>shouldDecodeNewlinesForHref      <span class="token punctuation">:</span> options<span class="token punctuation">.</span>shouldDecodeNewlines    attrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token function">decodeAttr</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> shouldDecodeNewlines<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>unary<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> tag<span class="token punctuation">:</span> tagName<span class="token punctuation">,</span> lowerCasedTag<span class="token punctuation">:</span> tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> attrs<span class="token punctuation">:</span> attrs <span class="token punctuation">}</span><span class="token punctuation">)</span>    lastTag <span class="token operator">=</span> tagName  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    options<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> unary<span class="token punctuation">,</span> match<span class="token punctuation">.</span>start<span class="token punctuation">,</span> match<span class="token punctuation">.</span>end<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>handleStartTag</code> 的核心逻辑很简单，先判断开始标签是否是一元标签，类似 <code>&lt;img&gt;、&lt;br/&gt;</code> 这样，接着对 <code>match.attrs</code> 遍历并做了一些处理，最后判断如果非一元标签，则往 <code>stack</code> 里 push 一个对象，并且把 <code>tagName</code> 赋值给 <code>lastTag</code>。至于 <code>stack</code> 的作用，稍后我会介绍。</p><p>最后调用了 <code>options.start</code> 回调函数，并传入一些参数，这个回调函数的作用稍后我会详细介绍。</p><ul><li>闭合标签</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> endTagMatch <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>endTag<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>endTagMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> curIndex <span class="token operator">=</span> index  <span class="token function">advance</span><span class="token punctuation">(</span>endTagMatch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token function">parseEndTag</span><span class="token punctuation">(</span>endTagMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> curIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span>  <span class="token keyword">continue</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先通过正则 <code>endTag</code> 匹配到闭合标签，然后前进到闭合标签末尾，然后执行 <code>parseEndTag</code> 方法对闭合标签做解析。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> parseEndTag <span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> pos<span class="token punctuation">,</span> lowerCasedTagName  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> start <span class="token operator">=</span> index  <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> end <span class="token operator">=</span> index  <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    lowerCasedTagName <span class="token operator">=</span> tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>pos <span class="token operator">=</span> stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> pos <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> pos<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>lowerCasedTag <span class="token operator">===</span> lowerCasedTagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    pos <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> pos<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>i <span class="token operator">></span> pos <span class="token operator">||</span> <span class="token operator">!</span>tagName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        options<span class="token punctuation">.</span>warn      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        options<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`tag &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">> has no matching end tag.`</span></span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        options<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tag<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    stack<span class="token punctuation">.</span>length <span class="token operator">=</span> pos    lastTag <span class="token operator">=</span> pos <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">[</span>pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tag  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lowerCasedTagName <span class="token operator">===</span> <span class="token string">'br'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lowerCasedTagName <span class="token operator">===</span> <span class="token string">'p'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>start<span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>      options<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>parseEndTag</code> 的核心逻辑很简单，在介绍之前我们回顾一下在执行 <code>handleStartTag</code> 的时候，对于非一元标签（有 endTag）我们都把它构造成一个对象压入到 <code>stack</code> 中，如图所示：</p><!-- <img :src="$withBase('/assets/stack.png')"> --><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/stack.png" alt="stack" title="stack">                </div>                <div class="image-caption">stack</div>            </figure><p>那么对于闭合标签的解析，就是倒序 <code>stack</code>，找到第一个和当前 <code>endTag</code> 匹配的元素。如果是正常的标签匹配，那么 <code>stack</code> 的最后一个元素应该和当前的 <code>endTag</code> 匹配，但是考虑到如下错误情况：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候当 <code>endTag</code> 为 <code>&lt;/div&gt;</code> 的时候，从 <code>stack</code> 尾部找到的标签是 <code>&lt;span&gt;</code>，就不能匹配，因此这种情况会报警告。匹配后把栈到 <code>pos</code> 位置的都弹出，并从 <code>stack</code> 尾部拿到 <code>lastTag</code>。</p><p>最后调用了 <code>options.end</code> 回调函数，并传入一些参数，这个回调函数的作用稍后我会详细介绍。</p><ul><li>文本</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> text<span class="token punctuation">,</span> rest<span class="token punctuation">,</span> next<span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  rest <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>textEnd<span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>    <span class="token operator">!</span>endTag<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span>startTagOpen<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span>comment<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    <span class="token operator">!</span>conditionalComment<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    next <span class="token operator">=</span> rest<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span>    textEnd <span class="token operator">+</span><span class="token operator">=</span> next    rest <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>textEnd<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  text <span class="token operator">=</span> html<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> textEnd<span class="token punctuation">)</span>  <span class="token function">advance</span><span class="token punctuation">(</span>textEnd<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>textEnd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  text <span class="token operator">=</span> html  html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>chars <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>  options<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来判断 <code>textEnd</code> 是否大于等于 0 的，满足则说明到从当前位置到 <code>textEnd</code> 位置都是文本，并且如果 <code>&lt;</code> 是纯文本中的字符，就继续找到真正的文本结束的位置，然后前进到结束的位置。</p><p>再继续判断 <code>textEnd</code> 小于 0 的情况，则说明整个 <code>template</code> 解析完毕了，把剩余的 <code>html</code> 都赋值给了 <code>text</code>。</p><p>最后调用了 <code>options.chars</code> 回调函数，并传 <code>text</code> 参数，这个回调函数的作用稍后我会详细介绍。</p><p>因此，在循环解析整个 <code>template</code> 的过程中，会根据不同的情况，去执行不同的回调函数，下面我们来看看这些回调函数的作用。</p><h3 id="处理开始标签"><a href="#处理开始标签" class="headerlink" title="处理开始标签"></a>处理开始标签</h3><p>对应伪代码：</p><pre class="line-numbers language-js"><code class="language-js">start <span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> unary<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token function">createASTElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span>  <span class="token function">processElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  <span class="token function">treeManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当解析到开始标签的时候，最后会执行 <code>start</code> 回调函数，函数主要就做 3 件事情，创建 AST 元素，处理 AST 元素，AST 树管理。下面我们来分别来看这几个过程。</p><ul><li>创建 AST 元素</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// check namespace.</span><span class="token comment" spellcheck="true">// inherit parent ns if there is one</span><span class="token keyword">const</span> ns <span class="token operator">=</span> <span class="token punctuation">(</span>currentParent <span class="token operator">&amp;&amp;</span> currentParent<span class="token punctuation">.</span>ns<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">platformGetTagNamespace</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// handle IE svg bug</span><span class="token comment" spellcheck="true">/* istanbul ignore if */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isIE <span class="token operator">&amp;&amp;</span> ns <span class="token operator">===</span> <span class="token string">'svg'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  attrs <span class="token operator">=</span> <span class="token function">guardIESVGBug</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> element<span class="token punctuation">:</span> ASTElement <span class="token operator">=</span> <span class="token function">createASTElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> currentParent<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>  element<span class="token punctuation">.</span>ns <span class="token operator">=</span> ns<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> createASTElement <span class="token punctuation">(</span>  tag<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  attrs<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Attr<span class="token operator">></span><span class="token punctuation">,</span>  parent<span class="token punctuation">:</span> ASTElement <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ASTElement <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    tag<span class="token punctuation">,</span>    attrsList<span class="token punctuation">:</span> attrs<span class="token punctuation">,</span>    attrsMap<span class="token punctuation">:</span> <span class="token function">makeAttrsMap</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">,</span>    parent<span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>createASTElement</code> 方法去创建一个 AST 元素，并添加了 namespace。可以看到，每一个 AST 元素就是一个普通的 JavaScript 对象，其中，<code>type</code> 表示 AST 元素类型，<code>tag</code> 表示标签名，<code>attrsList</code> 表示属性列表，<code>attrsMap</code> 表示属性映射表，<code>parent</code> 表示父的 AST 元素，<code>children</code> 表示子 AST 元素集合。</p><ul><li>处理 AST 元素</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isForbiddenTag</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isServerRendering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  element<span class="token punctuation">.</span>forbidden <span class="token operator">=</span> <span class="token boolean">true</span>  process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>    <span class="token string">'Templates should only be responsible for mapping the state to the '</span> <span class="token operator">+</span>    <span class="token string">'UI. Avoid placing tags with side-effects in your templates, such as '</span> <span class="token operator">+</span>    <span class="token template-string"><span class="token string">`&lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">>`</span></span> <span class="token operator">+</span> <span class="token string">', as they will not be parsed.'</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// apply pre-transforms</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> preTransforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  element <span class="token operator">=</span> preTransforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">||</span> element<span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inVPre<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">processPre</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>    inVPre <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">platformIsPreTag</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  inPre <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inVPre<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">processRawAttrs</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>element<span class="token punctuation">.</span>processed<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// structural directives</span>  <span class="token function">processFor</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  <span class="token function">processIf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  <span class="token function">processOnce</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// element-scope stuff</span>  <span class="token function">processElement</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是对模块 <code>preTransforms</code> 的调用，其实所有模块的 <code>preTransforms</code>、 <code>transforms</code> 和 <code>postTransforms</code> 的定义都在 <code>src/platforms/web/compiler/modules</code> 目录中，这部分我们暂时不会介绍，之后会结合具体的例子说。接着判断 <code>element</code> 是否包含各种指令通过 <code>processXXX</code> 做相应的处理，处理的结果就是扩展 AST 元素的属性。这里我并不会一一介绍所有的指令处理，而是结合我们当前的例子，我们来看一下 <code>processFor</code> 和 <code>processIf</code>：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> processFor <span class="token punctuation">(</span>el<span class="token punctuation">:</span> ASTElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> exp  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>exp <span class="token operator">=</span> <span class="token function">getAndRemoveAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">'v-for'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">parseFor</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">extend</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">warn</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token string">`Invalid v-for expression: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> forAliasRE <span class="token operator">=</span> <span class="token regex">/(.*?)\s+(?:in|of)\s+(.*)/</span><span class="token keyword">export</span> <span class="token keyword">const</span> forIteratorRE <span class="token operator">=</span> <span class="token regex">/,([^,\}\]]*)(?:,([^,\}\]]*))?$/</span><span class="token keyword">const</span> stripParensRE <span class="token operator">=</span> <span class="token regex">/^\(|\)$/g</span><span class="token keyword">export</span> <span class="token keyword">function</span> parseFor <span class="token punctuation">(</span>exp<span class="token punctuation">:</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span>ForParseResult <span class="token punctuation">{</span>  <span class="token keyword">const</span> inMatch <span class="token operator">=</span> exp<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>forAliasRE<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inMatch<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  res<span class="token punctuation">.</span><span class="token keyword">for</span> <span class="token operator">=</span> inMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> alias <span class="token operator">=</span> inMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>stripParensRE<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> iteratorMatch <span class="token operator">=</span> alias<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>forIteratorRE<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>iteratorMatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span>alias <span class="token operator">=</span> alias<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>forIteratorRE<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span>iterator1 <span class="token operator">=</span> iteratorMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iteratorMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span>iterator2 <span class="token operator">=</span> iteratorMatch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span>alias <span class="token operator">=</span> alias  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>processFor</code> 就是从元素中拿到 <code>v-for</code> 指令的内容，然后分别解析出 <code>for</code>、<code>alias</code>、<code>iterator1</code>、<code>iterator2</code> 等属性的值添加到 AST 的元素上。就我们的示例 <code>v-for=&quot;(item,index) in data&quot;</code> 而言，解析出的的 <code>for</code> 是 <code>data</code>，<code>alias</code> 是 <code>item</code>，<code>iterator1</code> 是 <code>index</code>，没有 <code>iterator2</code>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> processIf <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> exp <span class="token operator">=</span> <span class="token function">getAndRemoveAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">'v-if'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token operator">=</span> exp    <span class="token function">addIfCondition</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token punctuation">{</span>      exp<span class="token punctuation">:</span> exp<span class="token punctuation">,</span>      block<span class="token punctuation">:</span> el    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getAndRemoveAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">'v-else'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      el<span class="token punctuation">.</span><span class="token keyword">else</span> <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> elseif <span class="token operator">=</span> <span class="token function">getAndRemoveAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">'v-else-if'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>elseif<span class="token punctuation">)</span> <span class="token punctuation">{</span>      el<span class="token punctuation">.</span>elseif <span class="token operator">=</span> elseif    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> addIfCondition <span class="token punctuation">(</span>el<span class="token punctuation">:</span> ASTElement<span class="token punctuation">,</span> condition<span class="token punctuation">:</span> ASTIfCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>el<span class="token punctuation">.</span>ifConditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span>ifConditions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  el<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>processIf</code> 就是从元素中拿 <code>v-if</code> 指令的内容，如果拿到则给 AST 元素添加 <code>if</code> 属性和 <code>ifConditions</code> 属性；否则尝试拿 <code>v-else</code> 指令及 <code>v-else-if</code> 指令的内容，如果拿到则给 AST 元素分别添加 <code>else</code> 和 <code>elseif</code> 属性。 </p><ul><li>AST 树管理</li></ul><p>我们在处理开始标签的时候为每一个标签创建了一个 AST 元素，在不断解析模板创建 AST 元素的时候，我们也要为它们建立父子关系，就像 DOM 元素的父子关系那样。</p><p>AST 树管理相关代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> checkRootConstraints <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">'slot'</span> <span class="token operator">||</span> el<span class="token punctuation">.</span>tag <span class="token operator">===</span> <span class="token string">'template'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">warnOnce</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token string">`Cannot use &lt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>el<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">> as component root element because it may `</span></span> <span class="token operator">+</span>        <span class="token string">'contain multiple nodes.'</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>attrsMap<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'v-for'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">warnOnce</span><span class="token punctuation">(</span>        <span class="token string">'Cannot use v-for on stateful component root element because '</span> <span class="token operator">+</span>        <span class="token string">'it renders multiple elements.'</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// tree management</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  root <span class="token operator">=</span> element  <span class="token function">checkRootConstraints</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// allow root elements with v-if, v-else-if and v-else</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>elseif <span class="token operator">||</span> element<span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkRootConstraints</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>    <span class="token function">addIfCondition</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token punctuation">{</span>      exp<span class="token punctuation">:</span> element<span class="token punctuation">.</span>elseif<span class="token punctuation">,</span>      block<span class="token punctuation">:</span> element    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warnOnce</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token string">`Component template should contain exactly one root element. `</span></span> <span class="token operator">+</span>      <span class="token template-string"><span class="token string">`If you are using v-if on multiple elements, `</span></span> <span class="token operator">+</span>      <span class="token template-string"><span class="token string">`use v-else-if to chain them instead.`</span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>currentParent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>element<span class="token punctuation">.</span>forbidden<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>elseif <span class="token operator">||</span> element<span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">processIfConditions</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> currentParent<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>slotScope<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// scoped slot</span>    currentParent<span class="token punctuation">.</span>plain <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> element<span class="token punctuation">.</span>slotTarget <span class="token operator">||</span> <span class="token string">'"default"'</span>    <span class="token punctuation">;</span><span class="token punctuation">(</span>currentParent<span class="token punctuation">.</span>scopedSlots <span class="token operator">||</span> <span class="token punctuation">(</span>currentParent<span class="token punctuation">.</span>scopedSlots <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> element  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    currentParent<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>    element<span class="token punctuation">.</span>parent <span class="token operator">=</span> currentParent  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>unary<span class="token punctuation">)</span> <span class="token punctuation">{</span>  currentParent <span class="token operator">=</span> element  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token function">closeElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AST 树管理的目标是构建一颗 AST 树，本质上它要维护 <code>root</code> 根节点和当前父节点 <code>currentParent</code>。为了保证元素可以正确闭合，这里也利用了 <code>stack</code> 栈的数据结构，和我们之前解析模板时用到的 <code>stack</code> 类似。</p><p>当我们在处理开始标签的时候，判断如果有 <code>currentParent</code>，会把当前 AST 元素 push 到 <code>currentParent.chilldren</code> 中，同时把 AST 元素的 <code>parent</code> 指向 <code>currentParent</code>。</p><p> 接着就是更新 <code>currentParent</code> 和 <code>stack</code> ，判断当前如果不是一个一元标签，我们要把它生成的 AST 元素 push 到 <code>stack</code> 中，并且把当前的 AST 元素赋值给 <code>currentParent</code>。</p><p><code>stack</code> 和 <code>currentParent</code> 除了在处理开始标签的时候会变化，在处理闭合标签的时候也会变化，因此整个 AST 树管理要结合闭合标签的处理逻辑看。</p><h3 id="处理闭合标签"><a href="#处理闭合标签" class="headerlink" title="处理闭合标签"></a>处理闭合标签</h3><p>对应伪代码：</p><pre class="line-numbers language-js"><code class="language-js">end <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">treeManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">closeElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当解析到闭合标签的时候，最后会执行 <code>end</code> 回调函数：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// remove trailing whitespace</span><span class="token keyword">const</span> element <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">const</span> lastNode <span class="token operator">=</span> element<span class="token punctuation">.</span>children<span class="token punctuation">[</span>element<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lastNode <span class="token operator">&amp;&amp;</span> lastNode<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> lastNode<span class="token punctuation">.</span>text <span class="token operator">===</span> <span class="token string">' '</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inPre<span class="token punctuation">)</span> <span class="token punctuation">{</span>  element<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// pop stack</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>currentParent <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token function">closeElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先处理了尾部空格的情况，然后把 <code>stack</code> 的元素弹一个出栈，并把 <code>stack</code> 最后一个元素赋值给 <code>currentParent</code>，这样就保证了当遇到闭合标签的时候，可以正确地更新 <code>stack</code> 的长度以及 <code>currentParent</code> 的值，这样就维护了整个 AST 树。</p><p>最后执行了 <code>closeElement(elment)</code>：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> closeElement <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// check pre state</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>pre<span class="token punctuation">)</span> <span class="token punctuation">{</span>    inVPre <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">platformIsPreTag</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    inPre <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// apply post-transforms</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> postTransforms<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    postTransforms<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>closeElement</code> 逻辑很简单，就是更新一下 <code>inVPre</code> 和 <code>inPre</code> 的状态，以及执行 <code>postTransforms</code> 函数，这些我们暂时都不必了解。</p><h3 id="处理文本内容"><a href="#处理文本内容" class="headerlink" title="处理文本内容"></a>处理文本内容</h3><p>对应伪代码：</p><pre class="line-numbers language-js"><code class="language-js">chars <span class="token punctuation">(</span>text<span class="token punctuation">:</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">handleText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">createChildrenASTOfText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除了处理开始标签和闭合标签，我们还会在解析模板的过程中去处理一些文本内容：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> children <span class="token operator">=</span> currentParent<span class="token punctuation">.</span>childrentext <span class="token operator">=</span> inPre <span class="token operator">||</span> text<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">?</span> <span class="token function">isTextTag</span><span class="token punctuation">(</span>currentParent<span class="token punctuation">)</span> <span class="token operator">?</span> text <span class="token punctuation">:</span> <span class="token function">decodeHTMLCached</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// only preserve whitespace if its not right after a starting tag</span>  <span class="token punctuation">:</span> preserveWhitespace <span class="token operator">&amp;&amp;</span> children<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token string">' '</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> res  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inVPre <span class="token operator">&amp;&amp;</span> text <span class="token operator">!==</span> <span class="token string">' '</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> delimiters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      expression<span class="token punctuation">:</span> res<span class="token punctuation">.</span>expression<span class="token punctuation">,</span>      tokens<span class="token punctuation">:</span> res<span class="token punctuation">.</span>tokens<span class="token punctuation">,</span>      text    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">!==</span> <span class="token string">' '</span> <span class="token operator">||</span> <span class="token operator">!</span>children<span class="token punctuation">.</span>length <span class="token operator">||</span> children<span class="token punctuation">[</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      text    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文本构造的 AST 元素有 2 种类型，一种是有表达式的，<code>type</code> 为 2，一种是纯文本，<code>type</code> 为 3。在我们的例子中，文本就是 <code>:</code>，是个表达式，通过执行 <code>parseText(text, delimiters)</code> 对文本解析，它的定义在 <code>src/compiler/parser/text-parsre.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> defaultTagRE <span class="token operator">=</span> <span class="token regex">/\{\{((?:.|\n)+?)\}\}/g</span><span class="token keyword">const</span> regexEscapeRE <span class="token operator">=</span> <span class="token regex">/[-.*+?^${}()|[\]\/\\]/g</span><span class="token keyword">const</span> buildRegex <span class="token operator">=</span> <span class="token function">cached</span><span class="token punctuation">(</span>delimiters <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> open <span class="token operator">=</span> delimiters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexEscapeRE<span class="token punctuation">,</span> <span class="token string">'\\$&amp;'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> close <span class="token operator">=</span> delimiters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regexEscapeRE<span class="token punctuation">,</span> <span class="token string">'\\$&amp;'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>open <span class="token operator">+</span> <span class="token string">'((?:.|\\n)+?)'</span> <span class="token operator">+</span> close<span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">function</span> parseText <span class="token punctuation">(</span>  text<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  delimiters<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> string<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> TextParseResult <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> tagRE <span class="token operator">=</span> delimiters <span class="token operator">?</span> <span class="token function">buildRegex</span><span class="token punctuation">(</span>delimiters<span class="token punctuation">)</span> <span class="token punctuation">:</span> defaultTagRE  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tagRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> rawTokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> tagRE<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> match<span class="token punctuation">,</span> index<span class="token punctuation">,</span> tokenValue  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>match <span class="token operator">=</span> tagRE<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    index <span class="token operator">=</span> match<span class="token punctuation">.</span>index    <span class="token comment" spellcheck="true">// push text token</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> lastIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tokenValue <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>      tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tokenValue<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// tag token</span>    <span class="token keyword">const</span> exp <span class="token operator">=</span> <span class="token function">parseFilters</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`_s(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>exp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">)</span>    rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">'@binding'</span><span class="token punctuation">:</span> exp <span class="token punctuation">}</span><span class="token punctuation">)</span>    lastIndex <span class="token operator">=</span> index <span class="token operator">+</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">&lt;</span> text<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    rawTokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tokenValue <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">)</span>    tokens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tokenValue<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    expression<span class="token punctuation">:</span> tokens<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    tokens<span class="token punctuation">:</span> rawTokens  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>parseText</code> 首先根据分隔符（默认是<code>双大括号</code>）构造了文本匹配的正则表达式，然后再循环匹配文本，遇到普通文本就 push 到 <code>rawTokens</code> 和 <code>tokens</code> 中，如果是表达式就转换成 <code>_s(${exp})</code> push 到 <code>tokens</code> 中，以及转换成 <code>{@binding:exp}</code> push 到 <code>rawTokens</code> 中。</p><p>对于我们的例子 <code>:</code>，<code>tokens</code> 就是 <code>[_s(item),&#39;&quot;:&quot;&#39;,_s(index)]</code>；<code>rawTokens</code> 就是 <code>[{&#39;@binding&#39;:&#39;item&#39;},&#39;:&#39;,{&#39;@binding&#39;:&#39;index&#39;}]</code>。那么返回的对象如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">return</span> <span class="token punctuation">{</span>  expression<span class="token punctuation">:</span> <span class="token string">'_s(item)+":"+_s(index)'</span><span class="token punctuation">,</span>  tokens<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'@binding'</span><span class="token punctuation">:</span><span class="token string">'item'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'@binding'</span><span class="token punctuation">:</span><span class="token string">'index'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/parse.png" alt="parse" title="parse">                </div>                <div class="image-caption">parse</div>            </figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么至此，<code>parse</code> 的过程就分析完了，看似复杂，但我们可以抛开细节理清它的整体流程。<code>parse</code> 的目标是把 <code>template</code> 模板字符串转换成 AST 树，它是一种用 JavaScript 对象的形式来描述整个模板。那么整个 <code>parse</code> 的过程是利用正则表达式顺序解析模板，当解析到开始标签、闭合标签、文本的时候都会分别执行对应的回调函数，来达到构造 AST 树的目的。</p><p>AST 元素节点总共有 3 种类型，<code>type</code> 为 1 表示是普通元素，为 2 表示是表达式，为 3 表示是纯文本。其实这里我觉得源码写的不够友好，这种是典型的魔术数字，如果转换成用常量表达会更利于源码阅读。</p><p>当 AST 树构造完毕，下一步就是 <code>optimize</code> 优化这颗树。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;编译过程首先就是对模板做解析，生成 AST，它是一种抽象语法树，是对源代码的抽象语法结构的树状表现形式。在很多编译技术中，如 babel 编译 ES6 的代码都会先生成 AST。&lt;/p&gt;
&lt;p&gt;这个过程是比较复杂的，它会用到大量正则表达式对字符串解析，如果对正则不是很了解，
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - 编译入口</title>
    <link href="http://www.chenya.site/2018/05/19/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/005.%E7%BC%96%E8%AF%91/002.%E7%BC%96%E8%AF%91%E5%85%A5%E5%8F%A3/"/>
    <id>http://www.chenya.site/2018/05/19/005.vue源码学习/005.编译/002.编译入口/</id>
    <published>2018-05-19T02:25:55.000Z</published>
    <updated>2019-09-16T01:57:01.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译入口"><a href="#编译入口" class="headerlink" title="编译入口"></a>编译入口</h1><p>当我们使用 Runtime + Compiler 的 Vue.js，它的入口是 <code>src/platforms/web/entry-runtime-with-compiler.js</code>，看一下它对 <code>$mount</code> 函数的定义：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> mount <span class="token operator">=</span> Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mountVue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  el<span class="token operator">?</span><span class="token punctuation">:</span> string <span class="token operator">|</span> Element<span class="token punctuation">,</span>  hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Component <span class="token punctuation">{</span>  el <span class="token operator">=</span> el <span class="token operator">&amp;&amp;</span> <span class="token function">query</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>el <span class="token operator">===</span> document<span class="token punctuation">.</span>body <span class="token operator">||</span> el <span class="token operator">===</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token string">`Do not mount Vue to &lt;html> or &lt;body> - mount to normal elements instead.`</span></span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options  <span class="token comment" spellcheck="true">// resolve template/el and convert to render function</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> template <span class="token operator">=</span> options<span class="token punctuation">.</span>template    <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> template <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'#'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          template <span class="token operator">=</span> <span class="token function">idToTemplate</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">warn</span><span class="token punctuation">(</span>              <span class="token template-string"><span class="token string">`Template element not found or is empty: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>options<span class="token punctuation">.</span>template<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>              <span class="token keyword">this</span>            <span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        template <span class="token operator">=</span> template<span class="token punctuation">.</span>innerHTML      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'invalid template option:'</span> <span class="token operator">+</span> template<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      template <span class="token operator">=</span> <span class="token function">getOuterHTML</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>template<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">'compile'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> staticRenderFns <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">compileToFunctions</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>        shouldDecodeNewlines<span class="token punctuation">,</span>        shouldDecodeNewlinesForHref<span class="token punctuation">,</span>        delimiters<span class="token punctuation">:</span> options<span class="token punctuation">.</span>delimiters<span class="token punctuation">,</span>        comments<span class="token punctuation">:</span> options<span class="token punctuation">.</span>comments      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>      options<span class="token punctuation">.</span>render <span class="token operator">=</span> render      options<span class="token punctuation">.</span>staticRenderFns <span class="token operator">=</span> staticRenderFns      <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>performance <span class="token operator">&amp;&amp;</span> mark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">mark</span><span class="token punctuation">(</span><span class="token string">'compile end'</span><span class="token punctuation">)</span>        <span class="token function">measure</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`vue </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> compile`</span></span><span class="token punctuation">,</span> <span class="token string">'compile'</span><span class="token punctuation">,</span> <span class="token string">'compile end'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> mount<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段函数逻辑之前分析过，关于编译的入口就是在这里：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> staticRenderFns <span class="token punctuation">}</span> <span class="token operator">=</span>  <span class="token function">compileToFunctions</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> <span class="token punctuation">{</span>    shouldDecodeNewlines<span class="token punctuation">,</span>    shouldDecodeNewlinesForHref<span class="token punctuation">,</span>    delimiters<span class="token punctuation">:</span> options<span class="token punctuation">.</span>delimiters<span class="token punctuation">,</span>    comments<span class="token punctuation">:</span> options<span class="token punctuation">.</span>comments  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>render <span class="token operator">=</span> renderoptions<span class="token punctuation">.</span>staticRenderFns <span class="token operator">=</span> staticRenderFns<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>compileToFunctions</code> 方法就是把模板 <code>template</code> 编译生成 <code>render</code> 以及 <code>staticRenderFns</code>，它的定义在 <code>src/platforms/web/compiler/index.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> baseOptions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./options'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createCompiler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'compiler/index'</span><span class="token keyword">const</span> <span class="token punctuation">{</span> compile<span class="token punctuation">,</span> compileToFunctions <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">createCompiler</span><span class="token punctuation">(</span>baseOptions<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token punctuation">{</span> compile<span class="token punctuation">,</span> compileToFunctions <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>compileToFunctions</code> 方法实际上是 <code>createCompiler</code> 方法的返回值，该方法接收一个编译配置参数，接下来我们来看一下 <code>createCompiler</code> 方法的定义，在 <code>src/compiler/index.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// `createCompilerCreator` allows creating compilers that use alternative</span><span class="token comment" spellcheck="true">// parser/optimizer/codegen, e.g the SSR optimizing compiler.</span><span class="token comment" spellcheck="true">// Here we just export a default compiler using the default parts.</span><span class="token keyword">export</span> <span class="token keyword">const</span> createCompiler <span class="token operator">=</span> <span class="token function">createCompilerCreator</span><span class="token punctuation">(</span><span class="token keyword">function</span> baseCompile <span class="token punctuation">(</span>  template<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  options<span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">)</span><span class="token punctuation">:</span> CompiledResult <span class="token punctuation">{</span>  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>optimize <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">optimize</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    ast<span class="token punctuation">,</span>    render<span class="token punctuation">:</span> code<span class="token punctuation">.</span>render<span class="token punctuation">,</span>    staticRenderFns<span class="token punctuation">:</span> code<span class="token punctuation">.</span>staticRenderFns  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>createCompiler</code> 方法实际上是通过调用 <code>createCompilerCreator</code> 方法返回的，该方法传入的参数是一个函数，真正的编译过程都在这个 <code>baseCompile</code> 函数里执行，那么 <code>createCompilerCreator</code> 又是什么呢，它的定义在 <code>src/compiler/create-compiler.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> createCompilerCreator <span class="token punctuation">(</span>baseCompile<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> createCompiler <span class="token punctuation">(</span>baseOptions<span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> compile <span class="token punctuation">(</span>      template<span class="token punctuation">:</span> string<span class="token punctuation">,</span>      options<span class="token operator">?</span><span class="token punctuation">:</span> CompilerOptions    <span class="token punctuation">)</span><span class="token punctuation">:</span> CompiledResult <span class="token punctuation">{</span>      <span class="token keyword">const</span> finalOptions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>baseOptions<span class="token punctuation">)</span>      <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">const</span> tips <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      finalOptions<span class="token punctuation">.</span>warn <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> tip<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span>tip <span class="token operator">?</span> tips <span class="token punctuation">:</span> errors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// merge custom modules</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>          finalOptions<span class="token punctuation">.</span>modules <span class="token operator">=</span>            <span class="token punctuation">(</span>baseOptions<span class="token punctuation">.</span>modules <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// merge custom directives</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>directives<span class="token punctuation">)</span> <span class="token punctuation">{</span>          finalOptions<span class="token punctuation">.</span>directives <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span>            Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>baseOptions<span class="token punctuation">.</span>directives <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            options<span class="token punctuation">.</span>directives          <span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// copy other options</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token string">'modules'</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">!==</span> <span class="token string">'directives'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            finalOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> options<span class="token punctuation">[</span>key<span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> compiled <span class="token operator">=</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> finalOptions<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        errors<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> <span class="token function">detectErrors</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>ast<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      compiled<span class="token punctuation">.</span>errors <span class="token operator">=</span> errors      compiled<span class="token punctuation">.</span>tips <span class="token operator">=</span> tips      <span class="token keyword">return</span> compiled    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      compile<span class="token punctuation">,</span>      compileToFunctions<span class="token punctuation">:</span> <span class="token function">createCompileToFunctionFn</span><span class="token punctuation">(</span>compile<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到该方法返回了一个 <code>createCompiler</code> 的函数，它接收一个 <code>baseOptions</code> 的参数，返回的是一个对象，包括 <code>compile</code> 方法属性和 <code>compileToFunctions</code> 属性，这个 <code>compileToFunctions</code> 对应的就是 <code>$mount</code> 函数调用的 <code>compileToFunctions</code> 方法，它是调用 <code>createCompileToFunctionFn</code> 方法的返回值，我们接下来看一下 <code>createCompileToFunctionFn</code> 方法，它的定义在 <code>src/compiler/to-function/js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> createCompileToFunctionFn <span class="token punctuation">(</span>compile<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> compileToFunctions <span class="token punctuation">(</span>    template<span class="token punctuation">:</span> string<span class="token punctuation">,</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">,</span>    vm<span class="token operator">?</span><span class="token punctuation">:</span> Component  <span class="token punctuation">)</span><span class="token punctuation">:</span> CompiledFunctionResult <span class="token punctuation">{</span>    options <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token keyword">const</span> warn <span class="token operator">=</span> options<span class="token punctuation">.</span>warn <span class="token operator">||</span> baseWarn    <span class="token keyword">delete</span> options<span class="token punctuation">.</span>warn    <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// detect possible CSP restriction</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'return 1'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/unsafe-eval|CSP/</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">warn</span><span class="token punctuation">(</span>            <span class="token string">'It seems you are using the standalone build of Vue.js in an '</span> <span class="token operator">+</span>            <span class="token string">'environment with Content Security Policy that prohibits unsafe-eval. '</span> <span class="token operator">+</span>            <span class="token string">'The template compiler cannot work in this environment. Consider '</span> <span class="token operator">+</span>            <span class="token string">'relaxing the policy to allow unsafe-eval or pre-compiling your '</span> <span class="token operator">+</span>            <span class="token string">'templates into render functions.'</span>          <span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// check cache</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> options<span class="token punctuation">.</span>delimiters      <span class="token operator">?</span> <span class="token function">String</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>delimiters<span class="token punctuation">)</span> <span class="token operator">+</span> template      <span class="token punctuation">:</span> template    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// compile</span>    <span class="token keyword">const</span> compiled <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// check compilation errors/tips</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>errors <span class="token operator">&amp;&amp;</span> compiled<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Error compiling template:\n\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>template<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n\n`</span></span> <span class="token operator">+</span>          compiled<span class="token punctuation">.</span>errors<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>tips <span class="token operator">&amp;&amp;</span> compiled<span class="token punctuation">.</span>tips<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        compiled<span class="token punctuation">.</span>tips<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>msg <span class="token operator">=</span><span class="token operator">></span> <span class="token function">tip</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// turn code into functions</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> fnGenErrors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    res<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token function">createFunction</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>render<span class="token punctuation">,</span> fnGenErrors<span class="token punctuation">)</span>    res<span class="token punctuation">.</span>staticRenderFns <span class="token operator">=</span> compiled<span class="token punctuation">.</span>staticRenderFns<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>code <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">createFunction</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> fnGenErrors<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// check function generation errors.</span>    <span class="token comment" spellcheck="true">// this should only happen if there is a bug in the compiler itself.</span>    <span class="token comment" spellcheck="true">// mostly for codegen development use</span>    <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>compiled<span class="token punctuation">.</span>errors <span class="token operator">||</span> <span class="token operator">!</span>compiled<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> fnGenErrors<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Failed to generate render function:\n\n`</span></span> <span class="token operator">+</span>          fnGenErrors<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> err<span class="token punctuation">,</span> code <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> in\n\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此我们总算找到了 <code>compileToFunctions</code> 的最终定义，它接收 3 个参数、编译模板 <code>template</code>，编译配置 <code>options</code> 和 Vue 实例 <code>vm</code>。核心的编译过程就一行代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> compiled <span class="token operator">=</span> <span class="token function">compile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>compile</code> 函数在执行 <code>createCompileToFunctionFn</code> 的时候作为参数传入，它是 <code>createCompiler</code> 函数中定义的 <code>compile</code> 函数，如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> compile <span class="token punctuation">(</span>  template<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  options<span class="token operator">?</span><span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">)</span><span class="token punctuation">:</span> CompiledResult <span class="token punctuation">{</span>  <span class="token keyword">const</span> finalOptions <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>baseOptions<span class="token punctuation">)</span>  <span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> tips <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  finalOptions<span class="token punctuation">.</span>warn <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> tip<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span>tip <span class="token operator">?</span> tips <span class="token punctuation">:</span> errors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// merge custom modules</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">)</span> <span class="token punctuation">{</span>      finalOptions<span class="token punctuation">.</span>modules <span class="token operator">=</span>        <span class="token punctuation">(</span>baseOptions<span class="token punctuation">.</span>modules <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>modules<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// merge custom directives</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>directives<span class="token punctuation">)</span> <span class="token punctuation">{</span>      finalOptions<span class="token punctuation">.</span>directives <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span>        Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>baseOptions<span class="token punctuation">.</span>directives <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        options<span class="token punctuation">.</span>directives      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// copy other options</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token string">'modules'</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">!==</span> <span class="token string">'directives'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        finalOptions<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> options<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> compiled <span class="token operator">=</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> finalOptions<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    errors<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> <span class="token function">detectErrors</span><span class="token punctuation">(</span>compiled<span class="token punctuation">.</span>ast<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  compiled<span class="token punctuation">.</span>errors <span class="token operator">=</span> errors  compiled<span class="token punctuation">.</span>tips <span class="token operator">=</span> tips  <span class="token keyword">return</span> compiled<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>compile</code> 函数执行的逻辑是先处理配置参数，真正执行编译过程就一行代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> compiled <span class="token operator">=</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> finalOptions<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>baseCompile</code> 在执行 <code>createCompilerCreator</code> 方法时作为参数传入，如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> createCompiler <span class="token operator">=</span> <span class="token function">createCompilerCreator</span><span class="token punctuation">(</span><span class="token keyword">function</span> baseCompile <span class="token punctuation">(</span>  template<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  options<span class="token punctuation">:</span> CompilerOptions<span class="token punctuation">)</span><span class="token punctuation">:</span> CompiledResult <span class="token punctuation">{</span>  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token function">optimize</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    ast<span class="token punctuation">,</span>    render<span class="token punctuation">:</span> code<span class="token punctuation">.</span>render<span class="token punctuation">,</span>    staticRenderFns<span class="token punctuation">:</span> code<span class="token punctuation">.</span>staticRenderFns  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以编译的入口我们终于找到了，它主要就是执行了如下几个逻辑：</p><ul><li>解析模板字符串生成 AST</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>优化语法树</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token function">optimize</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>生成代码</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> code <span class="token operator">=</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么接下来的章节我会带大家去逐步分析这几个过程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>编译入口逻辑之所以这么绕，是因为 Vue.js 在不同的平台下都会有编译的过程，因此编译过程中的依赖的配置 <code>baseOptions</code> 会有所不同。而编译过程会多次执行，但这同一个平台下每一次的编译过程配置又是相同的，为了不让这些配置在每次编译过程都通过参数传入，Vue.js 利用了函数柯里化的技巧很好的实现了 <code>baseOptions</code> 的参数保留。同样，Vue.js 也是利用函数柯里化技巧把基础的编译过程函数抽出来，通过 <code>createCompilerCreator(baseCompile)</code> 的方式把真正编译的过程和其它逻辑如对编译配置处理、缓存处理等剥离开，这样的设计还是非常巧妙的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编译入口&quot;&gt;&lt;a href=&quot;#编译入口&quot; class=&quot;headerlink&quot; title=&quot;编译入口&quot;&gt;&lt;/a&gt;编译入口&lt;/h1&gt;&lt;p&gt;当我们使用 Runtime + Compiler 的 Vue.js，它的入口是 &lt;code&gt;src/platforms/we
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - 编译介绍</title>
    <link href="http://www.chenya.site/2018/05/16/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/005.%E7%BC%96%E8%AF%91/001.%E7%BC%96%E8%AF%91%E4%BB%8B%E7%BB%8D/"/>
    <id>http://www.chenya.site/2018/05/16/005.vue源码学习/005.编译/001.编译介绍/</id>
    <published>2018-05-16T03:02:18.000Z</published>
    <updated>2019-09-16T01:57:01.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>之前我们分析过模板到真实 DOM 渲染的过程，中间有一个环节是把模板编译成 <code>render</code> 函数，这个过程我们把它称作编译。</p><p>虽然我们可以直接为组件编写 <code>render</code> 函数，但是编写 <code>template</code> 模板更加直观，也更符合我们的开发习惯。</p><p>Vue.js 提供了 2 个版本，一个是 Runtime + Compiler 的，一个是 Runtime only 的，前者是包含编译代码的，可以把编译过程放在运行时做，后者是不包含编译代码的，需要借助 webpack 的 <code>vue-loader</code> 事先把模板编译成 <code>render</code>函数。</p><p>这一章我们就来分析编译的过程，对编译过程的了解会让我们对 Vue 的指令、内置组件等有更好的理解。不过由于编译的过程是一个相对复杂的过程，我们只要求理解整体的流程、输入和输出即可，对于细节我们不必抠太细。有些细节比如对于 <code>slot</code> 的处理我们可以在之后去分析插槽实现的时候再详细分析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h1&gt;&lt;p&gt;之前我们分析过模板到真实 DOM 渲染的过程，中间有一个环节是把模板编译成 &lt;code&gt;render&lt;/code&gt; 函数，这个过程我们把它称
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - 原理图</title>
    <link href="http://www.chenya.site/2018/05/12/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/004.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/009.%E5%8E%9F%E7%90%86%E5%9B%BE/"/>
    <id>http://www.chenya.site/2018/05/12/005.vue源码学习/004.响应式原理/009.原理图/</id>
    <published>2018-05-12T03:26:42.000Z</published>
    <updated>2019-09-16T01:57:01.506Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/reactive.png" alt="原理图" title="原理图">                </div>                <div class="image-caption">原理图</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - 组件更新</title>
    <link href="http://www.chenya.site/2018/04/22/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/004.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/008.%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0/"/>
    <id>http://www.chenya.site/2018/04/22/005.vue源码学习/004.响应式原理/008.组件更新/</id>
    <published>2018-04-22T02:59:10.000Z</published>
    <updated>2019-09-16T01:57:01.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件更新"><a href="#组件更新" class="headerlink" title="组件更新"></a>组件更新</h1><p>在组件化章节，我们介绍了 Vue 的组件化实现过程，不过我们只讲了 Vue 组件的创建过程，并没有涉及到组件数据发生变化，更新组件的过程。而通过我们这一章对数据响应式原理的分析，了解到当数据发生变化的时候，会触发渲染 <code>watcher</code> 的回调函数，进而执行组件的更新过程，接下来我们来详细分析这一过程。</p><pre class="line-numbers language-js"><code class="language-js">updateComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> <span class="token punctuation">{</span>  before <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* isRenderWatcher */</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件的更新还是调用了 <code>vm._update</code> 方法，我们再回顾一下这个方法，它的定义在 <code>src/core/instance/lifecycle.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_update <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">:</span> VNode<span class="token punctuation">,</span> hydrating<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">const</span> prevVnode <span class="token operator">=</span> vm<span class="token punctuation">.</span>_vnode  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prevVnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// initial render</span>    vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">__patch__</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> hydrating<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">/* removeOnly */</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// updates</span>    vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">__patch__</span><span class="token punctuation">(</span>prevVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件更新的过程，会执行 <code>vm.$el = vm.__patch__(prevVnode, vnode)</code>，它仍然会调用 <code>patch</code> 函数，在 <code>src/core/vdom/patch.js</code> 中定义：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">return</span> <span class="token keyword">function</span> patch <span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> hydrating<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">invokeDestroyHook</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> isInitialPatch <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">const</span> insertedVnodeQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// empty mount (likely as component), create new root element</span>    isInitialPatch <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> isRealElement <span class="token operator">=</span> <span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRealElement <span class="token operator">&amp;&amp;</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// patch existing root node</span>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isRealElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// ...</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// replacing existing element</span>      <span class="token keyword">const</span> oldElm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm      <span class="token keyword">const</span> parentElm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// create new node</span>      <span class="token function">createElm</span><span class="token punctuation">(</span>        vnode<span class="token punctuation">,</span>        insertedVnodeQueue<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// extremely rare edge case: do not insert if old element is in a</span>        <span class="token comment" spellcheck="true">// leaving transition. Only happens when combining transition +</span>        <span class="token comment" spellcheck="true">// keep-alive + HOCs. (#4590)</span>        oldElm<span class="token punctuation">.</span>_leaveCb <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> parentElm<span class="token punctuation">,</span>        nodeOps<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span>      <span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// update parent placeholder node element, recursively</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> ancestor <span class="token operator">=</span> vnode<span class="token punctuation">.</span>parent        <span class="token keyword">const</span> patchable <span class="token operator">=</span> <span class="token function">isPatchable</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>destroy<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cbs<span class="token punctuation">.</span>destroy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span>          <span class="token punctuation">}</span>          ancestor<span class="token punctuation">.</span>elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>elm          <span class="token keyword">if</span> <span class="token punctuation">(</span>patchable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>create<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>              cbs<span class="token punctuation">.</span>create<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> ancestor<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// #6513</span>            <span class="token comment" spellcheck="true">// invoke insert hooks that may have been merged by create hooks.</span>            <span class="token comment" spellcheck="true">// e.g. for directives that uses the "inserted" hook.</span>            <span class="token keyword">const</span> insert <span class="token operator">=</span> ancestor<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hook<span class="token punctuation">.</span>insert            <span class="token keyword">if</span> <span class="token punctuation">(</span>insert<span class="token punctuation">.</span>merged<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// start at index 1 to avoid re-invoking component mounted hook</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> insert<span class="token punctuation">.</span>fns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                insert<span class="token punctuation">.</span>fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">registerRef</span><span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span>          <span class="token punctuation">}</span>          ancestor <span class="token operator">=</span> ancestor<span class="token punctuation">.</span>parent        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// destroy old node</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">removeVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> <span class="token punctuation">[</span>oldVnode<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">invokeDestroyHook</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">invokeInsertHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> isInitialPatch<span class="token punctuation">)</span>  <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里执行 <code>patch</code> 的逻辑和首次渲染是不一样的，因为 <code>oldVnode</code> 不为空，并且它和 <code>vnode</code> 都是 VNode 类型，接下来会通过 <code>sameVNode(oldVnode, vnode)</code> 判断它们是否是相同的 VNode 来决定走不同的更新逻辑：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> sameVnode <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    a<span class="token punctuation">.</span>key <span class="token operator">===</span> b<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>      <span class="token punctuation">(</span>        a<span class="token punctuation">.</span>tag <span class="token operator">===</span> b<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span>        a<span class="token punctuation">.</span>isComment <span class="token operator">===</span> b<span class="token punctuation">.</span>isComment <span class="token operator">&amp;&amp;</span>        <span class="token function">isDef</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">isDef</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token function">sameInputType</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>        <span class="token function">isTrue</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>isAsyncPlaceholder<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        a<span class="token punctuation">.</span>asyncFactory <span class="token operator">===</span> b<span class="token punctuation">.</span>asyncFactory <span class="token operator">&amp;&amp;</span>        <span class="token function">isUndef</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>asyncFactory<span class="token punctuation">.</span>error<span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sameVnode</code> 的逻辑非常简单，如果两个 <code>vnode</code> 的 <code>key</code> 不相等，则是不同的；否则继续判断对于同步组件，则判断 <code>isComment</code>、<code>data</code>、<code>input</code> 类型等是否相同，对于异步组件，则判断 <code>asyncFactory</code> 是否相同。</p><p>所以根据新旧 <code>vnode</code> 是否为 <code>sameVnode</code>，会走到不同的更新逻辑，我们先来说一下不同的情况。</p><h2 id="新旧节点不同"><a href="#新旧节点不同" class="headerlink" title="新旧节点不同"></a>新旧节点不同</h2><p>如果新旧 <code>vnode</code> 不同，那么更新的逻辑非常简单，它本质上是要替换已存在的节点，大致分为 3 步</p><ul><li>创建新节点</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> oldElm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm<span class="token keyword">const</span> parentElm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// create new node</span><span class="token function">createElm</span><span class="token punctuation">(</span>  vnode<span class="token punctuation">,</span>  insertedVnodeQueue<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// extremely rare edge case: do not insert if old element is in a</span>  <span class="token comment" spellcheck="true">// leaving transition. Only happens when combining  transition +</span>  <span class="token comment" spellcheck="true">// keep-alive + HOCs. (#4590)</span>  oldElm<span class="token punctuation">.</span>_leaveCb <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> parentElm<span class="token punctuation">,</span>  nodeOps<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以当前旧节点为参考节点，创建新的节点，并插入到 DOM 中，<code>createElm</code> 的逻辑我们之前分析过。</p><ul><li>更新父的占位符节点</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// update parent placeholder node element, recursively</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> ancestor <span class="token operator">=</span> vnode<span class="token punctuation">.</span>parent  <span class="token keyword">const</span> patchable <span class="token operator">=</span> <span class="token function">isPatchable</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>destroy<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cbs<span class="token punctuation">.</span>destroy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ancestor<span class="token punctuation">.</span>elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>elm    <span class="token keyword">if</span> <span class="token punctuation">(</span>patchable<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>create<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cbs<span class="token punctuation">.</span>create<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>emptyNode<span class="token punctuation">,</span> ancestor<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// #6513</span>      <span class="token comment" spellcheck="true">// invoke insert hooks that may have been merged by create hooks.</span>      <span class="token comment" spellcheck="true">// e.g. for directives that uses the "inserted" hook.</span>      <span class="token keyword">const</span> insert <span class="token operator">=</span> ancestor<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hook<span class="token punctuation">.</span>insert      <span class="token keyword">if</span> <span class="token punctuation">(</span>insert<span class="token punctuation">.</span>merged<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// start at index 1 to avoid re-invoking component mounted hook</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> insert<span class="token punctuation">.</span>fns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          insert<span class="token punctuation">.</span>fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">registerRef</span><span class="token punctuation">(</span>ancestor<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    ancestor <span class="token operator">=</span> ancestor<span class="token punctuation">.</span>parent  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们只关注主要逻辑即可，找到当前 <code>vnode</code> 的父的占位符节点，先执行各个 <code>module</code> 的 <code>destroy</code> 的钩子函数，如果当前占位符是一个可挂载的节点，则执行 <code>module</code> 的 <code>create</code> 钩子函数。对于这些钩子函数的作用，在之后的章节会详细介绍。</p><ul><li>删除旧节点</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// destroy old node</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">removeVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> <span class="token punctuation">[</span>oldVnode<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">invokeDestroyHook</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把 <code>oldVnode</code> 从当前 DOM 树中删除，如果父节点存在，则执行 <code>removeVnodes</code> 方法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> removeVnodes <span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnodes<span class="token punctuation">,</span> startIdx<span class="token punctuation">,</span> endIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> startIdx <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">;</span> <span class="token operator">++</span>startIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> ch <span class="token operator">=</span> vnodes<span class="token punctuation">[</span>startIdx<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">removeAndInvokeRemoveHook</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        <span class="token function">invokeDestroyHook</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Text node</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> removeAndInvokeRemoveHook <span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rm<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>rm<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> i    <span class="token keyword">const</span> listeners <span class="token operator">=</span> cbs<span class="token punctuation">.</span>remove<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>rm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// we have a recursively passed down rm callback</span>      <span class="token comment" spellcheck="true">// increase the listeners count</span>      rm<span class="token punctuation">.</span>listeners <span class="token operator">+</span><span class="token operator">=</span> listeners    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// directly removing</span>      rm <span class="token operator">=</span> <span class="token function">createRmCb</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// recursively invoke hooks on child component root node</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentInstance<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">removeAndInvokeRemoveHook</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> rm<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>remove<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cbs<span class="token punctuation">.</span>remove<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rm<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>remove<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">i</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> rm<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">rm</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">removeNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> invokeDestroyHook <span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i<span class="token punctuation">,</span> j  <span class="token keyword">const</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>destroy<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">i</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>destroy<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cbs<span class="token punctuation">.</span>destroy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">invokeDestroyHook</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除节点逻辑很简单，就是遍历待删除的 <code>vnodes</code> 做删除，其中 <code>removeAndInvokeRemoveHook</code>  的作用是从 DOM 中移除节点并执行 <code>module</code> 的 <code>remove</code> 钩子函数，并对它的子节点递归调用 <code>removeAndInvokeRemoveHook</code> 函数；<code>invokeDestroyHook</code> 是执行 <code>module</code> 的 <code>destory</code> 钩子函数以及 <code>vnode</code> 的 <code>destory</code> 钩子函数，并对它的子 <code>vnode</code> 递归调用 <code>invokeDestroyHook</code> 函数；<code>removeNode</code> 就是调用平台的 DOM API 去把真正的 DOM 节点移除。</p><p>在之前介绍组件生命周期的时候提到 <code>beforeDestroy &amp; destroyed</code> 这两个生命周期钩子函数，它们就是在执行 <code>invokeDestroyHook</code> 过程中，执行了 <code>vnode</code> 的 <code>destory</code> 钩子函数，它的定义在 <code>src/core/vdom/create-component.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> componentVNodeHooks <span class="token operator">=</span> <span class="token punctuation">{</span>  destroy <span class="token punctuation">(</span>vnode<span class="token punctuation">:</span> MountedComponentVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> componentInstance <span class="token punctuation">}</span> <span class="token operator">=</span> vnode    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>componentInstance<span class="token punctuation">.</span>_isDestroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>keepAlive<span class="token punctuation">)</span> <span class="token punctuation">{</span>        componentInstance<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">deactivateChildComponent</span><span class="token punctuation">(</span>componentInstance<span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* direct */</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当组件并不是 <code>keepAlive</code> 的时候，会执行 <code>componentInstance.$destroy()</code> 方法，然后就会执行 <code>beforeDestroy &amp; destroyed</code> 两个钩子函数。</p><h2 id="新旧节点相同"><a href="#新旧节点相同" class="headerlink" title="新旧节点相同"></a>新旧节点相同</h2><p>对于新旧节点不同的情况，这种创建新节点 -&gt; 更新占位符节点 -&gt; 删除旧节点的逻辑是很容易理解的。还有一种组件 <code>vnode</code> 的更新情况是新旧节点相同，它会调用 <code>patchVNode</code> 方法，它的定义在 <code>src/core/vdom/patch.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> patchVnode <span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode <span class="token operator">===</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>isAsyncPlaceholder<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>asyncFactory<span class="token punctuation">.</span>resolved<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">hydrate</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      vnode<span class="token punctuation">.</span>isAsyncPlaceholder <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// reuse element for static trees.</span>  <span class="token comment" spellcheck="true">// note we only do this if the vnode is cloned -</span>  <span class="token comment" spellcheck="true">// if the new node is not cloned it means the render functions have been</span>  <span class="token comment" spellcheck="true">// reset by the hot-reload-api and we need to do a proper re-render.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    <span class="token function">isTrue</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>isStatic<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    vnode<span class="token punctuation">.</span>key <span class="token operator">===</span> oldVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span><span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isCloned<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>isOnce<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>componentInstance    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> i  <span class="token keyword">const</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>prepatch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> oldCh <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children  <span class="token keyword">const</span> ch <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPatchable</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCh <span class="token operator">!==</span> ch<span class="token punctuation">)</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>      <span class="token function">addVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">removeVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>postpatch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>patchVnode</code> 的作用就是把新的 <code>vnode</code> <code>patch</code> 到旧的 <code>vnode</code> 上，这里我们只关注关键的核心逻辑，我把它拆成四步骤：</p><ul><li>执行 <code>prepatch</code> 钩子函数</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> i<span class="token keyword">const</span> data <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>prepatch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当更新的 <code>vnode</code> 是一个组件 <code>vnode</code> 的时候，会执行 <code>prepatch</code> 的方法，它的定义在 <code>src/core/vdom/create-component.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> componentVNodeHooks <span class="token operator">=</span> <span class="token punctuation">{</span>  prepatch <span class="token punctuation">(</span>oldVnode<span class="token punctuation">:</span> MountedComponentVNode<span class="token punctuation">,</span> vnode<span class="token punctuation">:</span> MountedComponentVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentOptions    <span class="token keyword">const</span> child <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>componentInstance    <span class="token function">updateChildComponent</span><span class="token punctuation">(</span>      child<span class="token punctuation">,</span>      options<span class="token punctuation">.</span>propsData<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// updated props</span>      options<span class="token punctuation">.</span>listeners<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// updated listeners</span>      vnode<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// new parent vnode</span>      options<span class="token punctuation">.</span>children <span class="token comment" spellcheck="true">// new children</span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>prepatch</code> 方法就是拿到新的 <code>vnode</code> 的组件配置以及组件实例，去执行 <code>updateChildComponent</code> 方法，它的定义在 <code>src/core/instance/lifecycle.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> updateChildComponent <span class="token punctuation">(</span>  vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>  propsData<span class="token punctuation">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>  listeners<span class="token punctuation">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>  parentVnode<span class="token punctuation">:</span> MountedComponentVNode<span class="token punctuation">,</span>  renderChildren<span class="token punctuation">:</span> <span class="token operator">?</span>Array<span class="token operator">&lt;</span>VNode<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    isUpdatingChildComponent <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// determine whether component has slot children</span>  <span class="token comment" spellcheck="true">// we need to do this before overwriting $options._renderChildren</span>  <span class="token keyword">const</span> hasChildren <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>    renderChildren <span class="token operator">||</span>               <span class="token comment" spellcheck="true">// has new static slots</span>    vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_renderChildren <span class="token operator">||</span>  <span class="token comment" spellcheck="true">// has old static slots</span>    parentVnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>scopedSlots <span class="token operator">||</span> <span class="token comment" spellcheck="true">// has new scoped slots</span>    vm<span class="token punctuation">.</span>$scopedSlots <span class="token operator">!==</span> emptyObject <span class="token comment" spellcheck="true">// has old scoped slots</span>  <span class="token punctuation">)</span>  vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_parentVnode <span class="token operator">=</span> parentVnode  vm<span class="token punctuation">.</span>$vnode <span class="token operator">=</span> parentVnode <span class="token comment" spellcheck="true">// update vm's placeholder node without re-render</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// update child tree's parent</span>    vm<span class="token punctuation">.</span>_vnode<span class="token punctuation">.</span>parent <span class="token operator">=</span> parentVnode  <span class="token punctuation">}</span>  vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_renderChildren <span class="token operator">=</span> renderChildren  <span class="token comment" spellcheck="true">// update $attrs and $listeners hash</span>  <span class="token comment" spellcheck="true">// these are also reactive so they may trigger child update if the child</span>  <span class="token comment" spellcheck="true">// used them during render</span>  vm<span class="token punctuation">.</span>$attrs <span class="token operator">=</span> parentVnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>attrs <span class="token operator">||</span> emptyObject  vm<span class="token punctuation">.</span>$listeners <span class="token operator">=</span> listeners <span class="token operator">||</span> emptyObject  <span class="token comment" spellcheck="true">// update props</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>propsData <span class="token operator">&amp;&amp;</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> props <span class="token operator">=</span> vm<span class="token punctuation">.</span>_props    <span class="token keyword">const</span> propKeys <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_propKeys <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> propKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> key <span class="token operator">=</span> propKeys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">const</span> propOptions<span class="token punctuation">:</span> any <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props <span class="token comment" spellcheck="true">// wtf flow?</span>      props<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">validateProp</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> propOptions<span class="token punctuation">,</span> propsData<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">toggleObserving</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// keep a copy of raw propsData</span>    vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>propsData <span class="token operator">=</span> propsData  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// update listeners</span>  listeners <span class="token operator">=</span> listeners <span class="token operator">||</span> emptyObject  <span class="token keyword">const</span> oldListeners <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_parentListeners  vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_parentListeners <span class="token operator">=</span> listeners  <span class="token function">updateComponentListeners</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> oldListeners<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// resolve slots + force update if has children</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm<span class="token punctuation">.</span>$slots <span class="token operator">=</span> <span class="token function">resolveSlots</span><span class="token punctuation">(</span>renderChildren<span class="token punctuation">,</span> parentVnode<span class="token punctuation">.</span>context<span class="token punctuation">)</span>    vm<span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    isUpdatingChildComponent <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>updateChildComponent</code> 的逻辑也非常简单，由于更新了 <code>vnode</code>，那么 <code>vnode</code> 对应的实例 <code>vm</code> 的一系列属性也会发生变化，包括占位符 <code>vm.$vnode</code> 的更新、<code>slot</code> 的更新，<code>listeners</code> 的更新，<code>props</code> 的更新等等。 </p><ul><li>执行 <code>update</code> 钩子函数</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPatchable</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>回到 <code>patchVNode</code> 函数，在执行完新的 <code>vnode</code> 的 <code>prepatch</code> 钩子函数，会执行所有 <code>module</code> 的 <code>update</code> 钩子函数以及用户自定义 <code>update</code> 钩子函数，对于 <code>module</code> 的钩子函数，之后我们会有具体的章节针对一些具体的 case 分析。</p><ul><li>完成 <code>patch</code> 过程</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> oldCh <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children<span class="token keyword">const</span> ch <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPatchable</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cbs<span class="token punctuation">.</span>update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCh <span class="token operator">!==</span> ch<span class="token punctuation">)</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token function">addVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">removeVnodes</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>  nodeOps<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>elm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 <code>vnode</code> 是个文本节点且新旧文本不相同，则直接替换文本内容。如果不是文本节点，则判断它们的子节点，并分了几种情况处理：</p><ol><li><code>oldCh</code> 与 <code>ch</code> 都存在且不相同时，使用 <code>updateChildren</code> 函数来更新子节点，这个后面重点讲。</li></ol><p>2.如果只有 <code>ch</code> 存在，表示旧节点不需要了。如果旧的节点是文本节点则先将节点的文本清除，然后通过 <code>addVnodes</code> 将 <code>ch</code> 批量插入到新节点 <code>elm</code> 下。</p><p>3.如果只有 <code>oldCh</code> 存在，表示更新的是空节点，则需要将旧的节点通过 <code>removeVnodes</code> 全部清除。</p><p>4.当只有旧节点是文本节点的时候，则清除其节点文本内容。</p><ul><li>执行 <code>postpatch</code> 钩子函数</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> data<span class="token punctuation">.</span>hook<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>postpatch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">i</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再执行完 <code>patch</code> 过程后，会执行 <code>postpatch</code> 钩子函数，它是组件自定义的钩子函数，有则执行。</p><p>那么在整个 <code>pathVnode</code> 过程中，最复杂的就是 <code>updateChildren</code> 方法了，下面我们来单独介绍它。</p><h2 id="updateChildren"><a href="#updateChildren" class="headerlink" title="updateChildren"></a>updateChildren</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> updateChildren <span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> oldStartIdx <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> newStartIdx <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> oldEndIdx <span class="token operator">=</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>  <span class="token keyword">let</span> oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>oldEndIdx<span class="token punctuation">]</span>  <span class="token keyword">let</span> newEndIdx <span class="token operator">=</span> newCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>  <span class="token keyword">let</span> newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newEndIdx<span class="token punctuation">]</span>  <span class="token keyword">let</span> oldKeyToIdx<span class="token punctuation">,</span> idxInOld<span class="token punctuation">,</span> vnodeToMove<span class="token punctuation">,</span> refElm  <span class="token comment" spellcheck="true">// removeOnly is a special flag used only by &lt;transition-group></span>  <span class="token comment" spellcheck="true">// to ensure removed elements stay in correct relative positions</span>  <span class="token comment" spellcheck="true">// during leaving transitions</span>  <span class="token keyword">const</span> canMove <span class="token operator">=</span> <span class="token operator">!</span>removeOnly  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkDuplicateKeys</span><span class="token punctuation">(</span>newCh<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx <span class="token operator">&amp;&amp;</span> newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// Vnode has been moved left</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span>      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>      newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Vnode moved right</span>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>      canMove <span class="token operator">&amp;&amp;</span> nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> nodeOps<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">)</span>      oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span>      newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Vnode moved left</span>      <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>      canMove <span class="token operator">&amp;&amp;</span> nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>      oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span>      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldKeyToIdx<span class="token punctuation">)</span><span class="token punctuation">)</span> oldKeyToIdx <span class="token operator">=</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span>      idxInOld <span class="token operator">=</span> <span class="token function">isDef</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">)</span>        <span class="token operator">?</span> oldKeyToIdx<span class="token punctuation">[</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">]</span>        <span class="token punctuation">:</span> <span class="token function">findIdxInOld</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>idxInOld<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// New element</span>        <span class="token function">createElm</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newStartIdx<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        vnodeToMove <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>vnodeToMove<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">patchVnode</span><span class="token punctuation">(</span>vnodeToMove<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>          oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span> <span class="token operator">=</span> undefined          canMove <span class="token operator">&amp;&amp;</span> nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnodeToMove<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// same key but different element. treat as new element</span>          <span class="token function">createElm</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newStartIdx<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">></span> oldEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    refElm <span class="token operator">=</span> <span class="token function">isUndef</span><span class="token punctuation">(</span>newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elm    <span class="token function">addVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newStartIdx<span class="token punctuation">,</span> newEndIdx<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIdx <span class="token operator">></span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">removeVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>updateChildren</code> 的逻辑比较复杂，直接读源码比较晦涩，我们可以通过一个具体的示例来分析它。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in items"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"item.id"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item<span class="token punctuation">.</span>val <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">></span>change<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        items<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token string">'B'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token string">'C'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token string">'D'</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token string">'E'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们点击 <code>change</code> 按钮去改变数据，最终会执行到 <code>updateChildren</code> 去更新 <code>li</code> 部分的列表数据，我们通过图的方式来描述一下它的更新过程：</p><p>第一步：<br><!-- <img :src="$withBase('/assets/update-children-1.png')"> --><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/update-children-1.png" alt="第一步" title="第一步">                </div>                <div class="image-caption">第一步</div>            </figure><br>第二步：<br><!-- <img :src="$withBase('/assets/update-children-2.png')"> --><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/update-children-2.png" alt="第二步" title="第二步">                </div>                <div class="image-caption">第二步</div>            </figure><br>第三步：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/update-children-3.png" alt="第三步" title="第三步">                </div>                <div class="image-caption">第三步</div>            </figure></p><p>第四步：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/update-children-4.png" alt="第四步" title="第四步">                </div>                <div class="image-caption">第四步</div>            </figure></p><p>第五步：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/update-children-5.png" alt="第五步" title="第五步">                </div>                <div class="image-caption">第五步</div>            </figure></p><p>第六步：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/update-children-6.png" alt="第六步" title="第六步">                </div>                <div class="image-caption">第六步</div>            </figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>组件更新的过程核心就是新旧 vnode diff，对新旧节点相同以及不同的情况分别做不同的处理。新旧节点不同的更新流程是创建新节点-&gt;更新父占位符节点-&gt;删除旧节点；而新旧节点相同的更新流程是去获取它们的 children，根据不同情况做不同的更新逻辑。最复杂的情况是新旧节点相同且它们都存在子节点，那么会执行 <code>updateChildren</code> 逻辑，这块儿可以借助画图的方式配合理解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件更新&quot;&gt;&lt;a href=&quot;#组件更新&quot; class=&quot;headerlink&quot; title=&quot;组件更新&quot;&gt;&lt;/a&gt;组件更新&lt;/h1&gt;&lt;p&gt;在组件化章节，我们介绍了 Vue 的组件化实现过程，不过我们只讲了 Vue 组件的创建过程，并没有涉及到组件数据发生变化，更
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - 计算属性 VS 侦听属性</title>
    <link href="http://www.chenya.site/2018/04/16/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/004.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/007.%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%20VS%20%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7/"/>
    <id>http://www.chenya.site/2018/04/16/005.vue源码学习/004.响应式原理/007.计算属性 VS 侦听属性/</id>
    <published>2018-04-16T03:39:54.000Z</published>
    <updated>2019-09-16T01:57:01.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算属性-VS-侦听属性"><a href="#计算属性-VS-侦听属性" class="headerlink" title="计算属性 VS 侦听属性"></a>计算属性 VS 侦听属性</h1><p>Vue 的组件对象支持了计算属性 <code>computed</code> 和侦听属性 <code>watch</code> 2 个选项，很多同学不了解什么时候该用 <code>computed</code> 什么时候该用 <code>watch</code>。先不回答这个问题，我们接下来从源码实现的角度来分析它们两者有什么区别。</p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a><code>computed</code></h2><p>计算属性的初始化是发生在 Vue 实例初始化阶段的 <code>initState</code> 函数中，执行了 <code>if (opts.computed) initComputed(vm, opts.computed)</code>，<code>initComputed</code> 的定义在 <code>src/core/instance/state.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> computedWatcherOptions <span class="token operator">=</span> <span class="token punctuation">{</span> computed<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token keyword">function</span> initComputed <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> computed<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// $flow-disable-line</span>  <span class="token keyword">const</span> watchers <span class="token operator">=</span> vm<span class="token punctuation">.</span>_computedWatchers <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// computed properties are just getters during SSR</span>  <span class="token keyword">const</span> isSSR <span class="token operator">=</span> <span class="token function">isServerRendering</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> userDef <span class="token operator">=</span> computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">const</span> getter <span class="token operator">=</span> <span class="token keyword">typeof</span> userDef <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">?</span> userDef <span class="token punctuation">:</span> userDef<span class="token punctuation">.</span><span class="token keyword">get</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> getter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">warn</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token string">`Getter is missing for computed property "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">".`</span></span><span class="token punctuation">,</span>        vm      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSSR<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// create internal watcher for the computed property.</span>      watchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>        vm<span class="token punctuation">,</span>        getter <span class="token operator">||</span> noop<span class="token punctuation">,</span>        noop<span class="token punctuation">,</span>        computedWatcherOptions      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// component-defined computed properties are already defined on the</span>    <span class="token comment" spellcheck="true">// component prototype. We only need to define computed properties defined</span>    <span class="token comment" spellcheck="true">// at instantiation here.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> vm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">defineComputed</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> userDef<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> vm<span class="token punctuation">.</span>$data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`The computed property "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" is already defined in data.`</span></span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`The computed property "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" is already defined as a prop.`</span></span><span class="token punctuation">,</span> vm<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数首先创建 <code>vm._computedWatchers</code> 为一个空对象，接着对 <code>computed</code> 对象做遍历，拿到计算属性的每一个 <code>userDef</code>，然后尝试获取这个 <code>userDef</code> 对应的 <code>getter</code> 函数，拿不到则在开发环境下报警告。接下来为每一个 <code>getter</code> 创建一个 <code>watcher</code>，这个 <code>watcher</code> 和渲染 <code>watcher</code> 有一点很大的不同，它是一个 <code>computed watcher</code>，因为 <code>const computedWatcherOptions = { computed: true }</code>。<code>computed watcher</code> 和普通 <code>watcher</code> 的差别我稍后会介绍。最后对判断如果 <code>key</code> 不是 <code>vm</code> 的属性，则调用 <code>defineComputed(vm, key, userDef)</code>，否则判断计算属性对于的 <code>key</code> 是否已经被 <code>data</code> 或者 <code>prop</code> 所占用，如果是的话则在开发环境报相应的警告。</p><p> 那么接下来需要重点关注 <code>defineComputed</code> 的实现：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> defineComputed <span class="token punctuation">(</span>  target<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  userDef<span class="token punctuation">:</span> Object <span class="token operator">|</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> shouldCache <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">isServerRendering</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> userDef <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> shouldCache      <span class="token operator">?</span> <span class="token function">createComputedGetter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token punctuation">:</span> userDef    sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> noop  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> userDef<span class="token punctuation">.</span><span class="token keyword">get</span>      <span class="token operator">?</span> shouldCache <span class="token operator">&amp;&amp;</span> userDef<span class="token punctuation">.</span>cache <span class="token operator">!==</span> <span class="token boolean">false</span>        <span class="token operator">?</span> <span class="token function">createComputedGetter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token punctuation">:</span> userDef<span class="token punctuation">.</span><span class="token keyword">get</span>      <span class="token punctuation">:</span> noop    sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> userDef<span class="token punctuation">.</span><span class="token keyword">set</span>      <span class="token operator">?</span> userDef<span class="token punctuation">.</span><span class="token keyword">set</span>      <span class="token punctuation">:</span> noop  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>      sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">===</span> noop<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sharedPropertyDefinition<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">warn</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token string">`Computed property "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" was assigned to but it has no setter.`</span></span><span class="token punctuation">,</span>        <span class="token keyword">this</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> sharedPropertyDefinition<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段逻辑很简单，其实就是利用 <code>Object.defineProperty</code> 给计算属性对应的 <code>key</code> 值添加 getter 和 setter，setter 通常是计算属性是一个对象，并且拥有 <code>set</code> 方法的时候才有，否则是一个空函数。在平时的开发场景中，计算属性有 setter 的情况比较少，我们重点关注一下 getter 部分，缓存的配置也先忽略，最终 getter 对应的是 <code>createComputedGetter(key)</code> 的返回值，来看一下它的定义：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> createComputedGetter <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> computedGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_computedWatchers<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      watcher<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> watcher<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>createComputedGetter</code> 返回一个函数 <code>computedGetter</code>，它就是计算属性对应的 getter。</p><p>整个计算属性的初始化过程到此结束，我们知道计算属性是一个 <code>computed watcher</code>，它和普通的 <code>watcher</code> 有什么区别呢，为了更加直观，接下来来我们来通过一个例子来分析 <code>computed watcher</code> 的实现。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">'Bar'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fullName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当初始化这个 <code>computed watcher</code> 实例的时候，构造函数部分逻辑稍有不同：</p><pre class="line-numbers language-js"><code class="language-js">constructor <span class="token punctuation">(</span>  vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>  expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>  cb<span class="token punctuation">:</span> Function<span class="token punctuation">,</span>  options<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>  isRenderWatcher<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> undefined    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现 <code>computed watcher</code> 会并不会立刻求值，同时持有一个 <code>dep</code> 实例。</p><p>然后当我们的 <code>render</code> 函数执行访问到 <code>this.fullName</code> 的时候，就触发了计算属性的 <code>getter</code>，它会拿到计算属性对应的 <code>watcher</code>，然后执行 <code>watcher.depend()</code>，来看一下它的定义：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**  * Depend on this watcher. Only for computed property watchers.  */</span>depend <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">&amp;&amp;</span> Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这时候的 <code>Dep.target</code> 是渲染 <code>watcher</code>，所以 <code>this.dep.depend()</code> 相当于渲染 <code>watcher</code> 订阅了这个 <code>computed watcher</code> 的变化。</p><p>然后再执行 <code>watcher.evaluate()</code> 去求值，来看一下它的定义：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**  * Evaluate and return the value of the watcher.  * This only gets called for computed property watchers.  */</span>evaluate <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>evaluate</code> 的逻辑非常简单，判断 <code>this.dirty</code>，如果为 <code>true</code> 则通过 <code>this.get()</code> 求值，然后把 <code>this.dirty</code> 设置为 false。在求值过程中，会执行 <code>value = this.getter.call(vm, vm)</code>，这实际上就是执行了计算属性定义的 <code>getter</code> 函数，在我们这个例子就是执行了 <code>return this.firstName + &#39; &#39; + this.lastName</code>。</p><p>这里需要特别注意的是，由于 <code>this.firstName</code> 和 <code>this.lastName</code> 都是响应式对象，这里会触发它们的 getter，根据我们之前的分析，它们会把自身持有的 <code>dep</code> 添加到当前正在计算的 <code>watcher</code> 中，这个时候 <code>Dep.target</code> 就是这个 <code>computed watcher</code>。</p><p>最后通过 <code>return this.value</code> 拿到计算属性对应的值。我们知道了计算属性的求值过程，那么接下来看一下它依赖的数据变化后的逻辑。</p><p>一旦我们对计算属性依赖的数据做修改，则会触发 setter 过程，通知所有订阅它变化的 <code>watcher</code> 更新，执行 <code>watcher.update()</code> 方法：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* istanbul ignore else */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// A computed property watcher has two modes: lazy and activated.</span>  <span class="token comment" spellcheck="true">// It initializes as lazy by default, and only becomes activated when</span>  <span class="token comment" spellcheck="true">// it is depended on by at least one subscriber, which is typically</span>  <span class="token comment" spellcheck="true">// another computed property or a component's render function.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">.</span>subs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// In lazy mode, we don't want to perform computations until necessary,</span>    <span class="token comment" spellcheck="true">// so we simply mark the watcher as dirty. The actual computation is</span>    <span class="token comment" spellcheck="true">// performed just-in-time in this.evaluate() when the computed property</span>    <span class="token comment" spellcheck="true">// is accessed.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// In activated mode, we want to proactively perform the computation</span>    <span class="token comment" spellcheck="true">// but only notify our subscribers when the value has indeed changed.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAndInvoke</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token function">queueWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么对于计算属性这样的 <code>computed watcher</code>，它实际上是有 2 种模式，lazy 和 active。如果 <code>this.dep.subs.length === 0</code> 成立，则说明没有人去订阅这个 <code>computed watcher</code> 的变化，仅仅把 <code>this.dirty = true</code>，只有当下次再访问这个计算属性的时候才会重新求值。在我们的场景下，渲染 <code>watcher</code> 订阅了这个 <code>computed watcher</code> 的变化，那么它会执行：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAndInvoke</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>getAndInvoke <span class="token punctuation">(</span>cb<span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    value <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">||</span>    <span class="token comment" spellcheck="true">// Deep watchers and watchers on Object/Arrays should fire even</span>    <span class="token comment" spellcheck="true">// when the value is the same, because the value may</span>    <span class="token comment" spellcheck="true">// have mutated.</span>    <span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>deep  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// set new value</span>    <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`callback for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>getAndInvoke</code> 函数会重新计算，然后对比新旧值，如果变化了则执行回调函数，那么这里这个回调函数是 <code>this.dep.notify()</code>，在我们这个场景下就是触发了渲染 <code>watcher</code> 重新渲染。</p><p>通过以上的分析，我们知道计算属性本质上就是一个 <code>computed watcher</code>，也了解了它的创建过程和被访问触发 getter 以及依赖更新的过程，其实这是最新的计算属性的实现，之所以这么设计是因为 Vue 想确保不仅仅是计算属性依赖的值发生变化，而是当计算属性最终计算的值发生变化才会触发渲染 <code>watcher</code> 重新渲染，本质上是一种优化。</p><p>接下来我们来分析一下侦听属性 <code>watch</code> 是怎么实现的。</p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>侦听属性的初始化也是发生在 Vue 的实例初始化阶段的 <code>initState</code> 函数中，在 <code>computed</code> 初始化之后，执行了：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>watch <span class="token operator">&amp;&amp;</span> opts<span class="token punctuation">.</span>watch <span class="token operator">!==</span> nativeWatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">initWatch</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> opts<span class="token punctuation">.</span>watch<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>来看一下 <code>initWatch</code> 的实现，它的定义在 <code>src/core/instance/state.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> initWatch <span class="token punctuation">(</span>vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span> watch<span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> watch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> watch<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> handler<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> key<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里就是对 <code>watch</code> 对象做遍历，拿到每一个  <code>handler</code>，因为 Vue 是支持 <code>watch</code> 的同一个 <code>key</code> 对应多个 <code>handler</code>，所以如果 <code>handler</code> 是一个数组，则遍历这个数组，调用 <code>createWatcher</code> 方法，否则直接调用 <code>createWatcher</code>：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> createWatcher <span class="token punctuation">(</span>  vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>  expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>  handler<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  options<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    options <span class="token operator">=</span> handler    handler <span class="token operator">=</span> handler<span class="token punctuation">.</span>handler  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handler <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    handler <span class="token operator">=</span> vm<span class="token punctuation">[</span>handler<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的逻辑也很简单，首先对 <code>hanlder</code> 的类型做判断，拿到它最终的回调函数，最后调用 <code>vm.$watch(keyOrFn, handler, options)</code> 函数，<code>$watch</code> 是 Vue 原型上的方法，它是在执行 <code>stateMixin</code> 的时候定义的：</p><pre class="line-numbers language-js"><code class="language-js">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$watch <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>  cb<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  options<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>  <span class="token keyword">const</span> vm<span class="token punctuation">:</span> Component <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">createWatcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  options<span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">const</span> watcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> expOrFn<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> watcher<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> unwatchFn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    watcher<span class="token punctuation">.</span><span class="token function">teardown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，侦听属性 <code>watch</code> 最终会调用 <code>$watch</code> 方法，这个方法首先判断 <code>cb</code> 如果是一个对象，则调用 <code>createWatcher</code> 方法，这是因为 <code>$watch</code> 方法是用户可以直接调用的，它可以传递一个对象，也可以传递函数。接着执行 <code>const watcher = new Watcher(vm, expOrFn, cb, options)</code> 实例化了一个 <code>watcher</code>，这里需要注意一点这是一个 <code>user watcher</code>，因为 <code>options.user = true</code>。通过实例化 <code>watcher</code> 的方式，一旦我们 <code>watch</code> 的数据发送变化，它最终会执行 <code>watcher</code> 的 <code>run</code> 方法，执行回调函数 <code>cb</code>，并且如果我们设置了 <code>immediate</code> 为 true，则直接会执行回调函数 <code>cb</code>。最后返回了一个 <code>unwatchFn</code> 方法，它会调用 <code>teardown</code> 方法去移除这个 <code>watcher</code>。</p><p>所以本质上侦听属性也是基于 <code>Watcher</code> 实现的，它是一个 <code>user watcher</code>。其实 <code>Watcher</code> 支持了不同的类型，下面我们梳理一下它有哪些类型以及它们的作用。</p><h2 id="Watcher-options"><a href="#Watcher-options" class="headerlink" title="Watcher options"></a>Watcher options</h2><p><code>Watcher</code> 的构造函数对 <code>options</code> 做的了处理，代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>deep  <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>user  <span class="token keyword">this</span><span class="token punctuation">.</span>computed <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>computed  <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>sync  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 <code>watcher</code> 总共有 4 种类型，我们来一一分析它们，看看不同的类型执行的逻辑有哪些差别。</p><h3 id="deep-watcher"><a href="#deep-watcher" class="headerlink" title="deep watcher"></a>deep watcher</h3><p>通常，如果我们想对一下对象做深度观测的时候，需要设置这个属性为 true，考虑到这种情况：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token punctuation">{</span>      b<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">handler</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候是不会 log 任何数据的，因为我们是 watch 了 <code>a</code> 对象，只触发了 <code>a</code> 的 getter，并没有触发 <code>a.b</code> 的 getter，所以并没有订阅它的变化，导致我们对 <code>vm.a.b = 2</code> 赋值的时候，虽然触发了 setter，但没有可通知的对象，所以也并不会触发 watch 的回调函数了。</p><p>而我们只需要对代码做稍稍修改，就可以观测到这个变化了</p><pre class="line-numbers language-js"><code class="language-js">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token punctuation">{</span>    deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function">handler</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就创建了一个 <code>deep watcher</code> 了，在 <code>watcher</code> 执行 <code>get</code> 求值的过程中有一段逻辑：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在对 watch 的表达式或者函数求值后，会调用 <code>traverse</code> 函数，它的定义在 <code>src/core/observer/traverse.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> _Set <span class="token keyword">as</span> Set<span class="token punctuation">,</span> isObject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">import</span> type <span class="token punctuation">{</span> SimpleSet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">import</span> VNode <span class="token keyword">from</span> <span class="token string">'../vdom/vnode'</span><span class="token keyword">const</span> seenObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * Recursively traverse an object to evoke all converted * getters, so that every nested property inside the object * is collected as a "deep" dependency. */</span><span class="token keyword">export</span> <span class="token keyword">function</span> traverse <span class="token punctuation">(</span>val<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">_traverse</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> seenObjects<span class="token punctuation">)</span>  seenObjects<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> _traverse <span class="token punctuation">(</span>val<span class="token punctuation">:</span> any<span class="token punctuation">,</span> seen<span class="token punctuation">:</span> SimpleSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i<span class="token punctuation">,</span> keys  <span class="token keyword">const</span> isA <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>isA <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> Object<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> val <span class="token keyword">instanceof</span> <span class="token class-name">VNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>__ob__<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> depId <span class="token operator">=</span> val<span class="token punctuation">.</span>__ob__<span class="token punctuation">.</span>dep<span class="token punctuation">.</span>id    <span class="token keyword">if</span> <span class="token punctuation">(</span>seen<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>depId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span>    <span class="token punctuation">}</span>    seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>depId<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isA<span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">=</span> val<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">_traverse</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> seen<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    i <span class="token operator">=</span> keys<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">_traverse</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seen<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>traverse</code> 的逻辑也很简单，它实际上就是对一个对象做深层递归遍历，因为遍历过程中就是对一个子对象的访问，会触发它们的 getter 过程，这样就可以收集到依赖，也就是订阅它们变化的 <code>watcher</code>，这个函数实现还有一个小的优化，遍历过程中会把子响应式对象通过它们的 <code>dep id</code> 记录到 <code>seenObjects</code>，避免以后重复访问。</p><p>那么在执行了 <code>traverse</code> 后，我们再对 watch 的对象内部任何一个值做修改，也会调用 <code>watcher</code> 的回调函数了。</p><p>对 <code>deep watcher</code> 的理解非常重要，今后工作中如果大家观测了一个复杂对象，并且会改变对象内部深层某个值的时候也希望触发回调，一定要设置 <code>deep</code> 为 true，但是因为设置了 <code>deep</code> 后会执行 <code>traverse</code> 函数，会有一定的性能开销，所以一定要根据应用场景权衡是否要开启这个配置。</p><h3 id="user-watcher"><a href="#user-watcher" class="headerlink" title="user watcher"></a>user watcher</h3><p>前面我们分析过，通过 <code>vm.$watch</code> 创建的 <code>watcher</code> 是一个 <code>user watcher</code>，其实它的功能很简单，在对 <code>watcher</code> 求值以及在执行回调函数的时候，会处理一下错误，如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`getter for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> e  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">getAndInvoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`callback for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>handleError</code> 在 Vue 中是一个错误捕获并且暴露给用户的一个利器。</p><h3 id="computed-watcher"><a href="#computed-watcher" class="headerlink" title="computed watcher"></a>computed watcher</h3><p><code>computed watcher</code> 几乎就是为计算属性量身定制的，我们刚才已经对它做了详细的分析，这里不再赘述了。</p><h3 id="sync-watcher"><a href="#sync-watcher" class="headerlink" title="sync watcher"></a>sync watcher</h3><p>在我们之前对 <code>setter</code> 的分析过程知道，当响应式数据发送变化后，触发了 <code>watcher.update()</code>，只是把这个 <code>watcher</code> 推送到一个队列中，在 <code>nextTick</code> 后才会真正执行 <code>watcher</code> 的回调函数。而一旦我们设置了 <code>sync</code>，就可以在当前 <code>Tick</code> 中同步执行 <code>watcher</code> 的回调函数。</p><pre class="line-numbers language-js"><code class="language-js">update <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">queueWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有当我们需要 watch 的值的变化到执行 <code>watcher</code> 的回调函数是一个同步过程的时候才会去设置该属性为 true。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这一小节的分析我们对计算属性和侦听属性的实现有了深入的了解，计算属性本质上是 <code>computed watcher</code>，而侦听属性本质上是 <code>user watcher</code>。就应用场景而言，计算属性适合用在模板渲染中，某个值是依赖了其它的响应式对象甚至是计算属性计算而来；而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。</p><p>同时我们又了解了 <code>watcher</code> 的 4 个 <code>options</code>，通常我们会在创建 <code>user watcher</code> 的时候配置 <code>deep</code> 和 <code>sync</code>，可以根据不同的场景做相应的配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算属性-VS-侦听属性&quot;&gt;&lt;a href=&quot;#计算属性-VS-侦听属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性 VS 侦听属性&quot;&gt;&lt;/a&gt;计算属性 VS 侦听属性&lt;/h1&gt;&lt;p&gt;Vue 的组件对象支持了计算属性 &lt;code&gt;compute
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - 检测变化的注意事项</title>
    <link href="http://www.chenya.site/2018/04/14/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/004.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/006.%E6%A3%80%E6%B5%8B%E5%8F%98%E5%8C%96%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://www.chenya.site/2018/04/14/005.vue源码学习/004.响应式原理/006.检测变化的注意事项/</id>
    <published>2018-04-14T03:04:45.000Z</published>
    <updated>2019-09-16T01:57:01.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="检测变化的注意事项"><a href="#检测变化的注意事项" class="headerlink" title="检测变化的注意事项"></a>检测变化的注意事项</h1><p>通过前面几节的分析，我们对响应式数据对象以及它的 getter 和 setter 部分做了了解，但是对于一些特殊情况是需要注意的，接下来我们就从源码的角度来看 Vue 是如何处理这些特殊情况的。</p><h2 id="对象添加属性"><a href="#对象添加属性" class="headerlink" title="对象添加属性"></a>对象添加属性</h2><p>对于使用 <code>Object.defineProperty</code> 实现响应式的对象，当我们去给这个对象添加一个新的属性的时候，是不能够触发它的 setter 的，比如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span><span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// vm.b 是非响应的</span>vm<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是添加新属性的场景我们在平时开发中会经常遇到，那么 Vue 为了解决这个问题，定义了一个全局 API <code>Vue.set</code> 方法，它在 <code>src/core/global-api/index.js</code> 中初始化：</p><pre class="line-numbers language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">set</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个 <code>set</code> 方法的定义在 <code>src/core/observer/index.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Set a property on an object. Adds the new property and * triggers change notification if the property doesn't * already exist. */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token keyword">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">|</span> Object<span class="token punctuation">,</span> key<span class="token punctuation">:</span> any<span class="token punctuation">,</span> val<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">:</span> any <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span>    <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Cannot set reactive property on undefined, null, or primitive value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isValidArrayIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">.</span>length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>length<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    target<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> target <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">:</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>__ob__  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>_isVue <span class="token operator">||</span> <span class="token punctuation">(</span>ob <span class="token operator">&amp;&amp;</span> ob<span class="token punctuation">.</span>vmCount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>      <span class="token string">'Avoid adding reactive properties to a Vue instance or its root $data '</span> <span class="token operator">+</span>      <span class="token string">'at runtime - declare it upfront in the data option.'</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ob<span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val    <span class="token keyword">return</span> val  <span class="token punctuation">}</span>  <span class="token function">defineReactive</span><span class="token punctuation">(</span>ob<span class="token punctuation">.</span>value<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span>  ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> val<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>set</code> 方法接收 3个参数，<code>target</code> 可能是数组或者是普通对象，<code>key</code> 代表的是数组的下标或者是对象的键值，<code>val</code> 代表添加的值。首先判断如果 <code>target</code> 是数组且 <code>key</code> 是一个合法的下标，则之前通过 <code>splice</code> 去添加进数组然后返回，这里的 <code>splice</code> 其实已经不仅仅是原生数组的 <code>splice</code> 了，稍后我会详细介绍数组的逻辑。接着又判断 <code>key</code> 已经存在于 <code>target</code> 中，则直接赋值返回，因为这样的变化是可以观测到了。接着再获取到 <code>target.__ob__</code> 并赋值给 <code>ob</code>，之前分析过它是在 <code>Observer</code> 的构造函数执行的时候初始化的，表示 <code>Observer</code> 的一个实例，如果它不存在，则说明 <code>target</code> 不是一个响应式的对象，则直接赋值并返回。最后通过 <code>defineReactive(ob.value, key, val)</code> 把新添加的属性变成响应式对象，然后再通过 <code>ob.dep.notify()</code> 手动的触发依赖通知，还记得我们在给对象添加 getter 的时候有这么一段逻辑：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> defineReactive <span class="token punctuation">(</span>  obj<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  val<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  customSetter<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span>  shallow<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> val      <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>          childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> value    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 getter 过程中判断了 <code>childOb</code>，并调用了 <code>childOb.dep.depend()</code> 收集了依赖，这就是为什么执行 <code>Vue.set</code> 的时候通过 <code>ob.dep.notify()</code> 能够通知到 <code>watcher</code>，从而让添加新的属性到对象也可以检测到变化。这里如果 <code>value</code> 是个数组，那么就通过 <code>dependArray</code> 把数组每个元素也去做依赖收集。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>接着说一下数组的情况，Vue 也是不能检测到以下变动的数组：</p><p>1.当你利用索引直接设置一个项时，例如：<code>vm.items[indexOfItem] = newValue</code></p><p>2.当你修改数组的长度时，例如：<code>vm.items.length = newLength</code></p><p>对于第一种情况，可以使用：<code>Vue.set(example1.items, indexOfItem, newValue)</code>；而对于第二种情况，可以使用 <code>vm.items.splice(newLength)</code>。</p><p>我们刚才也分析到，对于 <code>Vue.set</code> 的实现，当 <code>target</code> 是数组的时候，也是通过 <code>target.splice(key, 1, val)</code> 来添加的，那么这里的 <code>splice</code> 到底有什么黑魔法，能让添加的对象变成响应式的呢。</p><p>其实之前我们也分析过，在通过 <code>observe</code> 方法去观察对象的时候会实例化 <code>Observer</code>，在它的构造函数中是专门对数组做了处理，它的定义在 <code>src/core/observer/index.js</code> 中。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">(</span>value<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vmCount <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">def</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'__ob__'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> augment <span class="token operator">=</span> hasProto        <span class="token operator">?</span> protoAugment        <span class="token punctuation">:</span> copyAugment      <span class="token function">augment</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> arrayMethods<span class="token punctuation">,</span> arrayKeys<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们只需要关注 <code>value</code> 是 Array 的情况，首先获取 <code>augment</code>，这里的 <code>hasProto</code> 实际上就是判断对象中是否存在 <code>__proto__</code>，如果存在则 <code>augment</code> 指向 <code>protoAugment</code>， 否则指向 <code>copyAugment</code>，来看一下这两个函数的定义：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Augment an target Object or Array by intercepting * the prototype chain using __proto__ */</span><span class="token keyword">function</span> protoAugment <span class="token punctuation">(</span>target<span class="token punctuation">,</span> src<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> keys<span class="token punctuation">:</span> any<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* eslint-disable no-proto */</span>  target<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> src  <span class="token comment" spellcheck="true">/* eslint-enable no-proto */</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Augment an target Object or Array by defining * hidden properties. */</span><span class="token comment" spellcheck="true">/* istanbul ignore next */</span><span class="token keyword">function</span> copyAugment <span class="token punctuation">(</span>target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> src<span class="token punctuation">:</span> Object<span class="token punctuation">,</span> keys<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token function">def</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> src<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>protoAugment</code> 方法是直接把 <code>target.__proto__</code> 原型直接修改为 <code>src</code>，而 <code>copyAugment</code> 方法是遍历 keys，通过 <code>def</code>，也就是 <code>Object.defineProperty</code> 去定义它自身的属性值。对于大部分现代浏览器都会走到 <code>protoAugment</code>，那么它实际上就把 <code>value</code> 的原型指向了 <code>arrayMethods</code>，<code>arrayMethods</code> 的定义在 <code>src/core/observer/array.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> def <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">const</span> arrayProto <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token keyword">export</span> <span class="token keyword">const</span> arrayMethods <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>arrayProto<span class="token punctuation">)</span><span class="token keyword">const</span> methodsToPatch <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token string">'push'</span><span class="token punctuation">,</span>  <span class="token string">'pop'</span><span class="token punctuation">,</span>  <span class="token string">'shift'</span><span class="token punctuation">,</span>  <span class="token string">'unshift'</span><span class="token punctuation">,</span>  <span class="token string">'splice'</span><span class="token punctuation">,</span>  <span class="token string">'sort'</span><span class="token punctuation">,</span>  <span class="token string">'reverse'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">/** * Intercept mutating methods and emit events */</span>methodsToPatch<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// cache original method</span>  <span class="token keyword">const</span> original <span class="token operator">=</span> arrayProto<span class="token punctuation">[</span>method<span class="token punctuation">]</span>  <span class="token function">def</span><span class="token punctuation">(</span>arrayMethods<span class="token punctuation">,</span> method<span class="token punctuation">,</span> <span class="token keyword">function</span> mutator <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> original<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token keyword">const</span> ob <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__ob__    <span class="token keyword">let</span> inserted    <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'push'</span><span class="token punctuation">:</span>      <span class="token keyword">case</span> <span class="token string">'unshift'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'splice'</span><span class="token punctuation">:</span>        inserted <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inserted<span class="token punctuation">)</span> ob<span class="token punctuation">.</span><span class="token function">observeArray</span><span class="token punctuation">(</span>inserted<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// notify change</span>    ob<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<code>arrayMethods</code> 首先继承了 <code>Array</code>，然后对数组中所有能改变数组自身的方法，如 <code>push、pop</code> 等这些方法进行重写。重写后的方法会先执行它们本身原有的逻辑，并对能增加数组长度的 3 个方法 <code>push、unshift、splice</code> 方法做了判断，获取到插入的值，然后把新添加的值变成一个响应式对象，并且再调用 <code>ob.dep.notify()</code> 手动触发依赖通知，这就很好地解释了之前的示例中调用 <code>vm.items.splice(newLength)</code> 方法可以检测到变化。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这一节的分析，我们对响应式对象又有了更全面的认识，如果在实际工作中遇到了这些特殊情况，我们就可以知道如何把它们也变成响应式的对象。其实对于对象属性的删除也会用同样的问题，Vue 同样提供了 <code>Vue.del</code> 的全局 API，它的实现和 <code>Vue.set</code> 大同小异，甚至还要更简单一些，这里我就不去分析了，感兴趣的同学可以自行去了解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;检测变化的注意事项&quot;&gt;&lt;a href=&quot;#检测变化的注意事项&quot; class=&quot;headerlink&quot; title=&quot;检测变化的注意事项&quot;&gt;&lt;/a&gt;检测变化的注意事项&lt;/h1&gt;&lt;p&gt;通过前面几节的分析，我们对响应式数据对象以及它的 getter 和 setter 部
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>上传文件简单实现</title>
    <link href="http://www.chenya.site/2018/04/11/004.koa%E5%AD%A6%E4%B9%A0/001.%E5%9F%BA%E7%A1%80%E7%AF%87/007.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/002.%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.chenya.site/2018/04/11/004.koa学习/001.基础篇/007.文件上传/002.上传文件简单实现/</id>
    <published>2018-04-11T15:15:19.000Z</published>
    <updated>2019-09-16T01:57:01.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上传文件简单实现"><a href="#上传文件简单实现" class="headerlink" title="上传文件简单实现"></a>上传文件简单实现</h1><h2 id="依赖模块"><a href="#依赖模块" class="headerlink" title="依赖模块"></a>依赖模块</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class="line-numbers language-sh"><code class="language-sh">npm install --save busboy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>busboy 是用来解析出请求中文件流</li></ul><h2 id="例子源码"><a href="#例子源码" class="headerlink" title="例子源码"></a>例子源码</h2><p>demo源码</p><p><a href="https://github.com/chenya1123236324/picture-management/tree/master/2019/koa%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E9%85%8D%E5%9B%BE/demo/upload" target="_blank" rel="noopener">upload</a></p><h3 id="封装上传文件到写入服务的方法"><a href="#封装上传文件到写入服务的方法" class="headerlink" title="封装上传文件到写入服务的方法"></a>封装上传文件到写入服务的方法</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> inspect <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>inspect<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Busboy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'busboy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * 同步创建文件目录 * @param  {string} dirname 目录绝对地址 * @return {boolean}        创建目录结果 */</span><span class="token keyword">function</span> <span class="token function">mkdirsSync</span><span class="token punctuation">(</span> dirname <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span> dirname <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mkdirsSync</span><span class="token punctuation">(</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>dirname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span> dirname <span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 获取上传文件的后缀名 * @param  {string} fileName 获取上传文件的后缀名 * @return {string}          文件后缀名 */</span><span class="token keyword">function</span> <span class="token function">getSuffixName</span><span class="token punctuation">(</span> fileName <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> nameList <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> nameList<span class="token punctuation">[</span>nameList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 上传文件 * @param  {object} ctx     koa上下文 * @param  {object} options 文件上传参数 fileType文件类型， path文件存放路径 * @return {promise} */</span><span class="token keyword">function</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span> ctx<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> req <span class="token operator">=</span> ctx<span class="token punctuation">.</span>req  <span class="token keyword">let</span> res <span class="token operator">=</span> ctx<span class="token punctuation">.</span>res  <span class="token keyword">let</span> busboy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Busboy</span><span class="token punctuation">(</span><span class="token punctuation">{</span>headers<span class="token punctuation">:</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取类型</span>  <span class="token keyword">let</span> fileType <span class="token operator">=</span> options<span class="token punctuation">.</span>fileType <span class="token operator">||</span> <span class="token string">'common'</span>  <span class="token keyword">let</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> options<span class="token punctuation">.</span>path<span class="token punctuation">,</span>  fileType<span class="token punctuation">)</span>  <span class="token keyword">let</span> mkdirResult <span class="token operator">=</span> <span class="token function">mkdirsSync</span><span class="token punctuation">(</span> filePath <span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件上传中...'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>      success<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      formData<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解析请求文件事件</span>    busboy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fieldname<span class="token punctuation">,</span> file<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> mimetype<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> fileName <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token function">getSuffixName</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>      <span class="token keyword">let</span> _uploadFilePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> filePath<span class="token punctuation">,</span> fileName <span class="token punctuation">)</span>      <span class="token keyword">let</span> saveTo <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>_uploadFilePath<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 文件保存到制定路径</span>      file<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span>saveTo<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 文件写入事件结束</span>      file<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token boolean">true</span>        result<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">'文件上传成功'</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件上传成功！'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 解析表单中其他字段信息</span>    busboy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'field'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fieldname<span class="token punctuation">,</span> val<span class="token punctuation">,</span> fieldnameTruncated<span class="token punctuation">,</span> valTruncated<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> mimetype<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'表单字段数据 ['</span> <span class="token operator">+</span> fieldname <span class="token operator">+</span> <span class="token string">']: value: '</span> <span class="token operator">+</span> <span class="token function">inspect</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      result<span class="token punctuation">.</span>formData<span class="token punctuation">[</span>fieldname<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">inspect</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析结束事件</span>    busboy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件上结束'</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 解析错误事件</span>    busboy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件上出错'</span><span class="token punctuation">)</span>      <span class="token function">reject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    req<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>busboy<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span>  <span class="token punctuation">{</span>  uploadFile<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// const bodyParser = require('koa-bodyparser')</span><span class="token keyword">const</span> <span class="token punctuation">{</span> uploadFile <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./util/upload'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// app.use(bodyParser())</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token punctuation">(</span> ctx <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> ctx<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'GET'</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当GET请求时候返回表单页面</span>    <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token template-string"><span class="token string">`      &lt;h1>koa2 upload demo&lt;/h1>      &lt;form method="POST" action="/upload.json" enctype="multipart/form-data">        &lt;p>file upload&lt;/p>        &lt;span>picName:&lt;/span>&lt;input name="picName" type="text" />&lt;br/>        &lt;input name="file" type="file" />&lt;br/>&lt;br/>        &lt;button type="submit">submit&lt;/button>      &lt;/form>    `</span></span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> html  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> ctx<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/upload.json'</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 上传文件请求处理</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span> success<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>    <span class="token keyword">let</span> serverFilePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> __dirname<span class="token punctuation">,</span> <span class="token string">'upload-files'</span> <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 上传文件事件</span>    result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span> ctx<span class="token punctuation">,</span> <span class="token punctuation">{</span>      fileType<span class="token punctuation">:</span> <span class="token string">'album'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// common or album</span>      path<span class="token punctuation">:</span> serverFilePath    <span class="token punctuation">}</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> result  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 其他请求显示404</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string">'&lt;h1>404！！！ o(╯□╰)o&lt;/h1>'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[demo] upload-simple is starting at port 3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/koa%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E9%85%8D%E5%9B%BE/7.7.1.upload-simple-result-03.png" alt="upload-simple-result" title>                </div>                <div class="image-caption">upload-simple-result</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/koa%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E9%85%8D%E5%9B%BE/71.1.upload-simple-result-02.png" alt="upload-simple-result" title>                </div>                <div class="image-caption">upload-simple-result</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/koa%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E9%85%8D%E5%9B%BE/7.7.1.upload-simple-result-01.png" alt="upload-simple-result" title>                </div>                <div class="image-caption">upload-simple-result</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/koa%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E9%85%8D%E5%9B%BE/7.7.1.upload-simple-result-04.png" alt="upload-simple-result" title>                </div>                <div class="image-caption">upload-simple-result</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;上传文件简单实现&quot;&gt;&lt;a href=&quot;#上传文件简单实现&quot; class=&quot;headerlink&quot; title=&quot;上传文件简单实现&quot;&gt;&lt;/a&gt;上传文件简单实现&lt;/h1&gt;&lt;h2 id=&quot;依赖模块&quot;&gt;&lt;a href=&quot;#依赖模块&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="koa学习" scheme="http://www.chenya.site/tags/koa%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>busboy模块</title>
    <link href="http://www.chenya.site/2018/04/08/004.koa%E5%AD%A6%E4%B9%A0/001.%E5%9F%BA%E7%A1%80%E7%AF%87/007.%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/001.busboy%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.chenya.site/2018/04/08/004.koa学习/001.基础篇/007.文件上传/001.busboy模块/</id>
    <published>2018-04-08T11:32:29.000Z</published>
    <updated>2019-09-16T01:57:01.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="busboy模块"><a href="#busboy模块" class="headerlink" title="busboy模块"></a>busboy模块</h1><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-js"><code class="language-js">npm install <span class="token operator">--</span>save busboy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="模块简介"><a href="#模块简介" class="headerlink" title="模块简介"></a>模块简介</h3><p>busboy 模块是用来解析POST请求，node原生req中的文件流。</p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> inspect <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'util'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>inspect<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Busboy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'busboy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// req 为node原生请求</span><span class="token keyword">const</span> busboy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Busboy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> headers<span class="token punctuation">:</span> req<span class="token punctuation">.</span>headers <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ...</span><span class="token comment" spellcheck="true">// 监听文件解析事件</span>busboy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fieldname<span class="token punctuation">,</span> file<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> encoding<span class="token punctuation">,</span> mimetype<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`File [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fieldname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]: filename: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 文件保存到特定路径</span>  file<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">'./upload'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 开始解析文件流</span>  file<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`File [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fieldname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] got </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> bytes`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 解析文件结束</span>  file<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`File [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fieldname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] Finished`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 监听请求中的字段</span>busboy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'field'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fieldname<span class="token punctuation">,</span> val<span class="token punctuation">,</span> fieldnameTruncated<span class="token punctuation">,</span> valTruncated<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Field [</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fieldname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]: value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">inspect</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 监听结束事件</span>busboy<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'finish'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Done parsing form!'</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">303</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> Connection<span class="token punctuation">:</span> <span class="token string">'close'</span><span class="token punctuation">,</span> Location<span class="token punctuation">:</span> <span class="token string">'/'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>busboy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更多模块信息"><a href="#更多模块信息" class="headerlink" title="更多模块信息"></a>更多模块信息</h2><p>更多详细API可以访问npm官方文档 <a href="https://www.npmjs.com/package/busboy" target="_blank" rel="noopener">https://www.npmjs.com/package/busboy</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;busboy模块&quot;&gt;&lt;a href=&quot;#busboy模块&quot; class=&quot;headerlink&quot; title=&quot;busboy模块&quot;&gt;&lt;/a&gt;busboy模块&lt;/h1&gt;&lt;h2 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="koa学习" scheme="http://www.chenya.site/tags/koa%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - nextTick</title>
    <link href="http://www.chenya.site/2018/04/02/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/004.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/005.nextTick/"/>
    <id>http://www.chenya.site/2018/04/02/005.vue源码学习/004.响应式原理/005.nextTick/</id>
    <published>2018-04-02T11:13:25.000Z</published>
    <updated>2019-09-16T01:57:01.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h1><p><code>nextTick</code> 是 Vue 的一个核心实现，在介绍 Vue 的 nextTick 之前，为了方便大家理解，我先简单介绍一下 JS 的运行机制。</p><h2 id="JS-运行机制"><a href="#JS-运行机制" class="headerlink" title="JS 运行机制"></a>JS 运行机制</h2><p>JS 执行是单线程的，它是基于事件循环的。事件循环大致分为以下几个步骤：</p><p>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。</p><p>（2）主线程之外，还存在一个”任务队列”（task queue）。只要异步任务有了运行结果，就在”任务队列”之中放置一个事件。</p><p>（3）一旦”执行栈”中的所有同步任务执行完毕，系统就会读取”任务队列”，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</p><p>（4）主线程不断重复上面的第三步。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://raw.githubusercontent.com/chenya1123236324/picture-management/master/2019/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/event-loop.png" alt="event-loop" title="event-loop">                </div>                <div class="image-caption">event-loop</div>            </figure><p>主线程的执行过程就是一个 tick，而所有的异步结果都是通过 “任务队列” 来调度。 消息队列中存放的是一个个的任务（task）。 规范中规定 task 分为两大类，分别是 macro task 和 micro task，并且每个 macro task 结束后，都要清空所有的 micro task。</p><p>关于 macro task 和 micro task 的概念，这里不会细讲，简单通过一段代码演示他们的执行顺序：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span>macroTask <span class="token keyword">of</span> macroTaskQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. Handle current MACRO-TASK</span>    <span class="token function">handleMacroTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. Handle all MICRO-TASK</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>microTask <span class="token keyword">of</span> microTaskQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleMicroTask</span><span class="token punctuation">(</span>microTask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览器环境中，常见的 macro task 有 setTimeout、MessageChannel、postMessage、setImmediate；常见的 micro task 有 MutationObsever 和 Promise.then。</p><h2 id="Vue-的实现"><a href="#Vue-的实现" class="headerlink" title="Vue 的实现"></a>Vue 的实现</h2><p>在 Vue 源码 2.5+ 后，<code>nextTick</code> 的实现单独有一个 JS 文件来维护它，它的源码并不多，总共也就 100 多行。接下来我们来看一下它的实现，在 <code>src/core/util/next-tick.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> noop <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'shared/util'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> handleError <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./error'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> isIOS<span class="token punctuation">,</span> isNative <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./env'</span><span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> pending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">function</span> flushCallbacks <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  pending <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">const</span> copies <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  callbacks<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> copies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    copies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Here we have async deferring wrappers using both microtasks and (macro) tasks.</span><span class="token comment" spellcheck="true">// In &lt; 2.4 we used microtasks everywhere, but there are some scenarios where</span><span class="token comment" spellcheck="true">// microtasks have too high a priority and fire in between supposedly</span><span class="token comment" spellcheck="true">// sequential events (e.g. #4521, #6690) or even between bubbling of the same</span><span class="token comment" spellcheck="true">// event (#6566). However, using (macro) tasks everywhere also has subtle problems</span><span class="token comment" spellcheck="true">// when state is changed right before repaint (e.g. #6813, out-in transitions).</span><span class="token comment" spellcheck="true">// Here we use microtask by default, but expose a way to force (macro) task when</span><span class="token comment" spellcheck="true">// needed (e.g. in event handlers attached by v-on).</span><span class="token keyword">let</span> microTimerFunc<span class="token keyword">let</span> macroTimerFunc<span class="token keyword">let</span> useMacroTask <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">// Determine (macro) task defer implementation.</span><span class="token comment" spellcheck="true">// Technically setImmediate should be the ideal choice, but it's only available</span><span class="token comment" spellcheck="true">// in IE. The only polyfill that consistently queues the callback after all DOM</span><span class="token comment" spellcheck="true">// events triggered in the same loop is by using MessageChannel.</span><span class="token comment" spellcheck="true">/* istanbul ignore if */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> setImmediate <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>setImmediate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  macroTimerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setImmediate</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> MessageChannel <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>  <span class="token function">isNative</span><span class="token punctuation">(</span>MessageChannel<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token comment" spellcheck="true">// PhantomJS</span>  MessageChannel<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object MessageChannelConstructor]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> port <span class="token operator">=</span> channel<span class="token punctuation">.</span>port2  channel<span class="token punctuation">.</span>port1<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> flushCallbacks  macroTimerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    port<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* istanbul ignore next */</span>  macroTimerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Determine microtask defer implementation.</span><span class="token comment" spellcheck="true">/* istanbul ignore next, $flow-disable-line */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  microTimerFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// in problematic UIWebViews, Promise.then doesn't completely break, but</span>    <span class="token comment" spellcheck="true">// it can get stuck in a weird state where callbacks are pushed into the</span>    <span class="token comment" spellcheck="true">// microtask queue but the queue isn't being flushed, until the browser</span>    <span class="token comment" spellcheck="true">// needs to do some other work, e.g. handle a timer. Therefore we can</span>    <span class="token comment" spellcheck="true">// "force" the microtask queue to be flushed by adding an empty timer.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isIOS<span class="token punctuation">)</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// fallback to macro</span>  microTimerFunc <span class="token operator">=</span> macroTimerFunc<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Wrap a function so that if any code inside triggers state change, * the changes are queued using a (macro) task instead of a microtask. */</span><span class="token keyword">export</span> <span class="token keyword">function</span> withMacroTask <span class="token punctuation">(</span>fn<span class="token punctuation">:</span> Function<span class="token punctuation">)</span><span class="token punctuation">:</span> Function <span class="token punctuation">{</span>  <span class="token keyword">return</span> fn<span class="token punctuation">.</span>_withTask <span class="token operator">||</span> <span class="token punctuation">(</span>fn<span class="token punctuation">.</span>_withTask <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    useMacroTask <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>    useMacroTask <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">return</span> res  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> nextTick <span class="token punctuation">(</span>cb<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span> ctx<span class="token operator">?</span><span class="token punctuation">:</span> Object<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> _resolve  callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> <span class="token string">'nextTick'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">_resolve</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>    pending <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>useMacroTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">macroTimerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">microTimerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// $flow-disable-line</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      _resolve <span class="token operator">=</span> resolve    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>next-tick.js</code> 申明了 <code>microTimerFunc</code> 和 <code>macroTimerFunc</code> 2 个变量，它们分别对应的是 micro task 的函数和 macro task 的函数。对于 macro task 的实现，优先检测是否支持原生 <code>setImmediate</code>，这是一个高版本 IE 和 Edge 才支持的特性，不支持的话再去检测是否支持原生的 <code>MessageChannel</code>，如果也不支持的话就会降级为 <code>setTimeout 0</code>；而对于 micro task 的实现，则检测浏览器是否原生支持 Promise，不支持的话直接指向 macro task 的实现。</p><p><code>next-tick.js</code> 对外暴露了 2 个函数，先来看 <code>nextTick</code>，这就是我们在上一节执行 <code>nextTick(flushSchedulerQueue)</code> 所用到的函数。它的逻辑也很简单，把传入的回调函数 <code>cb</code> 压入 <code>callbacks</code> 数组，最后一次性地根据 <code>useMacroTask</code> 条件执行 <code>macroTimerFunc</code> 或者是 <code>microTimerFunc</code>，而它们都会在下一个 tick 执行 <code>flushCallbacks</code>，<code>flushCallbacks</code> 的逻辑非常简单，对 <code>callbacks</code> 遍历，然后执行相应的回调函数。</p><p>这里使用 <code>callbacks</code> 而不是直接在 <code>nextTick</code> 中执行回调函数的原因是保证在同一个 tick 内多次执行 <code>nextTick</code>，不会开启多个异步任务，而把这些异步任务都压成一个同步任务，在下一个 tick 执行完毕。</p><p><code>nextTick</code> 函数最后还有一段逻辑：</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    _resolve <span class="token operator">=</span> resolve  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是当 <code>nextTick</code> 不传 <code>cb</code> 参数的时候，提供一个 Promise 化的调用，比如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当 <code>_resolve</code> 函数执行，就会跳到 <code>then</code> 的逻辑中。</p><p><code>next-tick.js</code> 还对外暴露了 <code>withMacroTask</code> 函数，它是对函数做一层包装，确保函数执行过程中对数据任意的修改，触发变化执行 <code>nextTick</code> 的时候强制走 <code>macroTimerFunc</code>。比如对于一些 DOM 交互事件，如 <code>v-on</code> 绑定的事件回调函数的处理，会强制走 macro task。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这一节对 <code>nextTick</code> 的分析，并结合上一节的 setter 分析，我们了解到数据的变化到 DOM 的重新渲染是一个异步过程，发生在下一个 tick。这就是我们平时在开发的过程中，比如从服务端接口去获取数据的时候，数据做了修改，如果我们的某些方法去依赖了数据修改后的 DOM 变化，我们就必须在 <code>nextTick</code> 后执行。比如下面的伪代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">getData</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>xxx <span class="token operator">=</span> res<span class="token punctuation">.</span>data  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里我们可以获取变化后的 DOM</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vue.js 提供了 2 种调用 <code>nextTick</code> 的方式，一种是全局 API <code>Vue.nextTick</code>，一种是实例上的方法 <code>vm.$nextTick</code>，无论我们使用哪一种，最后都是调用 <code>next-tick.js</code> 中实现的 <code>nextTick</code> 方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nextTick&quot;&gt;&lt;a href=&quot;#nextTick&quot; class=&quot;headerlink&quot; title=&quot;nextTick&quot;&gt;&lt;/a&gt;nextTick&lt;/h1&gt;&lt;p&gt;&lt;code&gt;nextTick&lt;/code&gt; 是 Vue 的一个核心实现，在介绍 Vue 的 
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ejs模板引擎</title>
    <link href="http://www.chenya.site/2018/04/01/004.koa%E5%AD%A6%E4%B9%A0/001.%E5%9F%BA%E7%A1%80%E7%AF%87/006.%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/002.ejs%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <id>http://www.chenya.site/2018/04/01/004.koa学习/001.基础篇/006.模板引擎/002.ejs模板引擎/</id>
    <published>2018-04-01T00:26:03.000Z</published>
    <updated>2019-09-16T01:57:01.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ejs模板引擎"><a href="#ejs模板引擎" class="headerlink" title="ejs模板引擎"></a>ejs模板引擎</h1><h2 id="具体查看ejs官方文档"><a href="#具体查看ejs官方文档" class="headerlink" title="具体查看ejs官方文档"></a>具体查看ejs官方文档</h2><p><a href="https://github.com/mde/ejs" target="_blank" rel="noopener">https://github.com/mde/ejs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ejs模板引擎&quot;&gt;&lt;a href=&quot;#ejs模板引擎&quot; class=&quot;headerlink&quot; title=&quot;ejs模板引擎&quot;&gt;&lt;/a&gt;ejs模板引擎&lt;/h1&gt;&lt;h2 id=&quot;具体查看ejs官方文档&quot;&gt;&lt;a href=&quot;#具体查看ejs官方文档&quot; class=&quot;he
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="koa学习" scheme="http://www.chenya.site/tags/koa%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - 派发更新</title>
    <link href="http://www.chenya.site/2018/03/28/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/004.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/004.%E6%B4%BE%E5%8F%91%E6%9B%B4%E6%96%B0/"/>
    <id>http://www.chenya.site/2018/03/28/005.vue源码学习/004.响应式原理/004.派发更新/</id>
    <published>2018-03-28T07:45:12.000Z</published>
    <updated>2019-09-16T01:57:01.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="派发更新"><a href="#派发更新" class="headerlink" title="派发更新"></a>派发更新</h1><p>通过上一节分析我们了解了响应式数据依赖收集过程，收集的目的就是为了当我们修改数据的时候，可以对相关的依赖派发更新，那么这一节我们来详细分析这个过程。</p><p>我们先来回顾一下 setter 部分的逻辑：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * Define a reactive property on an Object. */</span><span class="token keyword">export</span> <span class="token keyword">function</span> defineReactive <span class="token punctuation">(</span>  obj<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  val<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  customSetter<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span>  shallow<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> property <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span>configurable <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// cater for pre-defined getter/setters</span>  <span class="token keyword">const</span> getter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token keyword">get</span>  <span class="token keyword">const</span> setter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token keyword">set</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>getter <span class="token operator">||</span> setter<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveSetter <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> val      <span class="token comment" spellcheck="true">/* eslint-disable no-self-compare */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal <span class="token operator">===</span> value <span class="token operator">||</span> <span class="token punctuation">(</span>newVal <span class="token operator">!==</span> newVal <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/* eslint-enable no-self-compare */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> customSetter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">customSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>setter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        setter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newVal<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        val <span class="token operator">=</span> newVal      <span class="token punctuation">}</span>      childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>setter 的逻辑有 2 个关键的点，一个是 <code>childOb = !shallow &amp;&amp; observe(newVal)</code>，如果 <code>shallow</code> 为 false 的情况，会对新设置的值变成一个响应式对象；另一个是 <code>dep.notify()</code>，通知所有的订阅者，这是本节的关键，接下来我会带大家完整的分析整个派发更新的过程。</p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>当我们在组件中对响应的数据做了修改，就会触发 setter 的逻辑，最后调用 <code>dep.notify()</code> 方法，<br>它是 <code>Dep</code> 的一个实例方法，定义在 <code>src/core/observer/dep.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  notify <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// stabilize the subscriber list first</span>    <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的逻辑非常简单，遍历所有的 <code>subs</code>，也就是 <code>Watcher</code> 的实例数组，然后调用每一个 <code>watcher</code> 的 <code>update</code> 方法，它的定义在 <code>src/core/observer/watcher.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  update <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* istanbul ignore else */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// A computed property watcher has two modes: lazy and activated.</span>      <span class="token comment" spellcheck="true">// It initializes as lazy by default, and only becomes activated when</span>      <span class="token comment" spellcheck="true">// it is depended on by at least one subscriber, which is typically</span>      <span class="token comment" spellcheck="true">// another computed property or a component's render function.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">.</span>subs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// In lazy mode, we don't want to perform computations until necessary,</span>        <span class="token comment" spellcheck="true">// so we simply mark the watcher as dirty. The actual computation is</span>        <span class="token comment" spellcheck="true">// performed just-in-time in this.evaluate() when the computed property</span>        <span class="token comment" spellcheck="true">// is accessed.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// In activated mode, we want to proactively perform the computation</span>        <span class="token comment" spellcheck="true">// but only notify our subscribers when the value has indeed changed.</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAndInvoke</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sync<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">queueWatcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里对于 <code>Watcher</code> 的不同状态，会执行不同的逻辑，<code>computed</code> 和 <code>sync</code> 等状态的分析我会之后抽一小节详细介绍，在一般组件数据更新的场景，会走到最后一个 <code>queueWatcher(this)</code> 的逻辑，<code>queueWatcher</code> 的定义在 <code>src/core/observer/scheduler.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> queue<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> has<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">:</span> number<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">let</span> flushing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/** * Push a watcher into the watcher queue. * Jobs with duplicate IDs will be skipped unless it's * pushed when the queue is being flushed. */</span><span class="token keyword">export</span> <span class="token keyword">function</span> queueWatcher <span class="token punctuation">(</span>watcher<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> id <span class="token operator">=</span> watcher<span class="token punctuation">.</span>id  <span class="token keyword">if</span> <span class="token punctuation">(</span>has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flushing<span class="token punctuation">)</span> <span class="token punctuation">{</span>      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// if already flushing, splice the watcher based on its id</span>      <span class="token comment" spellcheck="true">// if already past its id, it will be run next immediately.</span>      <span class="token keyword">let</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> index <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">></span> watcher<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">--</span>      <span class="token punctuation">}</span>      queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> watcher<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// queue the flush</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiting<span class="token punctuation">)</span> <span class="token punctuation">{</span>      waiting <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token function">nextTick</span><span class="token punctuation">(</span>flushSchedulerQueue<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里引入了一个队列的概念，这也是 Vue 在做派发更新的时候的一个优化的点，它并不会每次数据改变都触发 <code>watcher</code> 的回调，而是把这些 <code>watcher</code> 先添加到一个队列里，然后在 <code>nextTick</code> 后执行 <code>flushSchedulerQueue</code>。</p><p>这里有几个细节要注意一下，首先用 <code>has</code> 对象保证同一个 <code>Watcher</code> 只添加一次；接着对 <code>flushing</code> 的判断，else 部分的逻辑稍后我会讲；最后通过 <code>waiting</code> 保证对 <code>nextTick(flushSchedulerQueue)</code> 的调用逻辑只有一次，另外 <code>nextTick</code> 的实现我之后会抽一小节专门去讲，目前就可以理解它是在下一个 tick，也就是异步的去执行 <code>flushSchedulerQueue</code>。</p><p>接下来我们来看 <code>flushSchedulerQueue</code> 的实现，它的定义在 <code>src/core/observer/scheduler.js</code> 中。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> flushing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">/** * Flush both queues and run the watchers. */</span><span class="token keyword">function</span> flushSchedulerQueue <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  flushing <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token keyword">let</span> watcher<span class="token punctuation">,</span> id  <span class="token comment" spellcheck="true">// Sort queue before flush.</span>  <span class="token comment" spellcheck="true">// This ensures that:</span>  <span class="token comment" spellcheck="true">// 1. Components are updated from parent to child. (because parent is always</span>  <span class="token comment" spellcheck="true">//    created before the child)</span>  <span class="token comment" spellcheck="true">// 2. A component's user watchers are run before its render watcher (because</span>  <span class="token comment" spellcheck="true">//    user watchers are created before the render watcher)</span>  <span class="token comment" spellcheck="true">// 3. If a component is destroyed during a parent component's watcher run,</span>  <span class="token comment" spellcheck="true">//    its watchers can be skipped.</span>  queue<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token punctuation">.</span>id <span class="token operator">-</span> b<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// do not cache length because more watchers might be pushed</span>  <span class="token comment" spellcheck="true">// as we run existing watchers</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    watcher <span class="token operator">=</span> queue<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher<span class="token punctuation">.</span>before<span class="token punctuation">)</span> <span class="token punctuation">{</span>      watcher<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    id <span class="token operator">=</span> watcher<span class="token punctuation">.</span>id    has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>    watcher<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// in dev build, check and stop circular updates.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      circular<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>circular<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>circular<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">></span> MAX_UPDATE_COUNT<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token string">'You may have an infinite update loop '</span> <span class="token operator">+</span> <span class="token punctuation">(</span>            watcher<span class="token punctuation">.</span>user              <span class="token operator">?</span> <span class="token template-string"><span class="token string">`in watcher with expression "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>watcher<span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span>              <span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`in a component render function.`</span></span>          <span class="token punctuation">)</span><span class="token punctuation">,</span>          watcher<span class="token punctuation">.</span>vm        <span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// keep copies of post queues before resetting state</span>  <span class="token keyword">const</span> activatedQueue <span class="token operator">=</span> activatedChildren<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> updatedQueue <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">resetSchedulerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// call component updated and activated hooks</span>  <span class="token function">callActivatedHooks</span><span class="token punctuation">(</span>activatedQueue<span class="token punctuation">)</span>  <span class="token function">callUpdatedHooks</span><span class="token punctuation">(</span>updatedQueue<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// devtool hook</span>  <span class="token comment" spellcheck="true">/* istanbul ignore if */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>devtools <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>devtools<span class="token punctuation">)</span> <span class="token punctuation">{</span>    devtools<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'flush'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有几个重要的逻辑要梳理一下，对于一些分支逻辑如 <code>keep-alive</code> 组件相关和之前提到过的 <code>updated</code> 钩子函数的执行会略过。</p><ul><li>队列排序</li></ul><p><code>queue.sort((a, b) =&gt; a.id - b.id)</code> 对队列做了从小到大的排序，这么做主要有以下要确保以下几点：</p><p>1.组件的更新由父到子；因为父组件的创建过程是先于子的，所以 <code>watcher</code> 的创建也是先父后子，执行顺序也应该保持先父后子。</p><p>2.用户的自定义 <code>watcher</code> 要优先于渲染 <code>watcher</code> 执行；因为用户自定义 <code>watcher</code> 是在渲染 <code>watcher</code> 之前创建的。</p><p>3.如果一个组件在父组件的 <code>watcher</code> 执行期间被销毁，那么它对应的 <code>watcher</code> 执行都可以被跳过，所以父组件的 <code>watcher</code> 应该先执行。</p><ul><li>队列遍历</li></ul><p>在对 <code>queue</code> 排序后，接着就是要对它做遍历，拿到对应的 <code>watcher</code>，执行 <code>watcher.run()</code>。这里需要注意一个细节，在遍历的时候每次都会对 <code>queue.length</code> 求值，因为在 <code>watcher.run()</code> 的时候，很可能用户会再次添加新的 <code>watcher</code>，这样会再次执行到 <code>queueWatcher</code>，如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> queueWatcher <span class="token punctuation">(</span>watcher<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> id <span class="token operator">=</span> watcher<span class="token punctuation">.</span>id  <span class="token keyword">if</span> <span class="token punctuation">(</span>has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    has<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flushing<span class="token punctuation">)</span> <span class="token punctuation">{</span>      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// if already flushing, splice the watcher based on its id</span>      <span class="token comment" spellcheck="true">// if already past its id, it will be run next immediately.</span>      <span class="token keyword">let</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">></span> index <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">></span> watcher<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i<span class="token operator">--</span>      <span class="token punctuation">}</span>      queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> watcher<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这时候 <code>flushing</code> 为 true，就会执行到 else 的逻辑，然后就会从后往前找，找到第一个待插入 <code>watcher</code> 的 id 比当前队列中 <code>watcher</code> 的 id 大的位置。把 <code>watcher</code> 按照 <code>id</code>的插入到队列中，因此 <code>queue</code> 的长度发生了变化。</p><ul><li>状态恢复</li></ul><p>这个过程就是执行 <code>resetSchedulerState</code> 函数，它的定义在 <code>src/core/observer/scheduler.js</code> 中。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> queue<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">let</span> has<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">:</span> number<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> circular<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token punctuation">:</span> number<span class="token punctuation">]</span><span class="token punctuation">:</span> number <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> waiting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">let</span> flushing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">/** * Reset the scheduler's state. */</span><span class="token keyword">function</span> resetSchedulerState <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  index <span class="token operator">=</span> queue<span class="token punctuation">.</span>length <span class="token operator">=</span> activatedChildren<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  has <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    circular <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  waiting <span class="token operator">=</span> flushing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑非常简单，就是把这些控制流程状态的一些变量恢复到初始值，把 <code>watcher</code> 队列清空。</p><p>接下来我们继续分析 <code>watcher.run()</code> 的逻辑，它的定义在 <code>src/core/observer/watcher.js</code> 中。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * Scheduler job interface.   * Will be called by the scheduler.   */</span>  run <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAndInvoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cb<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  getAndInvoke <span class="token punctuation">(</span>cb<span class="token punctuation">:</span> Function<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      value <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">||</span>      <span class="token comment" spellcheck="true">// Deep watchers and watchers on Object/Arrays should fire even</span>      <span class="token comment" spellcheck="true">// when the value is the same, because the value may</span>      <span class="token comment" spellcheck="true">// have mutated.</span>      <span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// set new value</span>      <span class="token keyword">const</span> oldValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`callback for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        cb<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vm<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>run</code> 函数实际上就是执行 <code>this.getAndInvoke</code> 方法，并传入 <code>watcher</code> 的回调函数。<code>getAndInvoke</code> 函数逻辑也很简单，先通过 <code>this.get()</code> 得到它当前的值，然后做判断，如果满足新旧值不等、新值是对象类型、<code>deep</code> 模式任何一个条件，则执行 <code>watcher</code> 的回调，注意回调函数执行的时候会把第一个和第二个参数传入新值 <code>value</code> 和旧值 <code>oldValue</code>，这就是当我们添加自定义 <code>watcher</code> 的时候能在回调函数的参数中拿到新旧值的原因。</p><p>那么对于渲染 <code>watcher</code> 而言，它在执行 <code>this.get()</code> 方法求值的时候，会执行 <code>getter</code> 方法：</p><pre class="line-numbers language-js"><code class="language-js">updateComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以这就是当我们去修改组件相关的响应式数据的时候，会触发组件重新渲染的原因，接着就会重新执行 <code>patch</code> 的过程，但它和首次渲染有所不同，之后我们会花一小节去详细介绍。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这一节的分析，我们对 Vue 数据修改派发更新的过程也有了认识，实际上就是当数据发生变化的时候，触发 setter 逻辑，把在依赖过程中订阅的的所有观察者，也就是 <code>watcher</code>，都触发它们的 <code>update</code> 过程，这个过程又利用了队列做了进一步优化，在 <code>nextTick</code> 后执行所有 <code>watcher</code> 的 <code>run</code>，最后执行它们的回调函数。<code>nextTick</code> 是 Vue 一个比较核心的实现了，下一节我们来重点分析它的实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;派发更新&quot;&gt;&lt;a href=&quot;#派发更新&quot; class=&quot;headerlink&quot; title=&quot;派发更新&quot;&gt;&lt;/a&gt;派发更新&lt;/h1&gt;&lt;p&gt;通过上一节分析我们了解了响应式数据依赖收集过程，收集的目的就是为了当我们修改数据的时候，可以对相关的依赖派发更新，那么这一节
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>koa2加载模板引擎</title>
    <link href="http://www.chenya.site/2018/03/27/004.koa%E5%AD%A6%E4%B9%A0/001.%E5%9F%BA%E7%A1%80%E7%AF%87/006.%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/001.koa2%E5%8A%A0%E8%BD%BD%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <id>http://www.chenya.site/2018/03/27/004.koa学习/001.基础篇/006.模板引擎/001.koa2加载模板引擎/</id>
    <published>2018-03-27T13:12:59.000Z</published>
    <updated>2019-09-16T01:57:01.499Z</updated>
    
    <content type="html"><![CDATA[<h1 id="koa2加载模板引擎"><a href="#koa2加载模板引擎" class="headerlink" title="koa2加载模板引擎"></a>koa2加载模板引擎</h1><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h3><pre class="line-numbers language-sh"><code class="language-sh"># 安装koa模板使用中间件npm install --save koa-views# 安装ejs模板引擎npm install --save ejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用模板引擎"><a href="#使用模板引擎" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h3><p>demo源码</p><p><a href="https://github.com/chenya1123236324/picture-management/tree/master/2019/koa%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E9%85%8D%E5%9B%BE/demo/ejs" target="_blank" rel="noopener">ejs</a></p><h4 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h4><pre><code>├── package.json├── index.js└── view    └── index.ejs</code></pre><h4 id="index-js文件"><a href="#index-js文件" class="headerlink" title="./index.js文件"></a>./index.js文件</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> views <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-views'</span><span class="token punctuation">)</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 加载模板引擎</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">views</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./view'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  extension<span class="token punctuation">:</span> <span class="token string">'ejs'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span> <span class="token keyword">async</span> <span class="token punctuation">(</span> ctx <span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">'hello koa2'</span>  <span class="token keyword">await</span> ctx<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    title<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="view-index-ejs-模板"><a href="#view-index-ejs-模板" class="headerlink" title="./view/index.ejs 模板"></a>./view/index.ejs 模板</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>&lt;%= title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>&lt;%= title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>EJS Welcome to &lt;%= title %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;koa2加载模板引擎&quot;&gt;&lt;a href=&quot;#koa2加载模板引擎&quot; class=&quot;headerlink&quot; title=&quot;koa2加载模板引擎&quot;&gt;&lt;/a&gt;koa2加载模板引擎&lt;/h1&gt;&lt;h2 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;head
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="koa学习" scheme="http://www.chenya.site/tags/koa%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码学习 - 依赖收集</title>
    <link href="http://www.chenya.site/2018/03/24/005.vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/004.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/003.%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86/"/>
    <id>http://www.chenya.site/2018/03/24/005.vue源码学习/004.响应式原理/003.依赖收集/</id>
    <published>2018-03-24T00:23:41.000Z</published>
    <updated>2019-09-16T01:57:01.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="依赖收集"><a href="#依赖收集" class="headerlink" title="依赖收集"></a>依赖收集</h1><p>通过上一节的分析我们了解 Vue 会把普通对象变成响应式对象，响应式对象 getter 相关的逻辑就是做依赖收集，这一节我们来详细分析这个过程。</p><p>我们先来回顾一下 getter 部分的逻辑：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> defineReactive <span class="token punctuation">(</span>  obj<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> string<span class="token punctuation">,</span>  val<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  customSetter<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Function<span class="token punctuation">,</span>  shallow<span class="token operator">?</span><span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> property <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span>configurable <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// cater for pre-defined getter/setters</span>  <span class="token keyword">const</span> getter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token keyword">get</span>  <span class="token keyword">const</span> setter <span class="token operator">=</span> property <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token keyword">set</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>getter <span class="token operator">||</span> setter<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> childOb <span class="token operator">=</span> <span class="token operator">!</span>shallow <span class="token operator">&amp;&amp;</span> <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> reactiveGetter <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> value <span class="token operator">=</span> getter <span class="token operator">?</span> getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">:</span> val      <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childOb<span class="token punctuation">)</span> <span class="token punctuation">{</span>          childOb<span class="token punctuation">.</span>dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">dependArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> value    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码我们只需要关注 2 个地方，一个是 <code>const dep = new Dep()</code> 实例化一个 <code>Dep</code> 的实例，另一个是在 <code>get</code> 函数中通过 <code>dep.depend</code> 做依赖收集，这里还有个对 <code>childOb</code> 判断的逻辑，我们之后会介绍它的作用。</p><h2 id="Dep"><a href="#Dep" class="headerlink" title="Dep"></a>Dep</h2><p><code>Dep</code> 是整个 getter 依赖收集的核心，它的定义在 <code>src/core/observer/dep.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> type Watcher <span class="token keyword">from</span> <span class="token string">'./watcher'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> remove <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../util/index'</span><span class="token keyword">let</span> uid <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">/** * A dep is an observable that can have multiple * directives subscribing to it. */</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> target<span class="token punctuation">:</span> <span class="token operator">?</span>Watcher<span class="token punctuation">;</span>  id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>  subs<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Watcher<span class="token operator">></span><span class="token punctuation">;</span>  constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> uid<span class="token operator">++</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  addSub <span class="token punctuation">(</span>sub<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  removeSub <span class="token punctuation">(</span>sub<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">,</span> sub<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  depend <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Dep<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">addDep</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  notify <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// stabilize the subscriber list first</span>    <span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> subs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      subs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// the current target watcher being evaluated.</span><span class="token comment" spellcheck="true">// this is globally unique because there could be only one</span><span class="token comment" spellcheck="true">// watcher being evaluated at any time.</span>Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">const</span> targetStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">function</span> pushTarget <span class="token punctuation">(</span>_target<span class="token punctuation">:</span> <span class="token operator">?</span>Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> targetStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> _target<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> popTarget <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> targetStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Dep</code> 是一个 Class，它定义了一些属性和方法，这里需要特别注意的是它有一个静态属性 <code>target</code>，这是一个全局唯一 <code>Watcher</code>，这是一个非常巧妙的设计，因为在同一时间只能有一个全局的 <code>Watcher</code> 被计算，另外它的自身属性 <code>subs</code> 也是 <code>Watcher</code> 的数组。</p><p><code>Dep</code> 实际上就是对 <code>Watcher</code> 的一种管理，<code>Dep</code>  脱离 <code>Watcher</code> 单独存在是没有意义的，为了完整地讲清楚依赖收集过程，我们有必要看一下 <code>Watcher</code> 的一些相关实现，它的定义在 <code>src/core/observer/watcher.js</code> 中：</p><h2 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a><code>Watcher</code></h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> uid <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true">/** * A watcher parses an expression, collects dependencies, * and fires callback when the expression value changes. * This is used for both the $watch() api and directives. */</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>  vm<span class="token punctuation">:</span> Component<span class="token punctuation">;</span>  expression<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  cb<span class="token punctuation">:</span> Function<span class="token punctuation">;</span>  id<span class="token punctuation">:</span> number<span class="token punctuation">;</span>  deep<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>  user<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>  computed<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>  sync<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>  dirty<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>  active<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>  dep<span class="token punctuation">:</span> Dep<span class="token punctuation">;</span>  deps<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Dep<span class="token operator">></span><span class="token punctuation">;</span>  newDeps<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>Dep<span class="token operator">></span><span class="token punctuation">;</span>  depIds<span class="token punctuation">:</span> SimpleSet<span class="token punctuation">;</span>  newDepIds<span class="token punctuation">:</span> SimpleSet<span class="token punctuation">;</span>  before<span class="token punctuation">:</span> <span class="token operator">?</span>Function<span class="token punctuation">;</span>  getter<span class="token punctuation">:</span> Function<span class="token punctuation">;</span>  value<span class="token punctuation">:</span> any<span class="token punctuation">;</span>  constructor <span class="token punctuation">(</span>    vm<span class="token punctuation">:</span> Component<span class="token punctuation">,</span>    expOrFn<span class="token punctuation">:</span> string <span class="token operator">|</span> Function<span class="token punctuation">,</span>    cb<span class="token punctuation">:</span> Function<span class="token punctuation">,</span>    options<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token operator">?</span>Object<span class="token punctuation">,</span>    isRenderWatcher<span class="token operator">?</span><span class="token punctuation">:</span> boolean  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>vm <span class="token operator">=</span> vm    <span class="token keyword">if</span> <span class="token punctuation">(</span>isRenderWatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span>_watcher <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token punctuation">}</span>    vm<span class="token punctuation">.</span>_watchers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// options</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>deep      <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>user      <span class="token keyword">this</span><span class="token punctuation">.</span>computed <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>computed      <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>sync      <span class="token keyword">this</span><span class="token punctuation">.</span>before <span class="token operator">=</span> options<span class="token punctuation">.</span>before    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>deep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sync <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token operator">++</span>uid <span class="token comment" spellcheck="true">// uid for batching</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>computed <span class="token comment" spellcheck="true">// for computed watchers</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>depIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>expression <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span>      <span class="token operator">?</span> expOrFn<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true">// parse expression for getter</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> expOrFn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> expOrFn    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token function">parsePath</span><span class="token punctuation">(</span>expOrFn<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">'production'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">warn</span><span class="token punctuation">(</span>          <span class="token template-string"><span class="token string">`Failed watching path: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expOrFn<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" `</span></span> <span class="token operator">+</span>          <span class="token string">'Watcher only accepts simple dot-delimited paths. '</span> <span class="token operator">+</span>          <span class="token string">'For full control, use a function instead.'</span><span class="token punctuation">,</span>          vm        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>computed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> undefined      <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Evaluate the getter, and re-collect dependencies.   */</span>  <span class="token keyword">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> value    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>vm    <span class="token keyword">try</span> <span class="token punctuation">{</span>      value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`getter for watcher "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>expression<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"`</span></span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// "touch" every property so they are all tracked as</span>      <span class="token comment" spellcheck="true">// dependencies for deep watching</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupDeps</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> value  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Add a dependency to this directive.   */</span>  addDep <span class="token punctuation">(</span>dep<span class="token punctuation">:</span> Dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * Clean up for dependency collection.   */</span>  cleanupDeps <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>dep<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dep<span class="token punctuation">.</span><span class="token function">removeSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>depIds    <span class="token keyword">this</span><span class="token punctuation">.</span>depIds <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds    <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds <span class="token operator">=</span> tmp    <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps    <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps    <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps <span class="token operator">=</span> tmp    <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Watcher</code> 是一个 Class，在它的构造函数中，定义了一些和 <code>Dep</code> 相关的属性：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDeps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>this.deps</code> 和 <code>this.newDeps</code> 表示 <code>Watcher</code> 实例持有的 <code>Dep</code> 实例的数组；而 <code>this.depIds</code> 和 <code>this.newDepIds</code> 分别代表 <code>this.deps</code> 和 <code>this.newDeps</code> 的 <code>id</code> Set（这个 Set 是 ES6 的数据结构，它的实现在 <code>src/core/util/env.js</code> 中）。那么这里为何需要有 2 个 <code>Dep</code> 实例数组呢，稍后我们会解释。</p><p><code>Watcher</code> 还定义了一些原型的方法，和依赖收集相关的有 <code>get</code>、<code>addDep</code> 和 <code>cleanupDeps</code> 方法，单个介绍它们的实现不方便理解，我会结合整个依赖收集的过程把这几个方法讲清楚。</p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>之前我们介绍当对数据对象的访问会触发他们的 getter 方法，那么这些对象什么时候被访问呢？还记得之前我们介绍过 Vue 的 mount 过程是通过 <code>mountComponent</code> 函数，其中有一段比较重要的逻辑，大致如下：</p><pre class="line-numbers language-js"><code class="language-js">updateComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> updateComponent<span class="token punctuation">,</span> noop<span class="token punctuation">,</span> <span class="token punctuation">{</span>  before <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">callHook</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> <span class="token string">'beforeUpdate'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* isRenderWatcher */</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们去实例化一个渲染 <code>watcher</code> 的时候，首先进入 <code>watcher</code> 的构造函数逻辑，然后会执行它的 <code>this.get()</code> 方法，进入 <code>get</code> 函数，首先会执行：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">pushTarget</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>pushTarget</code> 的定义在 <code>src/core/observer/dep.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> pushTarget <span class="token punctuation">(</span>_target<span class="token punctuation">:</span> Watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span> targetStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Dep<span class="token punctuation">.</span>target<span class="token punctuation">)</span>  Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> _target<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实际上就是把 <code>Dep.target</code> 赋值为当前的渲染 <code>watcher</code> 并压栈（为了恢复用）。接着又执行了：</p><pre class="line-numbers language-js"><code class="language-js">value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> vm<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>this.getter</code> 对应就是 <code>updateComponent</code> 函数，这实际上就是在执行：</p><pre class="line-numbers language-js"><code class="language-js">vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hydrating<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它会先执行 <code>vm._render()</code> 方法，因为之前分析过这个方法会生成 渲染 VNode，并且在这个过程中会对 <code>vm</code> 上的数据访问，这个时候就触发了数据对象的 getter。</p><p>那么每个对象值的 getter 都持有一个 <code>dep</code>，在触发 getter 的时候会调用 <code>dep.depend()</code> 方法，也就会执行 <code>Dep.target.addDep(this)</code>。</p><p>刚才我们提到这个时候 <code>Dep.target</code> 已经被赋值为渲染 <code>watcher</code>，那么就执行到 <code>addDep</code> 方法：</p><pre class="line-numbers language-js"><code class="language-js">addDep <span class="token punctuation">(</span>dep<span class="token punctuation">:</span> Dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> id <span class="token operator">=</span> dep<span class="token punctuation">.</span>id  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>depIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时候会做一些逻辑判断（保证同一数据不会被添加多次）后执行 <code>dep.addSub(this)</code>，那么就会执行 <code>this.subs.push(sub)</code>，也就是说把当前的 <code>watcher</code> 订阅到这个数据持有的 <code>dep</code> 的 <code>subs</code> 中，这个目的是为后续数据变化时候能通知到哪些 <code>subs</code> 做准备。</p><p>所以在 <code>vm._render()</code> 过程中，会触发所有数据的 getter，这样实际上已经完成了一个依赖收集的过程。那么到这里就结束了么，其实并没有，在完成依赖收集后，还有几个逻辑要执行，首先是：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deep<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个是要递归去访问 <code>value</code>，触发它所有子项的 <code>getter</code>，这个之后会详细讲。接下来执行：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">popTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>popTarget</code> 的定义在 <code>src/core/observer/dep.js</code> 中：</p><pre class="line-numbers language-js"><code class="language-js">Dep<span class="token punctuation">.</span>target <span class="token operator">=</span> targetStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际上就是把 <code>Dep.target</code> 恢复成上一个状态，因为当前 vm 的数据依赖收集已经完成，那么对应的渲染<code>Dep.target</code> 也需要改变。最后执行：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cleanupDeps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其实很多人都分析过并了解到 Vue 有依赖收集的过程，但我几乎没有看到有人分析依赖清空的过程，其实这是大部分同学会忽视的一点，也是 Vue 考虑特别细的一点。</p><pre class="line-numbers language-js"><code class="language-js">cleanupDeps <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">.</span>length  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>dep<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      dep<span class="token punctuation">.</span><span class="token function">removeSub</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>depIds  <span class="token keyword">this</span><span class="token punctuation">.</span>depIds <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds  <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds <span class="token operator">=</span> tmp  <span class="token keyword">this</span><span class="token punctuation">.</span>newDepIds<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deps  <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps  <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps <span class="token operator">=</span> tmp  <span class="token keyword">this</span><span class="token punctuation">.</span>newDeps<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>考虑到 Vue 是数据驱动的，所以每次数据变化都会重新 render，那么 <code>vm._render()</code> 方法又会再次执行，并再次触发数据的 getters，所以 <code>Wathcer</code> 在构造函数中会初始化 2 个 <code>Dep</code> 实例数组，<code>newDeps</code> 表示新添加的 <code>Dep</code> 实例数组，而 <code>deps</code> 表示上一次添加的 <code>Dep</code> 实例数组。</p><p>在执行 <code>cleanupDeps</code> 函数的时候，会首先遍历 <code>deps</code>，移除对 <code>dep.subs</code> 数组中 <code>Wathcer</code> 的订阅，然后把 <code>newDepIds</code> 和 <code>depIds</code> 交换，<code>newDeps</code> 和 <code>deps</code> 交换，并把 <code>newDepIds</code> 和 <code>newDeps</code> 清空。</p><p>那么为什么需要做 <code>deps</code> 订阅的移除呢，在添加 <code>deps</code> 的订阅过程，已经能通过 <code>id</code> 去重避免重复订阅了。</p><p>考虑到一种场景，我们的模板会根据 <code>v-if</code> 去渲染不同子模板 a 和 b，当我们满足某种条件的时候渲染 a 的时候，会访问到 a 中的数据，这时候我们对 a 使用的数据添加了 getter，做了依赖收集，那么当我们去修改 a 的数据的时候，理应通知到这些订阅者。那么如果我们一旦改变了条件渲染了 b 模板，又会对 b 使用的数据添加了 getter，如果我们没有依赖移除的过程，那么这时候我去修改 a 模板的数据，会通知 a 数据的订阅的回调，这显然是有浪费的。</p><p>因此 Vue 设计了在每次添加完新的订阅，会移除掉旧的订阅，这样就保证了在我们刚才的场景中，如果渲染 b 模板的时候去修改 a 模板的数据，a 数据订阅回调已经被移除了，所以不会有任何浪费，真的是非常赞叹 Vue 对一些细节上的处理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这一节的分析，我们对 Vue 数据的依赖收集过程已经有了认识，并且对这其中的一些细节做了分析。收集依赖的目的是为了当这些响应式数据发生变化，触发它们的 setter 的时候，能知道应该通知哪些订阅者去做相应的逻辑处理，我们把这个过程叫派发更新，其实 <code>Watcher</code> 和 <code>Dep</code> 就是一个非常经典的观察者设计模式的实现，下一节我们来详细分析一下派发更新的过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;依赖收集&quot;&gt;&lt;a href=&quot;#依赖收集&quot; class=&quot;headerlink&quot; title=&quot;依赖收集&quot;&gt;&lt;/a&gt;依赖收集&lt;/h1&gt;&lt;p&gt;通过上一节的分析我们了解 Vue 会把普通对象变成响应式对象，响应式对象 getter 相关的逻辑就是做依赖收集，这一节我们
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://www.chenya.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="日常学习" scheme="http://www.chenya.site/tags/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端资源" scheme="http://www.chenya.site/tags/%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90/"/>
    
      <category term="Vue源码学习" scheme="http://www.chenya.site/tags/Vue%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
